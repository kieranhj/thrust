\ *****************************************************************************
\ *****************************************************************************
\ * Thrust
\ * By Jeremey C. Smith
\ *
\ * Source disassembly & documentation by Kieran HJ Connell, February 2016
\ * Initial disassembly created using BeebDis by Phill Harvey-Smith
\ * Verified to compile using BeebAsm by Rich Talbot-Watkins
\ * With thanks to jms2 for his original Thrust disassembly notes and
\ * Matt Godbolt for his encouragement for me to get this released!
\ *
\ * Notes:
\ * Original $.THRUST3 executable had to first be decrypted -> (Thrust4)
\ * Relocated from load address $1A00 to executation address $A60 -> (Thrust5)
\ * Relocation code modified slightly as no longer encrypted -> (Thrust6)
\ * Source documented and annotated for first release --> (Thrust7)
\ * Subsequent corrections & documentation --> (Thrust8)
\ *
\ * _LO & _HI used to identify low byte & high byte of 16-bit values & pointers
\ *
\ * Most calculations are in Q7.8 fixed-point arithmetic although y values are
\ * stored in Q10.8 as each world can be several screens deep. Some physics
\ * calculations are performed Q7.16  in x to provide additional precision.
\ * _FRAC & _INT are used to identify the fraction and integer components of a
\ * fixed-point variable. _FRAC_LO is used to signify an additional byte of
\ * precision at the low end whilst _INT_HI is used for additional upper bits.
\ * 
\ * TO DO:
\ * - Properly document each function and how each routine actually works
\ * - Identify remaining zero page variables
\ * - Extract constants and globals from immediates
\ * - Sleep
\ *****************************************************************************
\ *****************************************************************************


NATIVE_ADDR		= &A60		; address at which code will run
RELOAD_ADDR		= &1A00		; address at which code will load

OFFSET			= RELOAD_ADDR - NATIVE_ADDR

\ ******************************************************************************
\ ******************************************************************************
\ * Constants
\ ******************************************************************************
\ ******************************************************************************

SCREEN_BASE_ADDR = $3C80
SCREEN_WIDTH_CHARS = 72
SCREEN_CHAR_ROW_BYTES = (SCREEN_WIDTH_CHARS * 8)
SCREEN_START_ADDR = SCREEN_BASE_ADDR + SCREEN_CHAR_ROW_BYTES * 2		; first two rows are status bar

ASCII_beep		= $07
ASCII_space 	= $20
ASCII_escape	= $1B
ASCII_0			= $30
ASCII_9			= $39
ASCII_a			= $61
ASCII_z			= $7A
ASCII_delete	= $7F

INKEY_spacebar	= $9D
INKEY_ctrl 		= $FE
INKEY_capslock	= $BF
INKEY_shift		= $FF
INKEY_return	= $B6
INKEY_escape	= $8F
INKEY_copy		= $96
INKEY_Q			= $EF
INKEY_S			= $AE

OBJECT_gun_up_right = $0
OBJECT_gun_down_right = $1
OBJECT_gun_up_left = $2
OBJECT_gun_down_left = $3
OBJECT_fuel = $4
OBJECT_pod_stand = $5
OBJECT_generator = $6
OBJECT_door_switch_right = $7
OBJECT_door_switch_left = $8

PARTICLE_flag = $80								; particle can be replaced
PARTICLE_lifetime_bullet = $28
PARTICLE_lifetime_generator = $0A
PARTICLE_lifetime_star = $1E
PARTICLE_table_max = $1F
PARTICLE_type_player_bullet = $00
PARTICLE_type_debris = $01						; shoot generator
PARTICLE_type_star = $02
PARTICLE_type_hostile_bullet = $03

\ ******************************************************************************
\ ******************************************************************************
\ * Zero Page - variables
\ ******************************************************************************
\ ******************************************************************************

L0000 = $0000
window_xpos_INT   = $0000						; x position of window into world coordinates that is drawn on screen
demo_mode_flag   = $0001						; 0 = real game, non-zero = demo mode
planet_explode_anim   = $0002					; initialised to $F and decrements to 0
window_ypos_INT   = $0003						; y position of window into world coordinates that is drawn on screen
window_ypos_EXT   = $0004						; "
window_scroll_x   = $0005						; *think* this is the scroll offset in x for the window
window_scroll_y   = $0006						; *think* this is the scroll offset in y for the window
midpoint_xpos_FRAC_LO   = $0007					; fractional part - additional lower 8 bits
midpoint_xpos_FRAC   = $0008					; calculated as player_pos + nearest_obj_pos / 2
midpoint_xpos_INT   = $0009						; all physics calculations are performed on the mid-point
midpoint_ypos_FRAC   = $000A					; once the ship and pod are attached
midpoint_ypos_INT   = $000B						; integer part
midpoint_ypos_INT_HI   = $000C					; integer part - additional upper 8 bits
ship_angle   = $000D							; $00 = up, $10 = down, $1F = max angle
old_plot_ship_at_ptr   = $000E					; remembers plot_ship_at_ptr
old_plot_ship_at_ptr_HI   = $000F				; "
old_plot_ship_L0075   = $0010					; remembers plot_ship_L0075
old_plot_ship_sprite_number   = $0011			; remembers plot_ship_sprite_number
force_vectorx_FRAC_LO   = $0012					; 
force_vectorx_FRAC   = $0013					; 
force_vectorx_INT   = $0014						; 
force_vectory_FRAC   = $0015					; set to gravity_FRAC in ship_input_thrust_calculate_force
force_vectory_INT   = $0016						; set to gravity_INT in ship_input_thrust_calculate_force
pod_sprite_plotted_flag   = $0017				; set to 1 as plot_pod_sprite is called
ship_sprite_plotted_flag   = $0018				; 
level_tick_counter   = $0019					; increments every tick loop
vsync_count   = $001A							; increments every vsync event
angle_var_A_accumulate   = $001B				; accumulates angle_var_A
angle_var_B_accumulate   = $001C				; accumulates angle_var_B
angle_ship_to_pod   = $001D						; AND #$1F - number of angles in table
angle_var_A   = $001E							; these all appear to accumulate to calculate accurate angle of midpoint vector
angle_var_B   = $001F							; essentially the rotational physics simulation
angle_var_C   = $0020							; 
pod_attached_flag_1   = $0022					; set to non-zero at top of attach_pod_to_ship function
midpoint_deltax_FRAC   = $0023					; add midpoint_delta to midpoint to get ship_position
midpoint_deltax_INT   = $0024					; subtract midpoint_delta from midpoint to get pod_position
midpoint_deltay_FRAC   = $0025					; " (fractional part)
midpoint_deltay_INT   = $0026					; " (integer part)
shield_tractor_pressed   = $0027				; non-zero when space is pressed
sheild_tractor_flag   = $0028					; may still be zero when space is pressed!
plot_ship_collision_detected   = $002A			; set in plot_ship function
plot_pod_collision_detected   = $002B			; set in plot_pod_sprite function
player_pressed_fire   = $002C					; non-zero when fire key is pressed
bullet_index   = $002D							; can only have 4 bullets active at one time
player_ypos_FRAC   = $002E						; calculated by adding midpoint_delta to midpoint_position
player_ypos_INT   = $002F						; "
player_ypos_INT_HI   = $0030					; "
old_midpoint_xpos_FRAC_LO   = $0031				; remembers temp_midpoint_xpos_FRAC_LO
player_xpos_FRAC   = $0032						; (as above)
player_xpos_INT   = $0033						; (as above)
player_velocityy_FRAC   = $0034					; calculated in calculate_player_position_from_midpoint
player_velocityy_INT   = $0035					; used to add player velocity to bullets when firing
player_velocityy_INT_HI   = $0036				; "
diff_midpoint_xpos_FRAC_LO   = $0037			; **UNUSED** ?
player_velocityx_FRAC   = $0038					; (as above)
player_velocityx_INT   = $0039					; (as above)
rnd_A   = $003A									; used by rnd function
rnd_B   = $003B									; used by rnd function
collecting_fuel_flag   = $003C					; set to 1 if using tractor beam near fuel object
generator_recharge_counter   = $003D			; number of ticks to recharge generator
generator_recharge_increase   = $003E			; increase in time between recharges after each hit
old_plot_pod_sprite_at_ptr   = $003F			;
old_plot_pod_sprite_at_ptr_HI   = $0040			;
old_plot_pod_L0076   = $0041					;
player_ship_destroyed_flag   = $0042			; set to $FF during init, 0 or 1 at other times
level_ended_flag   = $0043						; set to 0 each tick, set to $FF in one place - suspect collision / death?
pod_destroying_player_timer   = $0044			; set to $FF during init, otherwise counts down during explode?
pod_line_exists_flag   = $0045					; related to tractor_beam_started_flag
old_draw_line_start_x   = $0046					; remembers draw_line_start_x
old_draw_line_end_x   = $0047					; remembers draw_line_end_x
old_draw_line_start_y   = $0048					; remembers draw_line_start_y
old_draw_line_end_y   = $0049					; remembers draw_line_end_y
line_drawn_flag   = $004A						; 0 or $FF set in draw_new_line, unset in erase_old_line 
midpoint_window_xpos_INT   = $004B				; calculated in update_window_and_terrain_tables
midpoint_window_ypos_INT   = $004C				; "
midpoint_deltax_FRAC_LO   = $004D				; "
ship_window_xpos_FRAC   = $004E					; calculated in update_shield_tractor_draw_ship_and_pod
ship_window_xpos_INT   = $004F					; *think* these are relative to the window position
ship_window_ypos_INT   = $0050					; i.e. screen coordinates not world
pod_window_xpos_FRAC   = $0051					; *think* these are relative to the window position
pod_window_xpos_INT   = $0052					; i.e. screen coordinates not world
pod_window_ypos_INT   = $0053					; "
top_nibble_index   = $0054						; initialised to $E (14) and decremented by 2, used to index lookup_top_nibble
fuel_beam_position_flag   = $0055				; set & unset in tick_fuel_pickup_draw_beams
fuel_value_updated_flag   = $0056				; when zero indicates fuel value needs to be updated on screen
fuel_just_ran_out_flag   = $0057				; set moment player runs out of fuel
old_player_xpos_FRAC   = $0058					; remembers player_xpos_FRAC
old_player_xpos_INT   = $0059					; remembers player_xpos_INT
old_player_ypos_INT   = $005A					; remembers player_ypos_INT
old_player_ypos_INT_HI   = $005B				; remembers player_ypos_INT_HI
pod_xpos_FRAC   = $005C							; calculated in calculate_pod_pos
pod_xpos_INT   = $005D							; "
pod_ypos_FRAC   = $005E							; "
pod_ypos_INT_HI   = $005F						; "
sound_timer   = $0060							; counts down to stop sounds from playing on top of each other
level_tick_state   = $0061						; set to 1 when paused, 0 when running, $FF when initialising
char_write_ptr_LO   = $0062						; address fonts are plotted to the screen
char_write_ptr_HI   = $0063						; "
nearest_obj_xpos_FRAC   = $0064					; calculated in calculate_object_plot_addr
nearest_obj_xpos_INT   = $0065					; "
nearest_obj_ypos_INT   = $0066					; "
nearest_obj_ypos_INT_HI   = $0067				; "
tractor_beam_started_flag   = $0068				; related to pod_line_exists_flag
countdown_timer_ticks   = $0069					; used to time between countdown timer seconds
planet_countdown_timer   = $006A				; set to $FF or $A on countdown
door_switch_counter_A   = $006B					; used in level door logic
door_switch_counter_B   = $006C					; "

\ ******************************************************************************
\ ******************************************************************************
\ * Zero Page - temporary variables - often reused
\ ******************************************************************************
\ ******************************************************************************

boot_read_ptr = $0070							; in bootstrap code
value_LO = $0070								; in bootstrap code
temp_midpoint_xpos_FRAC_LO   = $0070
terrain_y_count_inner   = $0070
plot_sprite_at_ptr   = $0070
calc_force_vectory_FRAC   = $0070
pixels_ptr_pixel_byte	= $0070
plot_pod_L0070   = $0070						; **NEEDS TO BE IDENTIFIED**
plot_ship_L0070   = $0070						; **NEEDS TO BE IDENTIFIED**

value_HI = $0071								; in bootstrap code
terrain_y_count_outer   = $0071
calc_force_vectory_INT   = $0071
plot_ship_at_y_offset   = $0071
new_ship_xpos_FRAC   = $0071
attach_pod_L0071   = $0071						; **NEEDS TO BE IDENTIFIED**
draw_line_L0071	= $0071							; only appears once - is this unused or another variable?
particles_L0071   = $0071						; **NEEDS TO BE IDENTIFIED**
plot_pod_L0071   = $0071						; **NEEDS TO BE IDENTIFIED**

boot_write_ptr   = $0072						; in bootstrap code
terrain_draw_start_x   = $0072		
terrain_draw_ptr   = $0072		
plot_static_sprite_L0072   = $0072
calc_force_vectorx_FRAC   = $0072
plot_ship_at_ptr   = $0072						; address LO
new_ship_xpos_INT   = $0072
plot_pixels_ptr	= $0072
attach_pod_L0072   = $0072						; **NEEDS TO BE IDENTIFIED**
particles_L0072   = $0072						; **NEEDS TO BE IDENTIFIED**
plot_pod_L0072	= $0072							; **NEEDS TO BE IDENTIFIED**
tractor_beam_L0072	= $0072						; **NEEDS TO BE IDENTIFIED**

calc_force_vectorx_INT   = $0073
attach_pod_L0073   = $0073	
plot_pod_sprite_L0073   = $0073
new_ship_ypos_FRAC   = $0073
obj_vis_L0073   = $0073							; **NEEDS TO BE IDENTIFIED**

terrain_draw_wall_index   = $0074
attach_pod_L0074   = $0074
pod_sprite_ptr_LO   = $0074
new_ship_ypos_INT   = $0074
particle_write_ptr	= $0074
pixels_ptr_mask_index	= $0074
obj_vis_L0074   = $0074							; **NEEDS TO BE IDENTIFIED**

pod_sprite_ptr_HI   = $0075
plot_ship_L0075   = $0075						; **NEEDS TO BE IDENTIFIED**
attach_pod_L0075   = $0075						; **NEEDS TO BE IDENTIFIED**
calc_player_ypos_INT_HI   = $0075				; **NEEDS TO BE IDENTIFIED**
draw_line_L0075	= $0075							; **NEEDS TO BE IDENTIFIED**
obj_vis_L0075   = $0075							; **NEEDS TO BE IDENTIFIED**

terrain_draw_addr_LO   = $0076
plot_ship_sprite_number		= $0076				; which ship sprite to plot (0 - $10) or shield ($11)
explosion_dx_FRAC   = $0076
particle_pixel_byte   = $0076
rnd_AND_3   = $0076
score_value	= $0076
attach_pod_L0076   = $0076						; **NEEDS TO BE IDENTIFIED**
draw_line_L0076	= $0076							; **NEEDS TO BE IDENTIFIED**
obj_vis_L0076   = $0076							; **NEEDS TO BE IDENTIFIED**
plot_pod_L0076   = $0076						; **NEEDS TO BE IDENTIFIED**

terrain_draw_addr_HI   = $0077					; stores HI byte of address to draw landscape at
plot_pod_sprite_at_ptr   = $0077
explosion_dx_INT   = $0077
calc_ship_window_xpos_INT	= $0077
attach_pod_L0077   = $0077						; **NEEDS TO BE IDENTIFIED**
obj_vis_L0077   = $0077							; **NEEDS TO BE IDENTIFIED**
particles_L0077   = $0077						; **NEEDS TO BE IDENTIFIED**

terrain_xpos_1_clipped   = $0078
explosion_dy_FRAC   = $0078
draw_line_L0078	= $0078
ship_thrust_x_INT   = $0078
attach_pod_L0078   = $0078						; **NEEDS TO BE IDENTIFIED**
obj_vis_L0078   = $0078							; **NEEDS TO BE IDENTIFIED**

terrain_xpos_2_clipped   = $0079
ship_window_ypos_FRAC	= $0079
explosion_dy_INT   = $0079
pixels_ptr_temp_L0079	= $0079
obj_vis_L0079   = $0079							; **NEEDS TO BE IDENTIFIED**
particles_L0079   = $0079						; **NEEDS TO BE IDENTIFIED**
plot_pod_L0079	= $0079							; **NEEDS TO BE IDENTIFIED**
ship_thrust_L0079   = $0079						; **NEEDS TO BE IDENTIFIED**

plot_ship_index   = $007A
current_object   = $007A
ship_thrust_x_FRAC   = $007A
attach_pod_L007A   = $007A						; **NEEDS TO BE IDENTIFIED**
plot_pod_L007A   = $007A						; **NEEDS TO BE IDENTIFIED**
pod_vector_L007A   = $007A						; **NEEDS TO BE IDENTIFIED**

terrain_draw_table_index   = $007B
obj_plot_sprite_at_ptr	= $007B
prev_angle_var_B	= $007B
calc_ship_delta_FRAC	= $007B
particles_flag1   = $007B
attach_pod_L007B	= $007B						; **NEEDS TO BE IDENTIFIED**
plot_pod_L007B   = $007B						; **NEEDS TO BE IDENTIFIED**
teleport_L007B   = $007B						; **NEEDS TO BE IDENTIFIED**

prev_angle_var_C	= $007C
calc_ship_delta_INT	= $007C
particle_byte_mask	= $007C
plot_pod_sprite_y_offset	= $007C
attach_pod_L007C	= $007C						; **NEEDS TO BE IDENTIFIED**

prev_angle_var_A	= $007D
particle_masked_pixels	= $007D
current_obj_xpos_INT	= $007D

temp_angle_ship_to_pod	= $007E
player_to_particle_deltay_INT	= $007E
current_obj_ypos_INT	= $007E
ship_thrust_L007E	= $007E						; **NEEDS TO BE IDENTIFIED**

calc_force_vectorx_FRAC_LO	= $007F
explosion_particle_count	= $007F
current_obj_ypos_EXT	= $007F

old_brkv = $0080
relocate_src_ptr = $0080						; in relocation code
time_out_vsync_count = $0080
high_score_ptr_A   = $0080						; new high score only
clear_screen_ptr	= $0080
level_reset_ptr   = $0080							
plot_string_ptr   = $0080							
window_deltax_INT   = $0080						; calculated in update_window_and_terrain_tables
add_score_thousands   = $0080
old_plot_pixels_ptr   = $0080
update_objects_flag   = $0080

current_object_width   = $0081
door_logic_L0081   = $0081						; **NEEDS TO BE IDENTIFIED**

relocate_dest_ptr = $0082						; in relocation code
high_score_ptr_B   = $0082						; new high score only
level_reset_ptr2   = $0082
current_object_height   = $0082							
plot_high_score_number   = $0082
teleport_effect_L0082	= $0082					; **NEEDS TO BE IDENTIFIED**

object_type   = $0083							
teleport_effect_L0083	= $0083

high_score_counter   = $0084					; new high score only
level_reset_size   = $0084							
old_pixels_ptr_mask_index   = $0084
gun_param_L0084   = $0084						; **NEEDS TO BE IDENTIFIED**

current_obj_visible_flag   = $0085
high_score_ptr_C   = $0085

gun_param_L0086   = $0086						; **NEEDS TO BE IDENTIFIED**
teleport_L0086   = $0086						; **NEEDS TO BE IDENTIFIED**

score_accumulation   = $0087
teleport_appear_or_disappear   = $0087			; $00 = appear, $FF = disappear

explosion_xpos_FRAC   = $0088
draw_line_start_x   = $0088
attach_pod_L0088   = $0088						; **NEEDS TO BE IDENTIFIED**

draw_line_start_y   = $0089
explosion_xpos_INT   = $0089
attach_pod_L0089   = $0089						; **NEEDS TO BE IDENTIFIED**

draw_line_end_x   = $008A
explosion_ypos_INT   = $008A
attach_pod_L008A   = $008A						; **NEEDS TO BE IDENTIFIED**

draw_line_end_y   = $008B
explosion_ypos_INT_HI  = $008B
attach_pod_L008B   = $008B						; **NEEDS TO BE IDENTIFIED**

plot_line_pixels_byte   = $008C
explosion_angle   = $008C
attach_pod_L008C   = $008C						; **NEEDS TO BE IDENTIFIED**

explosion_particle_type   = $008D
attach_pod_L008E   = $008E						; **NEEDS TO BE IDENTIFIED**
attach_pod_L008F   = $008F						; **NEEDS TO BE IDENTIFIED**

\ ******************************************************************************
\ ******************************************************************************
\ * Zero Page - variables
\ ******************************************************************************
\ ******************************************************************************

extra_string_counter   = $009B					; counter to write extra strings?
extra_string_index   = $009C					; index into array of extra strings?
terrain_data_x_increment_ptr   = $009D			; pointer to terrain x increment data for level
terrain_data_count_ptr   = $009F				; pointer to terrain count data for level
irq1_timer1_signal   = $00A1					; set to 0 at vsync and 1 when timer1 triggers
mute_sound_flag   = $00A2						; set to non-zero to mute sound
hostile_gun_shoot_probability   = $00A3			; probability that a gun will shoot
UNUSED_game_flag   = $00A4						; set to $FF or $00 - unused?
invisible_landscape_flag   = $00A5				; game var init 0 - inverted start of each level
gravity_INT   = $00A6							; gravity vector for level (integer part)
gravity_FRAC   = $00A7							; " (fractional part)

\ ******************************************************************************
\ ******************************************************************************

IRQ1_RETURN_A   = $00FC							; OS IRQ handler

\ ******************************************************************************
\ ******************************************************************************
\ * Page &100 - High score table + score data + sound params
\ ******************************************************************************
\ ******************************************************************************

high_score_table   = $0100
score_A   = $0180								; score stored as three byte BCD number
score_B   = $0181								; so max score is 999,999
score_C   = $0182
old_irq1v   = $0190
sound_params_enter_orbit   = $0192				; found some spare bytes!

\ ******************************************************************************
\ ******************************************************************************
\ * Page &200 - OS Vectors
\ ******************************************************************************
\ ******************************************************************************

USERV   = $0200
BRKV    = $0202
IRQ1V   = $0204
L0205   = $0205
IRQ2V   = $0206
CLIV    = $0208
BYTEV   = $020A
WORDV   = $020C
WRCHV   = $020E
L020F   = $020F
RDCHV   = $0210
FILEV   = $0212
ARGSV   = $0214
BGETV   = $0216
BPUTV   = $0218
GBPBV   = $021A
FINDV   = $021C
FSCV    = $021E
EVENTV  = $0220
UPTV    = $0222
NETV    = $0224
VDUV    = $0226
KEYV    = $0228
INSV    = $022A
REMV    = $022C
CNPV    = $022E
INDV1   = $0230
INDV2   = $0232
INDV3   = $0234

\ ******************************************************************************
\ ******************************************************************************
\ * Page &400 - Relocated game entry code and game boot data tables
\ ******************************************************************************
\ ******************************************************************************

game_entry = $0400
palette_table   = $048F
crtc_regs   = $04A0
interlace_status_bit   = $04A8

\ ******************************************************************************
\ ******************************************************************************
\ * Page &300 - &5FF - Terrain run-time data
\ ******************************************************************************
\ ******************************************************************************

terrain_draw_table_1   = $02EF							; 11 bytes
terrain_draw_table_2   = $0300							; 94 bytes
terrain_draw_table_3   = $035E							; 11 bytes
terrain_draw_table_4   = $036F							; 145 bytes

terrain_left_wall   = $0400
terrain_right_wall   = $0500

\ ******************************************************************************
\ ******************************************************************************
\ * Page &600 - &7BF - Particle system run-time data
\ ******************************************************************************
\ ******************************************************************************

particles_xpos_FRAC   = $0600
particles_xpos_INT   = $0620
particles_ypos_FRAC   = $0640
particles_ypos_INT   = $0660
particles_ypos_INT_HI   = $0680
particles_dx_FRAC   = $06A0
particles_dx_INT   = $06C0
particles_dy_FRAC   = $06E0
particles_dy_INT   = $0700
particles_lifetime   = $0720
particles_scraddr_LO   = $0740
particles_scraddr_HI   = $0760
particles_pixels_byte   = $0780
particles_type   = $07A0

\ ******************************************************************************
\ ******************************************************************************
\ * Page &7C0 - Sound parameters
\ ******************************************************************************
\ ******************************************************************************

sound_params_page = $0700
sound_params_countdown   = $07C0
sound_params_own_gun   = $07C8
sound_params_explosion_1   = $07D0
sound_params_explosion_2   = $07D8
sound_params_hostile_gun   = $07E0
sound_params_collect_1   = $07E8
sound_params_collect_2   = $07F0
sound_params_engine   = $07F8
sound_param_engine_pitch   = $07FC			; $2 or $5

\ ******************************************************************************
\ ******************************************************************************
\ * Page &880 - Lookup table angle to vector Y values
\ ******************************************************************************
\ ******************************************************************************

angle_to_y_FRAC   = $0880
angle_to_y_INT   = $08A0

\ ******************************************************************************
\ ******************************************************************************
\ * Page &900 - In-game messages and strings
\ ******************************************************************************
\ ******************************************************************************

in_game_messages   = $0900
string_game_over = $0900				; in_game_messages + message_game_over - in_game_messages_relocated
string_top_8_thrusters = $090D
string_congratulations = $0924
string_enter_name = $0937
string_press_spacebar = $0951
string_out_of_fuel = $096D

\ ******************************************************************************
\ ******************************************************************************
\ * Page &880 - Lookup table angle to vector X values
\ ******************************************************************************
\ ******************************************************************************

angle_to_x_FRAC   = $0980
angle_to_x_INT   = $09A0

\ ******************************************************************************
\ ******************************************************************************
\ * Page &9C0 - Lookup table for multiplication by 8 (LO & HI bytes)
\ ******************************************************************************
\ ******************************************************************************

mult_by_8_LO = $09C0
mult_by_8_HI = $0A10

\ ******************************************************************************
\ ******************************************************************************
\ * Hardware registers & OS Functions
\ ******************************************************************************
\ ******************************************************************************

SHEILA_6845_Register   = $FE00
SHEILA_6845_Value   = $FE01
SHEILA_Video_ULA   = $FE20
SHEILA_PaletteReg   = $FE21
SHEILA_System_VIA_Register_B   = $FE40
SHEILA_System_VIA_Register_A   = $FE41
SHEILA_System_VIA_Data_Dir   = $FE43
SHEILA_System_VIA_Interrupt_Flag   = $FE4D
SHEILA_System_VIA_Interrupt_Enable   = $FE4E
SHEILA_System_VIA_Register_A_NH   = $FE4F
SHEILA_User_VIA_Timer1_Low_Order   = $FE64
SHEILA_User_VIA_Timer1_High_Order   = $FE65
SHEILA_User_VIA_Aux_Ctrl_Reg   = $FE6B
SHEILA_User_VIA_Interrupt_Flag   = $FE6D
SHEILA_User_VIA_Interrupt_Enable   = $FE6E

OSWRSC  = $FFB3
DEFVEC  = $FFB6
OSRDSC  = $FFB9
OSEVEN  = $FFBF
GSINIT  = $FFC2
GSREAD  = $FFC5
NVRDCH  = $FFC8
NNWRCH  = $FFCB
OSFIND  = $FFCE
OSGBPB  = $FFD1
OSBPUT  = $FFD4
OSBGET  = $FFD7
OSARGS  = $FFDA
OSFILE  = $FFDD
OSRDCH  = $FFE0
OSASCI  = $FFE3
OSNEWL  = $FFE7
OSWRCH  = $FFEE
OSWORD  = $FFF1
OSBYTE  = $FFF4
OSCLI   = $FFF7
LFFFF   = $FFFF

\ ******************************************************************************
\ ******************************************************************************
\ * Start of code
\ ******************************************************************************
\ ******************************************************************************

ORG     NATIVE_ADDR
;GUARD	SCREEN_BASE_ADDR

.START

\ ******************************************************************************
\ * Message strings
\ ******************************************************************************

.end_of_level_messages		; bytes 0,1? byte 2=font byte mask, byte 3 onwards = text
\\ {
	.string_mission
        EQUB    $D0,$55,$FF
		EQUS	"Mission "		; terminated by following $FF
	.string_in
		EQUB	$FF,$00,$FF
		EQUS	"In"			; terminated by following $FF
	.string_complete
        EQUB    $FF,$00,$FF
		EQUS	"Complete"
		EQUB	$FF
	.string_bonus
		EQUB	$D0,$5C,$0F
		EQUS	"Bonus "		; terminated by following $FF
	.string_failed
		EQUB	$FF,$00,$FF
		EQUS	"Failed"
		EQUB	$FF
	.string_no_bonus
		EQUB	$E0,$5C,$0F
		EQUS	"No Bonus"
		EQUB	$FF
	.string_planet_destroyed
		EQUB	$20,$4F,$F0
		EQUS	"Planet Destroyed"
		EQUB	$FF
	.string_reverse_gravity
		EQUB	$A0,$53,$0F
		EQUS	"Reverse Gravity"
		EQUB	$FF
	.string_invisible_landscape
		EQUB	$80,$53,$0F
		EQUS	"Invisible Landscape"
        EQUB    $FF
	.string_i_love_space
		EQUB	$00,$58,$FF
		EQUS	"  I love space"
		EQUB	$FF
	.string_physics_is_fun
		EQUB	$00,$58,$FF
		EQUS	"Physics is fun"
		EQUB	$FF
	.string_support_hotol
		EQUB	$00,$58,$FF
		EQUS	" Support Hotol"			; https://en.wikipedia.org/wiki/HOTOL
		EQUB	$FF
\\ }

\ ******************************************************************************
\ * Pixel masks for MODE 1
\ ******************************************************************************

.pixel_masks_1
        EQUB    $88,$44,$22,$11
.pixel_masks_2
		EQUB	$80,$40,$20,$10
.pixel_masks_3
        EQUB    $08,$04,$02,$01

\ ******************************************************************************
\ * Pointers to ship sprite data
\ ******************************************************************************

.ship_sprite_ptr_table_LO
{
		EQUB	LO(ship_sprite_0_data)
		EQUB	LO(ship_sprite_1_data)
		EQUB	LO(ship_sprite_2_data)
		EQUB	LO(ship_sprite_3_data)
		EQUB	LO(ship_sprite_4_data)
		EQUB	LO(ship_sprite_5_data)
		EQUB	LO(ship_sprite_6_data)
		EQUB	LO(ship_sprite_7_data)
		EQUB	LO(ship_sprite_8_data)
		EQUB	LO(ship_sprite_9_data)
		EQUB	LO(ship_sprite_10_data)
		EQUB	LO(ship_sprite_11_data)
		EQUB	LO(ship_sprite_12_data)
		EQUB	LO(ship_sprite_13_data)
		EQUB	LO(ship_sprite_14_data)
		EQUB	LO(ship_sprite_15_data)
		EQUB	LO(ship_sprite_16_data)
		EQUB	LO(sheild_sprite_data)
}

.ship_sprite_ptr_table_HI
{
		EQUB	HI(ship_sprite_0_data)
		EQUB	HI(ship_sprite_1_data)
		EQUB	HI(ship_sprite_2_data)
		EQUB	HI(ship_sprite_3_data)
		EQUB	HI(ship_sprite_4_data)
		EQUB	HI(ship_sprite_5_data)
		EQUB	HI(ship_sprite_6_data)
		EQUB	HI(ship_sprite_7_data)
		EQUB	HI(ship_sprite_8_data)
		EQUB	HI(ship_sprite_9_data)
		EQUB	HI(ship_sprite_10_data)
		EQUB	HI(ship_sprite_11_data)
		EQUB	HI(ship_sprite_12_data)
		EQUB	HI(ship_sprite_13_data)
		EQUB	HI(ship_sprite_14_data)
		EQUB	HI(ship_sprite_15_data)
		EQUB	HI(ship_sprite_16_data)
		EQUB	HI(sheild_sprite_data)
}

\ ******************************************************************************
\ ******************************************************************************
\ * Landscape / terrain system
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: landscape_draw
\ * Description: <> 
\ ******************************************************************************

.landscape_draw
\\ {
        LDA     #$00
        STA     terrain_draw_table_index
		
        LDA     #$49								; 73 - why?
        CLC
        ADC     terrain_window_y_index
        STA     terrain_draw_wall_index
		
        LDA     #$02								; start at scanline 2
        STA     terrain_draw_addr_LO
		
        LDA     #HI(SCREEN_START_ADDR)
        STA     terrain_draw_addr_HI
		
        LDX     window_xpos_INT
        DEX
        STX     window_xpos_2						; **MODIFIES CODE**
        STX     window_xpos_1						; **MODIFIES CODE**

        CLC

	.landscape_draw_loop
        LDY     terrain_draw_wall_index				; starts at terrain_window_y_index + $49
        LDA     terrain_left_wall,Y

	.sbc_window_xpos_1
        SBC     #$00								; **SELF-MODIFIED CODE **
        window_xpos_1   = sbc_window_xpos_1+1
        BCS     terrain_xpos_1_greater_than_zero

        LDA     #$00								; clamp to 0
        JMP     terrain_xpos_1_less_than_screen_width

	.terrain_xpos_1_greater_than_zero
        CMP     #SCREEN_WIDTH_CHARS
        BCC     terrain_xpos_1_less_than_screen_width

        LDA     #SCREEN_WIDTH_CHARS					; clamp to screen width (chars)

	.terrain_xpos_1_less_than_screen_width
        STA     terrain_xpos_1_clipped
		
        LDY     terrain_draw_table_index
        SEC
        SBC     terrain_draw_table_2,Y				; number of columns to draw = xpos1 - table2
        BCS     terrain_width_1_greater_than_zero

        EOR     #$FF								; negate width to make positive
        TAX											; number of columns to draw
        INX											; +1
		
        LDA     terrain_xpos_1_clipped		
        STA     terrain_draw_table_2,Y				; update table_2 for next time?
		TAY											; start X column
		
        JMP     draw_terrain_xpos_1					; draw a line of terrain

	.terrain_width_1_greater_than_zero
        CLC
        BEQ     landscape_draw_part_2				; nothing to draw

        TAX											; number of columns to draw
        LDA     terrain_draw_table_2,Y
        STA     terrain_draw_start_x				; start X column
        LDA     terrain_xpos_1_clipped
        STA     terrain_draw_table_2,Y				; update table_2 for next time?
        LDY     terrain_draw_start_x				; start X column

	.draw_terrain_xpos_1
        JSR     draw_terrain

	.landscape_draw_part_2
        LDY     terrain_draw_wall_index
        LDA     terrain_right_wall,Y

	.sbc_window_xpos_2
        SBC     #$00								; **SELF-MODIFIED CODE **
        window_xpos_2   = sbc_window_xpos_2+1
        BCS     terrain_xpos_2_greater_than_zero

        LDA     #$00								; clamp to 0
        JMP     terrain_xpos_2_less_than_screen_width

	.terrain_xpos_2_greater_than_zero
        CMP     #SCREEN_WIDTH_CHARS					; clamp to screen width
        BCC     terrain_xpos_2_less_than_screen_width

        LDA     #SCREEN_WIDTH_CHARS
		
	.terrain_xpos_2_less_than_screen_width
        STA     terrain_xpos_2_clipped
        LDY     terrain_draw_table_index
        SEC
        SBC     terrain_draw_table_4,Y
        BCS     terrain_width_2_greater_than_zero

        EOR     #$FF								; negate width to make positive
        TAX											; number columns to draw
        INX											; +1

        LDA     terrain_xpos_2_clipped
        STA     terrain_draw_table_4,Y
        TAY											; start X column
		
        JMP     draw_terrain_xpos_2

	.terrain_width_2_greater_than_zero
        CLC
        BEQ     landscape_increment_index			; nothing to draw

        TAX											; number columns to draw
        LDA     terrain_draw_table_4,Y
        STA     terrain_draw_start_x				; start X column

        LDA     terrain_xpos_2_clipped
        STA     terrain_draw_table_4,Y				; update table 4?

        LDY     terrain_draw_start_x				; start X column

	.draw_terrain_xpos_2
        JSR     draw_terrain

	.landscape_increment_index
        INC     terrain_draw_wall_index
        INC     terrain_draw_table_index

.landscape_increment_draw_addr
        LDA     terrain_draw_addr_LO
        ADC     #$02								; only draw every other line
        STA     terrain_draw_addr_LO
        AND     #$07
        BEQ     landscape_draw_next_character_row

        JMP     landscape_draw_loop

	.landscape_draw_next_character_row
        LDA     terrain_draw_addr_LO
        ADC     #LO(SCREEN_CHAR_ROW_BYTES - 8)
        STA     terrain_draw_addr_LO
        LDA     terrain_draw_addr_HI
        ADC     #HI(SCREEN_CHAR_ROW_BYTES - 8)		; move down a character row
        STA     terrain_draw_addr_HI
        BMI     landscape_draw_return

        JMP     landscape_draw_loop

	.landscape_draw_return
        RTS
\\ }

\ ******************************************************************************
\ * Function: initialise_landscape
\ * Description: <> 
\ ******************************************************************************
		
.initialise_landscape
{
        LDX     #$01
        STX     terrain_left_wall_2_index
        STX     terrain_right_wall_2_index
        DEX
        STX     terrain_window_y_index
        STX     terrain_left_wall_1_xpos
        STX     terrain_left_wall_2_xpos
        STX     terrain_left_wall_1_index
        STX     terrain_right_wall_1_index
        DEX
        STX     terrain_left_wall_1_counter
        STX     terrain_right_wall_1_counter
        STX     terrain_right_wall_1_xpos
        STX     terrain_right_wall_2_xpos
        STX     terrain_left_wall_2_counter
        STX     terrain_right_wall_2_counter

        LDA     window_ypos_INT
        STA     terrain_y_count_inner
        LDA     window_ypos_EXT
        STA     terrain_y_count_outer
        INC     terrain_y_count_inner
        INC     terrain_y_count_outer
        INC     terrain_y_count_outer
        BNE     terrain_y_count_outer_not_zero

	.initialise_landscape_loop		; $C37
        JSR     terrain_process_accumulate_xpos	

	.terrain_y_count_outer_not_zero
        DEC     terrain_y_count_inner
        BNE     initialise_landscape_loop

        DEC     terrain_y_count_outer
        BNE     initialise_landscape_loop

        RTS
}

\ ******************************************************************************
\ * Functions: terrain_process_subtract_xpos, terrain_process_accumulate_xpos
\ * Description: updates all triples, terrain_left_wall & terrain_right_wall
\ ******************************************************************************

.terrain_call_process_fn
        JMP     terrain_call_process_fn_JMP_LO					; **SELF-MODIFIED CODE **
        terrain_call_process_fn_JMP_LO   = terrain_call_process_fn+1
        terrain_call_process_fn_JMP_HI   = terrain_call_process_fn+2

.terrain_process_subtract_xpos
{
        LDA     #LO(terrain_subtract_xpos_fn)
        STA     terrain_call_process_fn_JMP_LO					; **MODIFIES CODE**
        LDA     #HI(terrain_subtract_xpos_fn)
        STA     terrain_call_process_fn_JMP_HI					; **MODIFIES CODE**
        DEC     terrain_window_y_index
        JSR     terrain_process
        RTS
}

.terrain_process_accumulate_xpos
{
        LDA     #LO(terrain_accumulate_xpos_fn)
        STA     terrain_call_process_fn_JMP_LO					; **MODIFIES CODE**
        LDA     #HI(terrain_accumulate_xpos_fn)
        STA     terrain_call_process_fn_JMP_HI					; **MODIFIES CODE**
        INC     terrain_window_y_index
}
\\ Fall through!

.terrain_process
{
\\ Set pointers to data tables A & B
        LDA     terrain_left_wall_counter_LO
        STA     terrain_data_count_ptr
        LDA     terrain_left_wall_counter_HI
        STA     terrain_data_count_ptr+1
        LDA     terrain_left_wall_increment_LO
        STA     terrain_data_x_increment_ptr
        LDA     terrain_left_wall_increment_HI
        STA     terrain_data_x_increment_ptr+1

\\ Load first triple
        LDA     terrain_left_wall_1_xpos
        LDX     terrain_left_wall_1_counter
        LDY     terrain_left_wall_1_index
\\ Process triple
        JSR     terrain_call_process_fn
\\ Store returned values
        STY     terrain_left_wall_1_index
        STX     terrain_left_wall_1_counter

        LDY     terrain_window_y_index
        STA     terrain_left_wall,Y
        STA     terrain_left_wall_1_xpos

\\ Load second triple
        LDA     terrain_left_wall_2_xpos
        LDX     terrain_left_wall_2_counter
        LDY     terrain_left_wall_2_index
\\ Process triple
        JSR     terrain_call_process_fn
\\ Store returned values
        STY     terrain_left_wall_2_index
        STX     terrain_left_wall_2_counter

        LDY     terrain_window_y_index
        DEY
        STA     terrain_left_wall,Y
        STA     terrain_left_wall_2_xpos

\\ Set pointers to data tables C & D
        LDA     terrain_right_wall_counter_LO
        STA     terrain_data_count_ptr
        LDA     terrain_right_wall_counter_HI
        STA     terrain_data_count_ptr+1
        LDA     terrain_right_wall_increment_LO
        STA     terrain_data_x_increment_ptr
        LDA     terrain_right_wall_increment_HI
        STA     terrain_data_x_increment_ptr+1

\\ Load third triple
        LDA     terrain_right_wall_1_xpos
        LDX     terrain_right_wall_1_counter
        LDY     terrain_right_wall_1_index
\\ Process triple
        JSR     terrain_call_process_fn
\\ Store returned values
        STY     terrain_right_wall_1_index
        STX     terrain_right_wall_1_counter
        LDY     terrain_window_y_index
        STA     terrain_right_wall,Y
        STA     terrain_right_wall_1_xpos

\\ Load fourth triple
        LDA     terrain_right_wall_2_xpos
        LDX     terrain_right_wall_2_counter
        LDY     terrain_right_wall_2_index
\\ Process triple
        JSR     terrain_call_process_fn
\\ Store returned values
        STY     terrain_right_wall_2_index
        STX     terrain_right_wall_2_counter
        LDY     terrain_window_y_index
        DEY
        STA     terrain_right_wall,Y
        STA     terrain_right_wall_2_xpos
        RTS
}

\ ******************************************************************************
\ * Terrain variables
\ ******************************************************************************

.terrain_window_y_index			; $CfB
        EQUB    $00

.terrain_left_wall_1_xpos
        EQUB    $00

.terrain_left_wall_1_counter
        EQUB    $00

.terrain_left_wall_1_index
        EQUB    $00

.terrain_left_wall_2_xpos
        EQUB    $00

.terrain_left_wall_2_counter
        EQUB    $00

.terrain_left_wall_2_index
        EQUB    $00

.terrain_right_wall_1_xpos
        EQUB    $00

.terrain_right_wall_1_counter
        EQUB    $00

.terrain_right_wall_1_index
        EQUB    $00

.terrain_right_wall_2_xpos
        EQUB    $00

.terrain_right_wall_2_counter
        EQUB    $00

.terrain_right_wall_2_index
        EQUB    $00

.terrain_left_wall_counter_LO
        EQUB    $00

.terrain_left_wall_counter_HI
        EQUB    $00

.terrain_left_wall_increment_LO
        EQUB    $00

.terrain_left_wall_increment_HI
        EQUB    $00

.terrain_right_wall_counter_LO
        EQUB    $00

.terrain_right_wall_counter_HI
        EQUB    $00

.terrain_right_wall_increment_LO
        EQUB    $00

.terrain_right_wall_increment_HI
        EQUB    $00

\ ******************************************************************************
\ * Functions: terrain_accumulate_xpos_fn, terrain_subtract_xpos_fn
\ * Params: X = counter, Y = index into terrain data, A = accumulated x position
\ * Returns: X = updated counter, A = accumulated x position
\ * Description: <> 
\ ******************************************************************************
		
.terrain_accumulate_xpos_fn
{
		CPX		#$00
		BNE		terrain_accumulate_xpos_fn_counter_not_zero
		INY											; incremenet index into table
		PHA											; keep accumlator
		LDA		(terrain_data_count_ptr),Y			; read new count value from table
		TAX											; store new counter
		PLA											; restore accumulated x
		
	.terrain_accumulate_xpos_fn_counter_not_zero
		CLC
		ADC		(terrain_data_x_increment_ptr),Y	; add x increment to accumulated x from table
		DEX											; decrement counter
		RTS
}
		
.terrain_subtract_xpos_fn
{
		INX
		SEC
		SBC		(terrain_data_x_increment_ptr),Y
		PHA
		LDA		(terrain_data_count_ptr),Y
		STA		terrain_y_count_inner
		CPX		terrain_y_count_inner
		BNE		terrain_subtract_xpos_fn_counter_not_zero
		DEY
		LDX		#$00
		
	.terrain_subtract_xpos_fn_counter_not_zero
		PLA
		RTS
}

\ ******************************************************************************
\ * Function: draw_terrain
\ * Params: Y = start column, X = width to draw in columns
\ * Returns: none
\ * Description: <> 
\ ******************************************************************************

.draw_terrain
{
        LDA     mult_by_8_LO,Y
        STA     terrain_draw_ptr

        LDA     mult_by_8_HI,Y
        ADC     terrain_draw_addr_HI
        STA     terrain_draw_ptr+1
		
        LDY     terrain_draw_addr_LO
        LDA     #$F0						; solid line colour 2
        EOR     (terrain_draw_ptr),Y
        STA     (terrain_draw_ptr),Y
        DEX
        BEQ     draw_terrain_return

	.draw_terrain_loop
        TYA
        ADC     #$08						; next column
        TAY
        BCC     inc_terrain_draw_ptr_no_carry

        CLC
        INC     terrain_draw_ptr+1
		
	.inc_terrain_draw_ptr_no_carry
        LDA     #$F0						; solid line colour 2
        EOR     (terrain_draw_ptr),Y
        STA     (terrain_draw_ptr),Y
        DEX
        BNE     draw_terrain_loop

	.draw_terrain_return
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Level object system
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Object tables per object type
\ ******************************************************************************

.obj_tractor_counter	; indexed by current_object, initialised to 0 at start of level, counts up when tractor beam active
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

.obj_type_width
        EQUB    $05,$05,$05,$05,$04,$05,$05,$02,$02

.obj_type_height
        EQUB    $08,$08,$08,$08,$0A,$08,$0A,$08,$08

.obj_type_explosion_particle
        EQUB    $02,$02,$02,$02,$01				; only guns and fuel can be destroyed

.obj_type_score_value							; only guns and fuel can be destroyed
        EQUB    $75,$75,$75,$75,$15

\ ******************************************************************************
\ * Function: end_of_objects_function
\ * Description: Processing that happens once all objects have been updated
\ ******************************************************************************

.end_of_objects_function
{
        LDA     score_accumulation
        BEQ     skip_add_score

        JSR     add_A_to_score

	.skip_add_score
        JSR     update_pod_tractor_beam

        LDA     level_tick_counter
        AND     #$01
        BNE     skip_dec_generator

        LDA     generator_recharge_counter
        BEQ     skip_dec_generator

        DEC     generator_recharge_counter

	.skip_dec_generator
        DEC     countdown_timer_ticks
        BPL     return

        LDA     #$20
        STA     countdown_timer_ticks
		
        LDA     planet_countdown_timer
        BMI     return

        BEQ     skip_countdown_sound

		\\ Planet countdown timer sound
		
        DEC     planet_countdown_timer
        LDX     #LO(sound_params_collect_1)
        JSR     make_sound

	.skip_countdown_sound
	
		\\ Plot countdown timer on screen
	
        LDA     #$FF
        STA     font_byte_mask
        LDA     planet_countdown_timer
        CLC
        ADC     #ASCII_0					; ASCII '0'
        JSR     write_countdown_timer

        LDA     #$0F
        STA     font_byte_mask
        LDA     planet_countdown_timer
        BNE     return

        LDA     #$01
        STA     plot_ship_collision_detected
        LDA     #$FF
        STA     pod_attached_flag_2
	
	.return
        RTS
}

.end_of_obj_type_table
{
        JMP     end_of_objects_function
}

\ ******************************************************************************
\ * Function: write_countdown_timer
\ * Params: A = ASCII of number to plot
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.write_countdown_timer
{
        LDX     #$69
        LDY     #$3F
        JSR     plot_char_set_scr_addr_XY
        JSR     plot_char_A

        LDX     #$39
        LDY     #$40
        JSR     plot_char_set_scr_addr_XY
        JSR     plot_char_A

        RTS
}

\ ******************************************************************************
\ * Function: accumulate_score_A
\ * Params: A = score value
\ * Returns: A = accumulated score
\ * Description: <>
\ ******************************************************************************

.accumulate_score_A
{
        CLC
        ADC     score_accumulation
        STA     score_accumulation
        RTS
}

\ ******************************************************************************
\ * Function: update_and_draw_all_objects
\ * Description: Update and draw all objects
\ ******************************************************************************

.update_and_draw_all_objects
\\ {
        LDX     #$00
        STX     collecting_fuel_flag
        STX     score_accumulation

	.update_objects_loop
        STX     current_object

	.load_object_type
        LDA     level_0_obj_type,X					; **SELF-MODIFIED CODE**
        level_obj_type_addr_LO   = load_object_type+1
        level_obj_type_addr_HI   = load_object_type+2

        CMP     #$FF
        BEQ     end_of_obj_type_table

        STA     object_type

	.load_gun_param
        LDA     level_0_gun_param,X					; **SELF-MODIFIED CODE**
        level_gun_param_addr_LO   = load_gun_param+1
        level_gun_param_addr_HI   = load_gun_param+2
{
        PHA
        AND     #$1C
        STA     gun_param_L0084
        PLA
        AND     #$03
        TAY
        LDA     gun_param_table,Y
        STA     gun_param_L0086
        LDY     object_type
        CPY     #OBJECT_pod_stand
        BNE     L0E29

        LDA     level_obj_flags,X
        ORA     #$02
        STA     level_obj_flags,X
        LDA     pod_attached_flag_2
        BEQ     L0E29

        LDA     level_obj_flags,X
        AND     #$FD
        STA     level_obj_flags,X
		
	.L0E29
        CPY     #$06
        BNE     L0E4C

        LDA     planet_countdown_timer
        BMI     L0E4C

        BEQ     L0E4C

        LDA     countdown_timer_ticks
        AND     #$04
        BNE     L0E44

        LDA     level_obj_flags,X
        ORA     #$02
        STA     level_obj_flags,X
        JMP     L0E4C

	.L0E44
        LDA     level_obj_flags,X
        AND     #$FD
        STA     level_obj_flags,X
		
	.L0E4C
        LDA     obj_sprite_data_A_table_LO,Y
        STA     sprite_data_A_ptr_LO				; **MODIFIES CODE**
        LDA     obj_sprite_data_A_table_HI,Y
        STA     sprite_data_A_ptr_HI				; **MODIFIES CODE**
        LDA     obj_sprite_data_B_table_LO,Y
        STA     sprite_data_B_ptr_LO				; **MODIFIES CODE**
        LDA     obj_sprite_data_B_table_HI,Y
        STA     sprite_data_B_ptr_HI				; **MODIFIES CODE**
        LDA     #$00
        STA     update_objects_flag
        STA     obj_plot_sprite_at_ptr+1
        LDA     level_obj_flags,X
        ROR     A
        BCC     L0EAA

        JSR     object_visibility_test

        LDX     current_object
        LDA     obj_plot_sprite_at_ptr+1
        BEQ     L0E93

        CMP     level_obj_plot_at_ptr_HI,X
        BNE     L0E93

        LDA     obj_plot_sprite_at_ptr
        CMP     level_obj_plot_at_ptr_LO,X
        BNE     L0E93

        LDA     level_obj_flags,X
        AND     #$02
        BEQ     L0E93

        LDA     #$FF
        STA     update_objects_flag
        JMP     L0EBB

	.L0E93
        LDA     level_obj_plot_at_ptr_HI,X
        STA     plot_sprite_at_ptr+1
        LDA     level_obj_plot_at_ptr_LO,X
        STA     plot_sprite_at_ptr
        JSR     plot_static_sprite

        LDX     current_object
        LDA     level_obj_flags,X
        AND     #$FE
        STA     level_obj_flags,X
	.L0EAA
        LDA     level_obj_flags,X
        AND     #$02
        BNE     L0EB4

        JMP     next_object

	.L0EB4
        LDA     obj_plot_sprite_at_ptr+1
        BNE     L0EBB

        JSR     object_visibility_test

	.L0EBB
        LDA     object_type
        CMP     #OBJECT_pod_stand
        BEQ     bullet_test_object

        LDA     planet_countdown_timer
        BNE     bullet_test_object

        LDA     planet_explode_anim
        BNE     L0ECD

        LDA     #$0F
        STA     planet_explode_anim
	.L0ECD
        LDA     #$3C
        STA     pod_destroying_player_timer
        LDA     #$01
        STA     explosion_particle_type
        LDA     #$00
        STA     score_value
        JMP     destroy_object

	.bullet_test_object
        LDX     object_type
        LDA     obj_type_width,X
        STA     current_object_width
        LDA     obj_type_height,X
        STA     current_object_height
        LDA     obj_type_explosion_particle,X
        STA     explosion_particle_type
        LDA     obj_type_score_value,X
        STA     score_value
        LDX     #$03
		
	.bullet_test_loop
        LDA     particles_lifetime,X
        BEQ     L0F61

        LDA     particles_type,X
        BNE     L0F61

        SEC
        LDA     particles_xpos_INT,X
        SBC     current_obj_xpos_INT
        BCC     L0F61

        CMP     current_object_width
        BCS     L0F61

        SEC
        LDA     particles_ypos_INT,X
        SBC     current_obj_ypos_INT
        TAY
        LDA     particles_ypos_INT_HI,X
        SBC     current_obj_ypos_EXT
        BNE     L0F61

        CPY     current_object_height
        BCS     L0F61

        LDA     particles_lifetime,X
        AND     #PARTICLE_flag
        STA     particles_lifetime,X
		
        LDA     object_type
        CMP     #OBJECT_door_switch_right
        BEQ     handle_door_switch

        CMP     #OBJECT_door_switch_left
        BEQ     handle_door_switch

        JMP     handle_generator

	.handle_door_switch
        LDA     #$FF
        STA     door_switch_counter_A
        JSR     L0F64

	.handle_generator
        LDA     object_type
        CMP     #OBJECT_generator
        BNE     L0F7D

        JSR     L0F64

        JSR     rnd

        AND     #$1F
        ADC     generator_recharge_increase
        STA     generator_recharge_counter
        STA     generator_recharge_increase
        BCC     delete_object

        LDA     planet_countdown_timer
        BPL     delete_object

        LDA     #$FF
        STA     generator_recharge_counter
        LDA     #$0A
        STA     planet_countdown_timer
        LDA     #$01
        STA     countdown_timer_ticks
        JMP     delete_object

	.L0F61
        JMP     L0FAA

	.L0F64
        LDA     particles_xpos_INT,X
        STA     explosion_xpos_INT
        LDA     particles_ypos_INT_HI,X
        STA     explosion_ypos_INT_HI
        LDA     particles_ypos_INT,X
        STA     explosion_ypos_INT
        LDA     #$04						; random debris
        STA     explosion_particle_type
        JMP     create_explosion

	.delete_object
        JMP     remove_object_from_level_GUESS

	.L0F7D
        LDA     object_type
        CMP     #OBJECT_pod_stand
        BCS     L0FAA

	.destroy_object
        LDX     current_object
        LDA     level_obj_flags,X
        AND     #$FD
        STA     level_obj_flags,X
        LDA     current_obj_xpos_INT
        ADC     #$02
        STA     explosion_xpos_INT
        LDA     current_obj_ypos_INT
        ADC     #$04
        STA     explosion_ypos_INT
        LDA     current_obj_ypos_EXT
        ADC     #$00
        STA     explosion_ypos_INT_HI
        LDA     score_value
        JSR     accumulate_score_A

        JSR     create_explosion

        JMP     remove_object_from_level_GUESS

	.L0FAA
        DEX
        BMI     remove_object_from_level_GUESS

        JMP     bullet_test_loop

	.remove_object_from_level_GUESS
        LDA     pod_destroying_player_timer
        BMI     L0FB7

	.L0FB4
        JMP     L1005

	.L0FB7
        LDA     pod_attached_flag_1
        BNE     L0FB4

        LDA     object_type
        CMP     #OBJECT_fuel
        BNE     L0FB4

        CMP     #OBJECT_generator
        BEQ     L0FB4

        LDA     shield_tractor_pressed
        BEQ     L0FB4

        LDA     current_obj_xpos_INT
        SEC
        SBC     player_xpos_INT
        BEQ     L0FB4

        CMP     #$06
        BCS     L0FB4

        LDA     current_obj_ypos_INT
        SBC     player_ypos_INT
        TAX
        LDA     current_obj_ypos_EXT
        SBC     player_ypos_INT_HI
        BNE     L0FB4

        CPX     #$1C
        BCS     L0FB4

        LDA     #$01
        STA     collecting_fuel_flag
        LDX     current_object
        LDY     obj_tractor_counter,X
        INY
        TYA
        STA     obj_tractor_counter,X
        CMP     #$1A
        BCC     L1005

        LDA     level_obj_flags,X
        AND     #$FD
        STA     level_obj_flags,X
        LDA     #$30
        JSR     accumulate_score_A

        JSR     collect_pod_fuel_sound

	.L1005
        LDA     object_type
        CMP     #OBJECT_fuel
        BCS     L1067

        LDA     generator_recharge_counter
        BNE     L1067

        LDA     planet_countdown_timer
        BPL     L1067

        LDA     current_obj_visible_flag
        BEQ     L1067

        JSR     rnd

        CMP     hostile_gun_shoot_probability
        BCS     L1067

        JSR     hostile_gun_sound

        JSR     particle_return_free_slot_in_Y

        TYA
        TAX
        JSR     rnd

        AND     #$03
        STA     rnd_AND_3
        LDA     rnd_B
        AND     gun_param_L0086
        ADC     gun_param_L0084
        ADC     rnd_AND_3
        AND     #$1F
        TAY
        JSR     angle_to_bullet_dx_dy

        LDA     #PARTICLE_type_hostile_bullet
        STA     particles_type,X
        STA     particles_xpos_FRAC,X
        LDA     particles_lifetime,X
        AND     #PARTICLE_flag
        ORA     #PARTICLE_lifetime_bullet
        STA     particles_lifetime,X
        LDY     object_type
        LDA     current_obj_xpos_INT
        CLC
        ADC     gun_bullet_x_offset,Y
        STA     particles_xpos_INT,X
        LDA     current_obj_ypos_INT
        ADC     gun_bullet_y_offset,Y
        STA     particles_ypos_INT,X
        LDA     current_obj_ypos_EXT
        ADC     #$00
        STA     particles_ypos_INT_HI,X
		
	.L1067
        LDA     level_tick_counter
        AND     #$07
        BNE     L10B4

        LDA     object_type
        CMP     #OBJECT_generator
        BNE     L10B4

        LDA     generator_recharge_counter
        BNE     L10B4

        LDA     planet_countdown_timer
        BPL     L10B4

        JSR     particle_return_free_slot_in_Y

        LDA     current_obj_xpos_INT
        CLC
        ADC     #$04
        STA     particles_xpos_INT,Y
        LDA     #$00
        STA     particles_xpos_FRAC,Y
        STA     particles_dx_FRAC,Y
        STA     particles_dx_INT,Y
        LDA     current_obj_ypos_INT
        STA     particles_ypos_INT,Y
        LDA     current_obj_ypos_EXT
        STA     particles_ypos_INT_HI,Y
        LDA     #$8E
        STA     particles_dy_FRAC,Y
        LDA     #$FF
        STA     particles_dy_INT,Y
        LDA     #PARTICLE_type_debris
        STA     particles_type,Y
        LDA     particles_lifetime,Y
        AND     #PARTICLE_flag
        ORA     #PARTICLE_lifetime_generator
        STA     particles_lifetime,Y
	.L10B4
        LDA     update_objects_flag
        BNE     next_object

        LDA     obj_plot_sprite_at_ptr
        STA     plot_sprite_at_ptr
        LDA     obj_plot_sprite_at_ptr+1
        STA     plot_sprite_at_ptr+1
        BEQ     next_object

        LDX     current_object
        LDA     plot_sprite_at_ptr
        STA     level_obj_plot_at_ptr_LO,X
        LDA     plot_sprite_at_ptr+1
        STA     level_obj_plot_at_ptr_HI,X
        JSR     plot_static_sprite

	.next_object
        LDX     current_object
        INX
        JMP     update_objects_loop
}

\ ******************************************************************************
\ * Gun bullet data
\ ******************************************************************************

.gun_bullet_x_offset
        EQUB    $04,$04,$01,$01

.gun_bullet_y_offset
        EQUB    $00,$08,$00,$08

.gun_param_table						; not sure what this is used for?
        EQUB    $01,$03,$07,$0F

\ ******************************************************************************
\ * Function: object_visibility_test
\ * Description: <>
\ ******************************************************************************

.object_visibility_test
\\ {
        LDA     level_0_obj_pos_X,X				; **SELF-MODIFIED CODE**
		level_obj_pos_X_addr_LO 	= object_visibility_test+1
		level_obj_pos_X_addr_HI 	= object_visibility_test+2
        STA     current_obj_xpos_INT

	.L10E8
        LDA     level_0_obj_pos_Y,X				; **SELF-MODIFIED CODE**
        level_obj_pos_Y_addr_LO   = L10E8+1
        level_obj_pos_Y_addr_HI   = L10E8+2
        STA     current_obj_ypos_INT

	.L10ED
        LDA     level_0_obj_pos_Y_EXT,X			; **SELF-MODIFIED CODE**
        level_obj_pos_Y_EXT_addr_LO   = L10ED+1
        level_obj_pos_Y_EXT_addr_HI   = L10ED+2
        STA     current_obj_ypos_EXT

        LDA     #$00
        STA     current_obj_visible_flag
        SEC
        LDA     current_obj_ypos_INT
        SBC     window_ypos_INT
        STA     obj_vis_L0074
        LDA     current_obj_ypos_EXT
        SBC     window_ypos_EXT
        STA     obj_vis_L0075
        BNE     L1126

        LDA     #$01
        STA     current_obj_visible_flag
        SEC
        LDA     obj_vis_L0074
        SBC     #$38
        STA     obj_vis_L0074
        CMP     #$11
        BCC     L1126

        CMP     #$7E
        BCS     L1126

        LDY     object_type
        SEC
        LDA     current_obj_xpos_INT
        SBC     window_xpos_INT
        STA     obj_vis_L0073
        CMP     object_type_cull_size_table,Y
        BCC     calculate_object_plot_addr

	.L1126
        RTS
\\ }

\ ******************************************************************************
\ * Object cull sizes (I think)
\ ******************************************************************************

.object_type_cull_size_table
        EQUB    $44,$44,$44,$44,$45,$45,$44,$47,$47

\ ******************************************************************************
\ * Function: calculate_object_plot_addr
\ * Params: current_object
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.calculate_object_plot_addr
{
        LDA     current_object
        BNE     L1160

        LDA     obj_vis_L0074
        SEC
        SBC     window_scroll_y
        ROL     A
        SEC
        SBC     #$05
        STA     pod_window_ypos_INT
        SEC
        LDA     obj_vis_L0073
        SBC     #$02
        SEC
        SBC     window_scroll_x
        STA     pod_window_xpos_INT
        LDA     #$40
        STA     pod_window_xpos_FRAC
        LDA     #$00
        STA     nearest_obj_xpos_FRAC
        LDA     current_obj_xpos_INT
        SEC
        SBC     #$02
        STA     nearest_obj_xpos_INT
        LDA     current_obj_ypos_EXT
        STA     nearest_obj_ypos_INT_HI
        LDA     current_obj_ypos_INT
        STA     nearest_obj_ypos_INT

	.L1160
        CLC
        ROL     obj_vis_L0074
        LDY     #$00
        STY     obj_vis_L0076
        STY     obj_vis_L0079
        LDA     obj_vis_L0074
        AND     #$07
        STA     obj_vis_L0078
        LDA     obj_vis_L0074
        LSR     A
        LSR     A
        AND     #$FE
        STA     obj_vis_L0077
        LSR     A
        LSR     A
        ROR     obj_vis_L0076
        LSR     A
        ROR     obj_vis_L0076
        ADC     obj_vis_L0077
        ADC     #$38
        TAX
        LDA     obj_vis_L0073
        ASL     A
        ASL     A
        ROL     obj_vis_L0079
        ASL     A
        ROL     obj_vis_L0079
        AND     #$F8
        ADC     obj_vis_L0078
        ADC     obj_vis_L0076
        STA     obj_plot_sprite_at_ptr
        TXA
        ADC     obj_vis_L0079
        STA     obj_plot_sprite_at_ptr+1
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Sprite routines and data
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: plot_static_sprite
\ * Params: L0070, L0071 contain screen address to plot sprite at
\ * Returns: none
\ * Description: <>
\ ******************************************************************************
		
.plot_static_sprite
\\ {
        LDX     current_object
        LDA     level_obj_flags,X
        ORA     #$01
        STA     level_obj_flags,X
        LDA     plot_sprite_at_ptr
        AND     #$07
        EOR     #$07
        STA     plot_static_sprite_L0072
        INC     plot_static_sprite_L0072
        LDX     #$00
        JMP     L11DB

	.L11B3
        INC     plot_sprite_at_ptr
        TYA
        AND     #$7F
        TAY
        DEC     plot_static_sprite_L0072
        BNE     L11D3

        DEC     plot_sprite_at_ptr
        LDA     plot_sprite_at_ptr
        ADC     #$39
        STA     plot_sprite_at_ptr
        LDA     plot_sprite_at_ptr+1
        ADC     #$02
        STA     plot_sprite_at_ptr+1
        LDA     #$08
        STA     plot_static_sprite_L0072
        TYA
        AND     #$7F
        TAY
		
	.L11D3
        LDA     obj_sprite_data_B_gun_down_left,X					; **SELF-MODIFIED CODE**
        sprite_data_B_ptr_LO   = L11D3+1
        sprite_data_B_ptr_HI   = L11D3+2
        EOR     (plot_sprite_at_ptr),Y
        STA     (plot_sprite_at_ptr),Y
        INX
		
	.L11DB
        LDY     obj_sprite_data_A_gun_down_left,X					; **SELF-MODIFIED CODE**
        sprite_data_A_ptr_LO   = L11DB+1
        sprite_data_A_ptr_HI   = L11DB+2
        BPL     L11D3

        CPY     #$FF
        BNE     L11B3

        RTS
\\ }

\ ******************************************************************************
\ ******************************************************************************
\ * Sprite data for ship
\ ******************************************************************************
\ ******************************************************************************

.ship_sprite_0_data
        EQUB    $10,$8F,$11,$8F,$11,$8E,$12,$8E
        EQUB    $12,$8D,$13,$8D,$13,$8C,$14,$8C
        EQUB    $14,$8A,$0B,$15,$16,$89,$17,$8A
        EQUB    $16,$8B,$15,$8B,$0F,$10,$11,$15
        EQUB    $8C,$0E,$12,$14,$8D,$13,$FF
		
.ship_sprite_1_data
		EQUB	$12
        EQUB    $91,$13,$90,$13,$8F,$13,$8F,$13
        EQUB    $8E,$14,$8D,$14,$8D,$14,$8A,$0B
        EQUB    $0C,$14,$89,$14,$8A,$15,$16,$8A
        EQUB    $17,$8B,$16,$8B,$0E,$0F,$10,$15
        EQUB    $8C,$0D,$11,$14,$92,$13,$FF

.ship_sprite_2_data
		EQUB	$93
        EQUB    $14,$92,$14,$91,$14,$8F,$10,$14
        EQUB    $8E,$14,$8D,$14,$8A,$0B,$0C,$14
        EQUB    $89,$14,$89,$14,$8A,$14,$8A,$15
        EQUB    $8B,$16,$8B,$0D,$0E,$0F,$15,$8C
        EQUB    $10,$13,$14,$90,$12,$91,$FF
		
.ship_sprite_3_data
		EQUB	$80
        EQUB    $95,$16,$93,$14,$16,$91,$12,$16
        EQUB    $90,$16,$8B,$0C,$0E,$0F,$16,$8A
        EQUB    $0D,$15,$8A,$15,$8A,$15,$8A,$15
        EQUB    $8A,$14,$8B,$0C,$0D,$15,$8E,$16
        EQUB    $8F,$15,$16,$8F,$12,$13,$14,$90
        EQUB    $11,$FF

.ship_sprite_4_data
        EQUB    $80,$80,$95,$16,$17,$92,$13,$14
        EQUB    $17,$8C,$10,$11,$17,$8B,$0D,$0F
        EQUB    $16,$8B,$0E,$16,$8B,$16,$8A,$15
        EQUB    $8A,$15,$8A,$14,$8B,$0C,$13,$8D
        EQUB    $14,$8E,$15,$8E,$12,$13,$14,$8F
        EQUB    $10,$11,$FF

.ship_sprite_5_data
		EQUB	$80,$80,$80,$8C,$0D
        EQUB    $14,$15,$16,$17,$18,$8C,$0E,$10
        EQUB    $11,$12,$13,$18,$8B,$0F,$17,$8B
        EQUB    $17,$8B,$16,$8A,$16,$8A,$15,$8B
        EQUB    $0C,$14,$8D,$14,$8E,$13,$8E,$14
        EQUB    $8E,$14,$8F,$10,$11,$12,$13,$FF

.ship_sprite_6_data
        EQUB    $80,$80,$80,$8E,$8D,$0F,$8C,$10
        EQUB    $11,$12,$13,$14,$15,$16,$17,$18
        EQUB    $19,$8C,$19,$8B,$18,$8A,$17,$8B
        EQUB    $0C,$16,$8D,$16,$8D,$15,$8D,$14
        EQUB    $8C,$13,$8D,$0E,$13,$8F,$10,$13
        EQUB    $91,$12,$FF

.ship_sprite_7_data
		EQUB	$80,$80,$8F,$8E,$10
        EQUB    $8D,$10,$8C,$11,$12,$13,$14,$15
        EQUB    $8B,$16,$17,$18,$19,$8B,$1A,$8C
        EQUB    $19,$8D,$18,$8D,$16,$17,$8D,$15
        EQUB    $8C,$13,$14,$8C,$12,$8D,$0E,$12
        EQUB    $8F,$10,$12,$91,$FF

.ship_sprite_8_data
		EQUB	$80,$80,$90
        EQUB    $8F,$11,$8D,$0E,$11,$8C,$12,$13
        EQUB    $8B,$14,$15,$8C,$16,$17,$8D,$18
        EQUB    $19,$8D,$1A,$8D,$18,$19,$8C,$16
        EQUB    $17,$8B,$14,$15,$8C,$12,$13,$8D
        EQUB    $0E,$11,$8F,$11,$90,$FF

.ship_sprite_9_data
		EQUB	$80,$80
        EQUB    $91,$8F,$10,$12,$8D,$0E,$12,$8C
        EQUB    $12,$8C,$13,$14,$8D,$15,$8D,$16
        EQUB    $17,$8D,$18,$8C,$19,$8B,$1A,$8B
        EQUB    $16,$17,$18,$19,$8C,$11,$12,$13
        EQUB    $14,$15,$8D,$10,$8E,$10,$8F,$FF
		
.ship_sprite_10_data
        EQUB    $80,$80,$91,$12,$8F,$10,$13,$8D
        EQUB    $0E,$13,$8C,$13,$8D,$14,$8D,$15
        EQUB    $8D,$16,$8B,$0C,$16,$8A,$17,$8B
        EQUB    $18,$8C,$19,$8C,$10,$11,$12,$13
        EQUB    $14,$15,$16,$17,$18,$19,$8D,$0F
        EQUB    $8E,$FF

.ship_sprite_11_data
		EQUB	$80,$80,$80,$8F,$10,$11
        EQUB    $12,$13,$8E,$14,$8E,$14,$8E,$13
        EQUB    $8D,$14,$8B,$0C,$14,$8A,$15,$8A
        EQUB    $16,$8B,$16,$8B,$17,$8B,$0F,$17
        EQUB    $8C,$0E,$10,$11,$12,$13,$18,$8C
        EQUB    $0D,$14,$15,$16,$17,$18,$FF

.ship_sprite_12_data
		EQUB	$80
        EQUB    $80,$80,$8F,$10,$11,$8E,$12,$13
        EQUB    $14,$8E,$15,$8D,$14,$8B,$0C,$13
        EQUB    $8A,$14,$8A,$15,$8A,$15,$8B,$16
        EQUB    $8B,$0E,$16,$8B,$0D,$0F,$16,$8C
        EQUB    $10,$11,$17,$92,$13,$14,$17,$95
        EQUB    $16,$17,$FF

.ship_sprite_13_data
		EQUB	$80,$80,$80,$90,$11
        EQUB    $8F,$12,$13,$14,$8F,$15,$16,$8E
        EQUB    $16,$8B,$0C,$0D,$15,$8A,$14,$8A
        EQUB    $15,$8A,$15,$8A,$15,$8A,$0D,$15
        EQUB    $8B,$0C,$0E,$0F,$16,$90,$16,$91
        EQUB    $12,$16,$93,$14,$16,$95,$16,$FF

.ship_sprite_14_data
        EQUB    $80,$80,$80,$91,$90,$12,$8C,$10
        EQUB    $13,$14,$8B,$0D,$0E,$0F,$15,$8B
        EQUB    $16,$8A,$15,$8A,$14,$89,$14,$89
        EQUB    $14,$8A,$0B,$0C,$14,$8D,$14,$8E
        EQUB    $14,$8F,$10,$14,$91,$14,$92,$14
        EQUB    $93,$14,$FF

.ship_sprite_15_data
		EQUB	$80,$80,$80,$80,$92
        EQUB    $13,$8C,$0D,$11,$14,$8B,$0E,$0F
        EQUB    $10,$15,$8B,$16,$8A,$17,$8A,$15
        EQUB    $16,$89,$14,$8A,$0B,$0C,$14,$8D
        EQUB    $14,$8D,$14,$8E,$14,$8F,$13,$8F
        EQUB    $13,$90,$13,$91,$13,$92,$FF

.ship_sprite_16_data
		EQUB	$80
        EQUB    $80,$80,$80,$8D,$13,$8C,$0E,$12
        EQUB    $14,$8B,$0F,$10,$11,$15,$8B,$15
        EQUB    $8A,$16,$89,$17,$8A,$0B,$15,$16
        EQUB    $8C,$14,$8C,$14,$8D,$13,$8D,$13
        EQUB    $8E,$12,$8E,$12,$8F,$11,$8F,$11
        EQUB    $90,$FF

.pod_sprite_data		; not included in table		$14B9
		EQUB	$80,$80,$80,$80,$8F,$10
        EQUB    $11,$8D,$0E,$12,$13,$8C,$14,$8C
        EQUB    $14,$8B,$15,$8B,$15,$8B,$15,$8C
        EQUB    $14,$8C,$14,$8D,$0E,$12,$13,$8F
        EQUB    $10,$11,$FF
		
.sheild_sprite_data		; sprite data for circular shield
		EQUB	$80,$8E,$0F,$10,$11
        EQUB    $12,$8C,$0D,$13,$14,$8B,$15,$8A
        EQUB    $16,$89,$17,$89,$17,$88,$18,$88
        EQUB    $18,$88,$18,$88,$18,$88,$18,$89
        EQUB    $17,$89,$17,$8A,$16,$8B,$15,$8C
        EQUB    $0D,$13,$14,$8E,$0F,$10,$11,$12
        EQUB    $FF

\ ******************************************************************************
\ ******************************************************************************
\ * Font data
\ ******************************************************************************
\ ******************************************************************************

.font_byte_mask
        EQUB    $00

.font_data_line_0
        EQUB    $00,$1E,$FC,$FE,$FE,$FE,$FE,$F8
        EQUB    $C6,$7E,$7E,$CC,$C0,$FE,$F6,$FE
        EQUB    $FE,$FE,$FE,$FE,$FE,$C6,$C6,$C6
        EQUB    $C6,$C6,$FE,$FE,$78,$7E,$78,$C0
        EQUB    $F8,$F0,$FE,$7C,$FE

.font_data_line_1
        EQUB    $00,$36,$CC,$C6,$C6,$C0,$C0,$C0
        EQUB    $C6,$18,$18,$D8,$C0,$D6,$D6,$C6
        EQUB    $C6,$C6,$C6,$C0,$30,$C6,$C6,$C6
        EQUB    $6C,$C6,$06,$C6,$18,$06,$18,$CE
        EQUB    $C0,$C0,$06,$6C,$C6

.font_data_line_2
        EQUB    $00,$66,$FE,$C0,$C6,$F8,$F8,$DE
        EQUB    $FE,$18,$18,$FE,$C0,$D6,$D6,$C6
        EQUB    $C6,$C6,$FE,$FE,$30,$C6,$CC,$D6
        EQUB    $38,$FE,$FE,$C6,$18,$FE,$7E,$FE
        EQUB    $FE,$FE,$7E,$FE,$FE

.font_data_line_3
        EQUB    $30,$FE,$C6,$C0,$CC,$C0,$C0,$C6
        EQUB    $C6,$18,$D8,$C6,$C0,$D6,$D6,$C6
        EQUB    $FE,$CC,$CC,$06,$30,$C6,$D8,$D6
        EQUB    $6C,$06,$C0,$DE,$7E,$E0,$1E,$0E
        EQUB    $0E,$CE,$70,$EE,$1E

.font_data_line_4
        EQUB    $30,$C6,$FE,$FE,$F8,$FE,$C0,$FE
        EQUB    $C6,$7E,$F8,$C6,$FE,$C6,$DE,$FE
        EQUB    $C0,$FE,$C6,$FE,$30,$FE,$F0,$FE
        EQUB    $C6,$7E,$FE,$FE,$7E,$FE,$FE,$0E
        EQUB    $FE,$FE,$70,$FE,$1E

\ ******************************************************************************
\ ******************************************************************************
\ * Character plot routines
\ ******************************************************************************
\ ******************************************************************************
		
\ ******************************************************************************
\ * Function: char_write_ptr_next_column
\ * Description: <>
\ ******************************************************************************

.char_write_ptr_next_column
{
        CLC
        LDA     char_write_ptr_LO
        ADC     #$08
        STA     char_write_ptr_LO
        BCC     return

        INC     char_write_ptr_HI
	.return
        RTS
}

\ ******************************************************************************
\ * Function: char_clear_cursor_backspace
\ * Description: <>
\ ******************************************************************************

.char_clear_cursor_backspace
{
        LDA     #$00
        LDY     #$04
        STA     (char_write_ptr_LO),Y
        LDY     #$0C
        STA     (char_write_ptr_LO),Y
        SEC
        LDA     char_write_ptr_LO
        SBC     #$10
        STA     char_write_ptr_LO
        BCS     return

        DEC     char_write_ptr_HI
	.return
        RTS
}

\ ******************************************************************************
\ * Function: char_plot_cursor
\ * Description: <>
\ ******************************************************************************

.char_plot_cursor
{
        LDA     char_flag_cursor
        BEQ     skip_cursor

        LDA     #$0F
        LDY     #$04
        STA     (char_write_ptr_LO),Y
        LDY     #$0C
        STA     (char_write_ptr_LO),Y

	.skip_cursor
        PLA
        TAY
        PLA
        TAX
        PLA
        CLC
        RTS
}

\ ******************************************************************************
\ * Function: plot_char_A
\ * Params: A = ASCII character to plot
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_char_A
{
        STA     char_to_plot
        PHA
        TXA
        PHA
        TYA
        PHA
        LDA     char_to_plot
        CMP     #ASCII_beep
        BEQ     plot_char_beep

        CMP     #ASCII_space
        BCC     char_plot_cursor

        BEQ     plot_char_space

        CMP     #ASCII_delete
        BEQ     plot_char_delete

        CMP     #ASCII_0
        BCC     not_a_number

        CMP     #ASCII_9+1
        BCC     plot_ascii_number

	.not_a_number
        ORA     #$20
        CMP     #ASCII_a
        BCC     not_a_letter

        CMP     #ASCII_z+1
        BCC     plot_ascii_lower_case_letter

	.not_a_letter
        LDA     #$00
        JMP     plot_font_A

	.plot_char_space
        JSR     char_erase
        JMP     char_plot_cursor

	.plot_char_beep
        JSR     jmp_wrchv
        JMP     char_plot_cursor
}

\ ******************************************************************************
\ * Function: char_erase
\ * Description: <>
\ ******************************************************************************

.char_erase
{
        LDX     #$02

	.col_loop
        LDY     #$04
        LDA     #$00

	.row_loop
        STA     (char_write_ptr_LO),Y
        DEY
        BPL     row_loop

        JSR     char_write_ptr_next_column

        DEX
        BNE     col_loop
        RTS
}

\ ******************************************************************************
\ * Function: plot_char_delete
\ * Description: <>
\ ******************************************************************************

.plot_char_delete
{
        JSR     char_clear_cursor_backspace
        JSR     char_erase
        JSR     char_clear_cursor_backspace
        JMP     char_plot_cursor
}

\ ******************************************************************************
\ * Function: plot_ascii_lower_case_letter
\ * Params: A = ASCII character to plot (A-Z)
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_ascii_lower_case_letter
{
        SEC
        SBC     #$60
        JMP     plot_font_A
}

\ ******************************************************************************
\ * Function: plot_ascii_number
\ * Params: A = ASCII character to plot (0-9)
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_ascii_number
{
        SEC
        SBC     #$15
        JMP     plot_font_A
}

\ ******************************************************************************
\ * Function: plot_font_A
\ * Params: A = font character to plot
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_font_A
{
        TAX
        LDY     #$00
        LDA     font_data_line_0,X
        JSR     plot_font_top_nibble

        LDA     font_data_line_1,X
        JSR     plot_font_top_nibble

        LDA     font_data_line_2,X
        JSR     plot_font_top_nibble

        LDA     font_data_line_3,X
        JSR     plot_font_top_nibble

        LDA     font_data_line_4,X
        JSR     plot_font_top_nibble

        JSR     char_write_ptr_next_column

        LDY     #$00
        LDA     font_data_line_0,X
        JSR     plot_font_bottom_nibble

        LDA     font_data_line_1,X
        JSR     plot_font_bottom_nibble

        LDA     font_data_line_2,X
        JSR     plot_font_bottom_nibble

        LDA     font_data_line_3,X
        JSR     plot_font_bottom_nibble

        LDA     font_data_line_4,X
        JSR     plot_font_bottom_nibble

        JSR     char_write_ptr_next_column
        JMP     char_plot_cursor
}

\ ******************************************************************************
\ * Character variables
\ ******************************************************************************

.char_to_plot
        EQUB    $00

.char_flag_cursor
        EQUB    $00

\ ******************************************************************************
\ * Functions: plot_font_top_nibble, plot_font_bottom_nibble
\ * Params: A = font character to plot
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_font_top_nibble
\\ {
        PHA
        AND     #$F0
        STA     char_to_plot
        PLA
        ROR     A
        ROR     A
        ROR     A
        ROR     A
        AND     #$0F
        ORA     char_to_plot

.plot_font_byte
        AND     font_byte_mask
        STA     (char_write_ptr_LO),Y
        INY
        RTS
\\ }

.plot_font_bottom_nibble
{
        PHA
        AND     #$0F
        STA     char_to_plot
        PLA
        ROL     A
        ROL     A
        ROL     A
        ROL     A
        AND     #$F0
        ORA     char_to_plot
        JMP     plot_font_byte
}

\ ******************************************************************************
\ ******************************************************************************
\ * Game routines
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: attach_pod_calculate_UNKNOWN
\ * Params: A = <unknown input>
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.attach_pod_calculate_UNKNOWN
{
        STA     attach_pod_L008B
        LDA     #$00
        STA     attach_pod_L0089
        STA     attach_pod_L008A
        STA     attach_pod_L008C
        LDA     attach_pod_L0088
        BPL     L16F2

        EOR     #$FF
        STA     attach_pod_L0088
        INC     attach_pod_L0088
        LDA     attach_pod_L008B
        EOR     #$FF
        STA     attach_pod_L008B
        INC     attach_pod_L008B

	.L16F2
        LDA     attach_pod_L008B
        BPL     L16FA

        LDA     #$FF
        STA     attach_pod_L008C

	.L16FA
        LDX     #$08

	.L16FC
        ROR     attach_pod_L0088
        BCC     L170D

        LDA     attach_pod_L008B
        CLC
        ADC     attach_pod_L0089
        STA     attach_pod_L0089
        LDA     attach_pod_L008C
        ADC     attach_pod_L008A
        STA     attach_pod_L008A

	.L170D
        CLC
        ROL     attach_pod_L008B
        ROL     attach_pod_L008C
        DEX
        BNE     L16FC

        RTS
}

\ ******************************************************************************
\ * Function: update_window_and_terrain_tables
\ * Description: <>
\ ******************************************************************************

.update_window_and_terrain_tables
{
        CLC
        LDA     window_scroll_x
        ADC     window_xpos_INT
        STA     window_xpos_INT
        CLC
        LDA     window_scroll_y
        BMI     L173B

        BEQ     L174F

        ADC     window_ypos_INT
        STA     window_ypos_INT
        BCC     L172C

        INC     window_ypos_EXT
		
	.L172C
        LDA     window_scroll_y
		
	.L172E
        PHA
        JSR     terrain_process_accumulate_xpos			; increments terrain_window_y_index

        PLA
        SEC
        SBC     #$01
        BNE     L172E

        JMP     L174F

	.L173B
        ADC     window_ypos_INT
        STA     window_ypos_INT
        BCS     L1743

        DEC     window_ypos_EXT
		
	.L1743
        LDA     window_scroll_y
		
	.L1745
        PHA
        JSR     terrain_process_subtract_xpos			; decrements terrain_window_y_index

        PLA
        CLC
        ADC     #$01
        BNE     L1745

	.L174F
        JSR     tick_door_logic

        SEC
        LDA     midpoint_ypos_INT
        SBC     window_ypos_INT
        SEC
        SBC     #$38
        STA     midpoint_window_ypos_INT
        SEC
        LDA     force_vectory_INT
        BMI     L1785

        LDA     midpoint_window_ypos_INT
        CMP     #$5D
        BCS     L177D

        LDA     window_scroll_y
        BMI     L177A

        BEQ     L177A

        LDX     force_vectory_INT
        INX
        CPX     window_scroll_y
        BCS     L177A

        DEC     window_scroll_y
        BNE     L177A

        INC     window_scroll_y
		
	.L177A
        JMP     L17A3

	.L177D
        LDX     force_vectory_INT
        INX
        STX     window_scroll_y
        JMP     L17A3

	.L1785
        LDA     midpoint_window_ypos_INT
        CMP     #$2F
        BCC     L179E

        LDA     window_scroll_y
        BPL     L179B

        LDA     window_scroll_y
        CMP     force_vectory_INT
        BCS     L179B

        INC     window_scroll_y
        BNE     L179B

        DEC     window_scroll_y
		
	.L179B
        JMP     L17A3

	.L179E
        LDX     force_vectory_INT
        DEX
        STX     window_scroll_y
		
	.L17A3
        LDA     window_scroll_y
        BEQ     L17C0

        BMI     L17B6

        LDA     midpoint_window_ypos_INT
        CMP     #$3C
        BCS     L17C0

        LDA     #$00
        STA     window_scroll_y
        JMP     L17C0

	.L17B6
        LDA     midpoint_window_ypos_INT
        CMP     #$50
        BCC     L17C0

        LDA     #$00
        STA     window_scroll_y
		
	.L17C0
        SEC
        LDA     midpoint_xpos_INT
        SBC     window_xpos_INT
        STA     midpoint_window_xpos_INT
        SEC
        SBC     #$10
        BCS     L17D1

        STA     window_scroll_x
        JMP     L17DC

	.L17D1
        LDA     midpoint_window_xpos_INT
        SEC
        SBC     #$30
        BEQ     L17DC

        BCC     L17DC

        STA     window_scroll_x
		
	.L17DC
        LDA     window_scroll_x
        BEQ     L1813

        BMI     L17FC

        LDA     midpoint_window_xpos_INT
        CMP     #$1D
        BCS     L17EF

        LDA     #$00
        STA     window_scroll_x
        JMP     L1813

	.L17EF
        CMP     #$30
        BCS     L1813

        DEC     window_scroll_x
        BNE     L1813

        INC     window_scroll_x
        JMP     L1813

	.L17FC
        LDA     midpoint_window_xpos_INT
        CMP     #$23
        BCC     L1809

        LDA     #$00
        STA     window_scroll_x
        JMP     L1813

	.L1809
        CMP     #$10
        BCC     L1813

        INC     window_scroll_x
        BNE     L1813

        DEC     window_scroll_x
	.L1813
        LDA     window_xpos_INT
        BEQ     L181B

        CMP     #$DC
        BCC     L181F

	.L181B
        LDA     #$B7
        BNE     L1825

	.L181F
        CMP     #$B8
        BCC     L187E

        LDA     #$49
		
	.L1825
        STA     window_deltax_INT
        LDA     window_xpos_INT
        CLC
        ADC     window_deltax_INT
        STA     window_xpos_INT
        LDA     midpoint_xpos_INT
        CLC
        ADC     window_deltax_INT
        STA     midpoint_xpos_INT
        LDA     player_xpos_INT
        CLC
        ADC     window_deltax_INT
        STA     player_xpos_INT
        LDA     old_player_xpos_INT
        CLC
        ADC     window_deltax_INT
        STA     old_player_xpos_INT
        LDX     #$1F
		
	.L1845
        LDA     particles_xpos_INT,X
        CLC
        ADC     window_deltax_INT
        STA     particles_xpos_INT,X
        DEX
        BPL     L1845

        LDX     #$11
	.L1853
        LDA     terrain_draw_table_3,X
        BNE     L1868

        LDA     terrain_draw_table_1,X
        BNE     L187B

        LDA     #$48
        STA     terrain_draw_table_1,X
        STA     terrain_draw_table_3,X
        JMP     L187B

	.L1868
        CMP     #$48
        BNE     L187B

        LDA     terrain_draw_table_1,X
        CMP     #$48
        BNE     L187B

        LDA     #$00
        STA     terrain_draw_table_3,X
        STA     terrain_draw_table_1,X
		
	.L187B
        INX
        BPL     L1853

	.L187E
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Level logic for doors
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: tick_door_logic
\ * Description: <>
\ ******************************************************************************

.tick_door_logic
{
        LDA     door_switch_counter_A
        BEQ     door_switch_zero

        DEC     door_switch_counter_A

	.door_switch_zero
        LDA     level_number
        CMP     #$03
        BEQ     level_3_door_logic

        CMP     #$05
        BEQ     level_5_door_logic

        CMP     #$04
        BEQ     level_4_door_logic

        RTS
}

.level_5_door_logic
{
        JMP     do_level_5_door_logic
}

.level_4_door_logic
{
        JMP     do_level_4_door_logic
}

\ ******************************************************************************
\ * Function: level_3_door_logic
\ * Description: <>
\ ******************************************************************************

.level_3_door_logic
{
        SEC
        LDA     #$69
        SBC     window_ypos_INT
        STA     door_logic_L0081
        LDA     #$02
        SBC     window_ypos_EXT
        BNE     return

        LDA     door_logic_L0081
        CMP     #$F1
        BCC     L18AF

	.return
        RTS

	.L18AF
        LDA     door_switch_counter_A
        CMP     #$10
        BCS     L18BA

        STA     door_switch_counter_B
        JMP     L18C2

	.L18BA
        LDA     door_switch_counter_B
        CMP     #$10
        BCS     L18C2

        INC     door_switch_counter_B
		
	.L18C2
        SEC
        LDA     #$AE
        SBC     door_switch_counter_B
        PHA
        LDA     door_logic_L0081
        CLC
        ADC     terrain_window_y_index
        TAY
        PLA
        LDX     #$0D
		
	.L18D2
        STA     terrain_left_wall,Y
        INY
        DEX
        BNE     L18D2

        RTS
}

\ ******************************************************************************
\ * Function: do_level_4_door_logic
\ * Description: <>
\ ******************************************************************************

.do_level_4_door_logic
{
        SEC
        LDA     #$43
        SBC     window_ypos_INT
        STA     door_logic_L0081
        LDA     #$03
        SBC     window_ypos_EXT
        BNE     return

        LDA     door_logic_L0081
        CMP     #$E9
        BCC     L18EE

	.return
        RTS
	
	.L18EE
        LDA     door_switch_counter_A
        CMP     #$15
        BCS     L18F9

        STA     door_switch_counter_B
        JMP     L1901

	.L18F9
        LDA     door_switch_counter_B
        CMP     #$15
        BCS     L1901

        INC     door_switch_counter_B
		
	.L1901
        LDA     door_logic_L0081
        CLC
        ADC     terrain_window_y_index
        CLC
        ADC     #$15
        TAX
        LDA     #$A6
        LDY     #$15
		
	.L190F
        CPY     door_switch_counter_B
        BNE     L1915

        LDA     #$98
		
	.L1915
        STA     terrain_left_wall,X
        DEX
        DEY
        BNE     L190F

        RTS
}

\ ******************************************************************************
\ * Function: do_level_5_door_logic
\ * Description: <>
\ ******************************************************************************

.do_level_5_door_logic
{
        SEC
        LDA     #$70
        SBC     window_ypos_INT
        STA     door_logic_L0081
        LDA     #$03
        SBC     window_ypos_EXT
        BNE     return

        LDA     door_logic_L0081
        CMP     #$EF
        BCC     L1931

	.return
        RTS

	.L1931
        LDA     door_switch_counter_A
        CMP     #$12
        BCS     L193C

        STA     door_switch_counter_B
        JMP     L1944

	.L193C
        LDA     door_switch_counter_B
        CMP     #$12
        BCS     L1944

        INC     door_switch_counter_B
		
	.L1944
        SEC
        LDA     #$C0
        SBC     door_switch_counter_B
        PHA
        LDA     door_logic_L0081
        CLC
        ADC     terrain_window_y_index
        TAY
        PLA
        CLC
        LDX     #$07
		
	.L1955
        STA     terrain_left_wall,Y
        ADC     #$01
        INY
        DEX
        BNE     L1955

        SEC
        LDX     #$08
		
	.L1961
        STA     terrain_left_wall,Y
        SBC     #$01
        INY
        DEX
        BNE     L1961

        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Player lives, score & fuel logic
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: lose_a_life
\ * Description: <>
\ ******************************************************************************

.lose_a_life
{
        LDA     lives
        SEC
        SED
        SBC     #$01
        STA     lives
        CLD
        BPL     write_num_lives

        LDX     #$FF
        RTS
}

\ ******************************************************************************
\ * Function: extra_life
\ * Description: <>
\ ******************************************************************************

.extra_life
{
        LDA     lives
        CLC
        SED
        ADC     #$01
        STA     lives
        CLD
}

\ ******************************************************************************
\ * Function: write_num_lives
\ * Description: <>
\ ******************************************************************************

.write_num_lives
{
        PHA
        LDX     #$C1
        LDY     #$3F
        JSR     plot_char_set_scr_addr_XY

        PLA
        BEQ     zero_lives

        DEY
        LDX     #$00
        LDY     #$00
        JMP     plot_score_ext
}

\ ******************************************************************************
\ * Function: zero_lives
\ * Description: <>
\ ******************************************************************************

.zero_lives
{
        LDA     #ASCII_space
        JSR     plot_char_A

        LDA     #$30					; ASCII '0'
        JMP     plot_char_A
}
	
.add_score_return
{
        RTS
}

\ ******************************************************************************
\ * Function: add_A_to_score
\ * Params: A = value to add to player score
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.add_A_to_score
{
        LDX     demo_mode_flag
        BNE     add_score_return

        PHA
        LDA     score_B
        AND     #$F0
        STA     add_score_thousands					; number of thousands
        PLA
        SED
        CLC
        ADC     score_A
        STA     score_A
        LDA     #$00
        ADC     score_B
        STA     score_B
        LDA     #$00
        ADC     score_C
        STA     score_C
        CLD
        LDA     score_B
        AND     #$F0
        CMP     add_score_thousands
        BEQ     write_score

        JSR     extra_life
        JSR     countdown_sound

	.write_score
        LDA     #LO(score_A)
        STA     plot_string_ptr
        LDA     #HI(score_A)
        STA     plot_string_ptr+1
        LDA     #$0F
        LDX     #$61
        LDY     #$40
        JMP     plot_three_byte_BCD_number
}

\ ******************************************************************************
\ * Function: plot_three_byte_BCD_number
\ * Params: screen address in X,Y address of BCD number in L0080, A is pixel mask
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_three_byte_BCD_number			; 
\\ {
        STA     font_byte_mask
        JSR     plot_char_set_scr_addr_XY

.plot_three_byte_BCD_number_ext
        LDX     #$00
        LDY     #$02
		
	.plot_BCD_loop
        LDA     (plot_string_ptr),Y

.plot_score_ext
        PHA
        ROR     A
        ROR     A
        ROR     A
        ROR     A
        AND     #$0F
        JSR     plot_number_zero_space

        PLA
        AND     #$0F
        JSR     plot_number_zero_space

        DEY
        BPL     plot_BCD_loop

        RTS
\\ }

\ ******************************************************************************
\ * Function: plot_char_set_scr_addr_XY
\ * Params: screen address in X,Y
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_char_set_scr_addr_XY
{
        STX     char_write_ptr_LO
        STY     char_write_ptr_HI
        RTS
}

\ ******************************************************************************
\ * Function: plot_number_zero_space
\ * Params: A = number to plot (0-9)
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.plot_number_zero_space
{
        BNE     plot_a_number

        CPX     #$00
        BNE     plot_a_number

        LDA     #ASCII_space
        JMP     plot_char_A

	.plot_a_number
        CLC
        ADC     #ASCII_0
        TAX
        JMP     plot_char_A
}
		
\ ******************************************************************************
\ * Function: add_fuel
\ * Description: <>
\ ******************************************************************************

.add_fuel
{
        LDA     demo_mode_flag
        BNE     fuel_return

        LDA     #$11
        LDX     #$00
        JMP     add_A_X_to_fuel
}

\ ******************************************************************************
\ * Function: use_fuel
\ * Description: <>
\ ******************************************************************************

.use_fuel
{
        LDA     demo_mode_flag
        BNE     fuel_return

        LDA     #$00
        STA     fuel_just_ran_out_flag
        LDA     fuel_A
        ORA     fuel_B
        ORA     fuel_C
        BNE     subtract_from_fuel
}
\\ Fall through!

\ ******************************************************************************
\ * Function: fuel_is_empty
\ * Description: <>
\ ******************************************************************************

.fuel_is_empty
{
        LDX     #$21
        LDY     #$3F
        JSR     plot_char_set_scr_addr_XY

        LDA     #ASCII_0
        JSR     plot_char_A

        LDA     #$FF
        STA     fuel_empty_flag
        STA     fuel_just_ran_out_flag
        RTS
}

\ ******************************************************************************
\ * Function: subtract_from_fuel
\ * Description: <>
\ ******************************************************************************

.subtract_from_fuel
{
        LDA     #$99
        LDX     #$99
}
\\ Fall through!
		
\ ******************************************************************************
\ * Function: add_A_X_to_fuel
\ * Params: add A to fuel_A, add X to fuel_B & fuel_C
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.add_A_X_to_fuel						; 
{
        SED
        CLC
        ADC     fuel_A
        STA     fuel_A
        TXA
        ADC     fuel_B
        STA     fuel_B
        TXA
        ADC     fuel_C
        STA     fuel_C
        CLD
        ORA     fuel_B
        ORA     fuel_A
        BEQ     fuel_is_empty

        LDA     #$00
        STA     fuel_value_updated_flag
}
\\ Fall through!

.fuel_return
{
        RTS
}

\ ******************************************************************************
\ * Function: plot_fuel_value
\ * Description: <>
\ ******************************************************************************

.plot_fuel_value
{
        LDA     fuel_value_updated_flag
        BNE     fuel_return

        LDA     fuel_empty_flag
        BMI     fuel_return

        LDA     #LO(fuel_A)
        STA     plot_string_ptr
        LDA     #HI(fuel_A)
        STA     plot_string_ptr+1
        LDA     #$0F
        STA     fuel_value_updated_flag
        LDX     #$D1
        LDY     #$3E
        JMP     plot_three_byte_BCD_number
}

\ ******************************************************************************
\ * Function: plot_high_score_table
\ * Description: <>
\ ******************************************************************************

.plot_high_score_table
{
        LDX     #$B0
        LDY     #$4C
        JSR     plot_char_set_scr_addr_XY

        LDY     #$01
        STY     high_score_ptr_A+1
        DEY
        STY     high_score_ptr_A			; high_score_table at $100
        LDA     #$31
        STA     plot_high_score_number
		
	.L1AA9
        LDA     plot_high_score_number
        JSR     plot_char_A

        LDA     #$2E
        JSR     plot_char_A

        INC     plot_high_score_number
        JSR     plot_three_byte_BCD_number_ext

        LDA     #$30
        JSR     plot_char_A

        LDY     #$03
		
	.L1ABF
        LDA     (high_score_ptr_A),Y
        JSR     plot_char_A

        INY
        CPY     #$10
        BNE     L1ABF

	.L1AC9
        LDA     #$20
        JSR     plot_char_A

        INY
        CPY     #$1E
        BNE     L1AC9

        LDY     #$00
        LDA     high_score_ptr_A
        CLC
        ADC     #$10
        STA     high_score_ptr_A
        BPL     L1AA9

        RTS
}

\ ******************************************************************************
\ * Player variables - fuel & lives
\ ******************************************************************************

\\ Fuel stored in BCD - ones, hundreds, ten-thousands

.fuel_A
        EQUB    $00
.fuel_B
        EQUB    $00
.fuel_C
        EQUB    $00
.fuel_empty_flag
        EQUB    $00
.lives
        EQUB    $00

\ ******************************************************************************
\ ******************************************************************************
\ * String functions
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Functions: write_game_over, write_top_8_thrusters, write_congratulations,
\ * write_enter_name, write_press_spacebar, write_out_of_fuel
\ * Description: <>
\ ******************************************************************************

.write_game_over
        LDX		#LO(string_game_over): EQUB $2C				; BIT - has the effect of skipping next two bytes
.write_top_8_thrusters
        LDX		#LO(string_top_8_thrusters): EQUB $2C		; BIT - has the effect of skipping next two bytes
.write_congratulations
		LDX		#LO(string_congratulations): EQUB $2C		; BIT - has the effect of skipping next two bytes
.write_enter_name
		LDX		#LO(string_enter_name): EQUB $2C			; BIT - has the effect of skipping next two bytes
.write_press_spacebar
		LDX		#LO(string_press_spacebar): EQUB $2C		; BIT - has the effect of skipping next two bytes
.write_out_of_fuel
        LDX     #LO(string_out_of_fuel)

\\ They all fall through!
{
        LDA     #HI(in_game_messages)
        STA     plot_string_ptr+1
}
\\ Fall through!

\ ******************************************************************************
\ * Function: write_message, write_message_ext
\ * Params: X = LO byte of ptr to string, Y = HI byte of ptr to string
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.write_message
{
        STX     plot_string_ptr
        LDY     #$00
        LDA     (plot_string_ptr),Y
        TAX
        INY
        LDA     (plot_string_ptr),Y
        TAY
        JSR     plot_char_set_scr_addr_XY
}
\\ Fall though!

.write_message_ext
{
        LDY     #$02
        LDA     (plot_string_ptr),Y
        STA     font_byte_mask
		
	.loop
        INY
        LDA     (plot_string_ptr),Y
        BMI     return

        JSR     plot_char_A
        JMP     loop

	.return
        LDA     #$0F
        STA     font_byte_mask
        RTS
}

\ ******************************************************************************
\ * Functions: write_in, write_complete, write_failed
\ * Description: <>
\ ******************************************************************************

.write_in
        LDX     #LO(string_in): EQUB $2C					; BIT - has the effect of skipping next two bytes
.write_complete
        LDX     #LO(string_complete): EQUB $2C				; BIT - has the effect of skipping next two bytes
.write_failed
		LDX		#LO(string_failed)
\\ They all fall through!
{
        STX     plot_string_ptr
        LDA     #HI(end_of_level_messages)
        STA     plot_string_ptr+1
        JMP     write_message_ext
}

\ ******************************************************************************
\ * Functions: write_mission, write_bonus, write_no_bonus,
\ * write_planet_destroyed, write_reverse_gravity, write_invisible_landscape
\ * Description: <>
\ ******************************************************************************

.write_mission
        LDX     #LO(string_mission): EQUB $2C				; BIT - has the effect of skipping next two bytes
.write_bonus
		LDX		#LO(string_bonus): EQUB $2C					; BIT - has the effect of skipping next two bytes
.write_no_bonus
		LDX		#LO(string_no_bonus): EQUB $2C				; BIT - has the effect of skipping next two bytes
.write_planet_destroyed
		LDX		#LO(string_planet_destroyed): EQUB $2C		; BIT - has the effect of skipping next two bytes
.write_reverse_gravity
		LDX		#LO(string_reverse_gravity): EQUB $2C		; BIT - has the effect of skipping next two bytes
.write_invisible_landscape
		LDX		#LO(string_invisible_landscape)
\\ They all fall through!
{
        LDA     #HI(end_of_level_messages)
        STA     plot_string_ptr+1
        JMP     write_message
}

\ ******************************************************************************
\ ******************************************************************************
\ * Main player functions
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: ship_input_thrust_calculate_force
\ * Description: <>
\ ******************************************************************************

.ship_input_thrust_calculate_force
{
        LDA     pod_destroying_player_timer
        BMI     L1B5F

        LDA     pod_attached_flag_1
        BNE     L1B5F

        LDA     player_ship_destroyed_flag
        BNE     L1B5F

        LDA     #$00
        STA     force_vectory_INT
        STA     force_vectory_FRAC
        STA     force_vectorx_INT
        STA     force_vectorx_FRAC
        RTS

	.L1B5F
        LDA     level_tick_counter
        AND     #$0F
        BEQ     add_gravity_to_force_vector

        CMP     #$03
        BEQ     add_gravity_to_force_vector

        CMP     #$05
        BEQ     add_gravity_to_force_vector

        CMP     #$08
        BEQ     add_gravity_to_force_vector

        CMP     #$0B
        BEQ     add_gravity_to_force_vector

        CMP     #$0D
        BEQ     add_gravity_to_force_vector

        RTS

	.add_gravity_to_force_vector
        CLC
        LDA     force_vectory_FRAC
        ADC     gravity_FRAC
        STA     force_vectory_FRAC
        LDA     force_vectory_INT
        ADC     gravity_INT
        STA     force_vectory_INT

        LDA     pod_destroying_player_timer
        BPL     no_thrust

        LDA     fuel_just_ran_out_flag
        BNE     no_thrust

        LDX     #INKEY_shift
        JSR     test_inkey

        BEQ     thrust_was_pressed

	.no_thrust
        JMP     end_of_thrust_force_calculation

	.thrust_was_pressed
        JSR     use_fuel
        JSR     run_engine

        LDY     #$04
        LDA     pod_attached_flag_1
        BEQ     L1BA6

        INY
	.L1BA6
        LDX     ship_angle
        LDA     angle_to_y_FRAC,X
        STA     calc_force_vectory_FRAC
        LDA     angle_to_y_INT,X
		
	.L1BB0
        ROR     A
        ROR     calc_force_vectory_FRAC
        DEY
        BNE     L1BB0

        AND     #$01
        EOR     #$FF
        CLC
        ADC     #$01
        STA     calc_force_vectory_INT
        LDY     #$04
        LDA     pod_attached_flag_1
        BEQ     L1BC6

        INY
		
	.L1BC6
        LDA     angle_to_x_FRAC,X
        STA     calc_force_vectorx_FRAC
        LDA     angle_to_x_INT,X

	.L1BCE
        ROR     A
        ROR     calc_force_vectorx_FRAC
        ROR     calc_force_vectorx_FRAC_LO
        DEY
        BNE     L1BCE

        AND     #$01
        EOR     #$FF
        CLC
        ADC     #$01
        STA     calc_force_vectorx_INT
        CLC
        LDA     force_vectorx_FRAC_LO
        ADC     calc_force_vectorx_FRAC_LO
        STA     force_vectorx_FRAC_LO
        LDA     force_vectorx_FRAC
        ADC     calc_force_vectorx_FRAC
        STA     force_vectorx_FRAC
        LDA     force_vectorx_INT
        ADC     calc_force_vectorx_INT
        STA     force_vectorx_INT
        CLC
        LDA     force_vectory_FRAC
        ADC     calc_force_vectory_FRAC
        STA     force_vectory_FRAC
        LDA     force_vectory_INT
        ADC     calc_force_vectory_INT
        STA     force_vectory_INT
        LDA     level_tick_counter
        AND     #$0F
        CMP     #$03
        BNE     L1C0A

        JMP     end_of_thrust_force_calculation

	.L1C0A
        CMP     #$0B
        BNE     L1C11

        JMP     end_of_thrust_force_calculation

	.L1C11
        LDA     #$00
        STA     ship_thrust_L0079
        SEC
        SBC     angle_var_B_accumulate
        STA     ship_thrust_L007E
        LDA     ship_angle
        SBC     angle_ship_to_pod
        TAY
        LDA     ship_thrust_L007E
        CLC
        ADC     #$08
        STA     ship_thrust_L007E
        TYA
        ADC     #$00
        AND     #$1F
        TAY
        LDA     angle_to_x_FRAC,Y
        STA     ship_thrust_x_FRAC
        LDA     angle_to_x_INT,Y
        STA     ship_thrust_x_INT
        LDX     #$0E
		
	.L1C38
        LDA     ship_thrust_L007E
        AND     #$F0
        CMP     lookup_top_nibble,X
        BNE     L1C46

        INY
        TYA
        AND     #$1F
        TAY
		
	.L1C46
        CLC
        LDA     angle_to_x_FRAC,Y
        ADC     ship_thrust_x_FRAC
        STA     ship_thrust_x_FRAC
        LDA     angle_to_x_INT,Y
        ADC     ship_thrust_x_INT
        STA     ship_thrust_x_INT
        DEX
        BPL     L1C38

        LDA     ship_thrust_x_INT
        ROL     A
        ROR     ship_thrust_x_INT
        ROR     ship_thrust_x_FRAC
        LDA     ship_thrust_x_INT
        BPL     L1C67

        LDA     #$FF
        STA     ship_thrust_L0079
		
	.L1C67
        CLC
        LDA     angle_var_A
        STA     prev_angle_var_A
        ADC     ship_thrust_x_FRAC
        STA     angle_var_A
        LDA     angle_var_B
        STA     prev_angle_var_B
        ADC     ship_thrust_x_INT
        STA     angle_var_B
        LDA     angle_var_C
        STA     prev_angle_var_C
        ADC     ship_thrust_L0079
        STA     angle_var_C
        LDA     prev_angle_var_C
        LDX     #$06
		
	.L1C84
        PHA
        ROL     A
        PLA
        ROR     A
        ROR     prev_angle_var_B
        ROR     prev_angle_var_A
        DEX
        BNE     L1C84

        STA     prev_angle_var_C

        CLC
        LDA     angle_var_A
        SBC     prev_angle_var_A
        STA     angle_var_A
        LDA     angle_var_B
        SBC     prev_angle_var_B
        STA     angle_var_B
        LDA     angle_var_C
        SBC     prev_angle_var_C
        STA     angle_var_C

	.end_of_thrust_force_calculation
        LDA     force_vectorx_FRAC_LO
        STA     calc_force_vectory_FRAC
        LDA     force_vectorx_FRAC
        STA     calc_force_vectory_INT
        LDA     force_vectorx_INT
        LDX     #$06
		
	.L1CB0
        PHA
        ROL     A
        PLA
        ROR     A
        ROR     calc_force_vectory_INT
        ROR     calc_force_vectory_FRAC
        DEX
        BNE     L1CB0

        STA     calc_force_vectorx_FRAC
        SEC
        LDA     force_vectorx_FRAC_LO
        SBC     calc_force_vectory_FRAC
        STA     force_vectorx_FRAC_LO
        LDA     force_vectorx_FRAC
        SBC     calc_force_vectory_INT
        STA     force_vectorx_FRAC
        LDA     force_vectorx_INT
        SBC     calc_force_vectorx_FRAC
        STA     force_vectorx_INT
        LDA     #$00
        STA     calc_force_vectorx_INT
        LDA     force_vectory_INT
        BPL     L1CDC

        LDA     #$FF
        STA     calc_force_vectorx_INT
		
	.L1CDC
        LDA     force_vectory_FRAC
        STA     calc_force_vectory_FRAC
        LDA     force_vectory_INT
        STA     calc_force_vectory_INT
        LDA     calc_force_vectorx_INT
        LDX     #$08
		
	.L1CE8
        PHA
        ROL     A
        PLA
        ROR     A
        ROR     calc_force_vectory_INT
        ROR     calc_force_vectory_FRAC
        DEX
        BNE     L1CE8

        STA     calc_force_vectorx_FRAC
        SEC
        LDA     force_vectory_FRAC
        SBC     calc_force_vectory_FRAC
        STA     force_vectory_FRAC
        LDA     force_vectory_INT
        SBC     calc_force_vectory_INT
        STA     force_vectory_INT
        LDA     calc_force_vectorx_INT
        SBC     calc_force_vectorx_FRAC
        STA     calc_force_vectorx_INT
        RTS
}

\ ******************************************************************************
\ * Top nibble look up table
\ ******************************************************************************

.lookup_top_nibble
		EQUB	$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0

\ ******************************************************************************
\ * Function: test_for_pause
\ * Description: <>
\ ******************************************************************************

.test_for_pause
{
		LDX		#INKEY_copy
		JSR		test_inkey
        BNE     not_paused

        LDA     shield_tractor_pressed
        BNE     not_paused

	.pause_loop
        LDA     #$01
        STA     level_tick_state

        LDA     #$0F
        LDX     #$00
        JSR     OSBYTE					; *FX 15 - flush all buffers

        JSR     OSRDCH					; read character from input stream

        CMP     #ASCII_delete			; unpause key
        BNE     pause_loop

        JSR     reset_system_clock

        LDA     #$00
        STA     level_tick_state

	.not_paused
        LDX     #INKEY_Q				; quiet key
        JSR     test_inkey

        BNE     q_not_pressed
        STX     mute_sound_flag

	.q_not_pressed
        LDX     #INKEY_S				; sound key
        JSR     test_inkey

        BNE     s_not_pressed

        LDA     #$00
        STA     mute_sound_flag

	.s_not_pressed
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * This code is not called directly - these bytes are used to write over existing code
\ ******************************************************************************
\ ******************************************************************************

.ship_AND_pixel_mask_CODE
        AND     pixel_masks_1,X
.ship_SKIP_pixel_mask_CODE
        JMP     plot_ship_loop

\ ******************************************************************************
\ * Function: update_shield_tractor_draw_ship_and_pod
\ * Description: <>
\ ******************************************************************************

.update_shield_tractor_draw_ship_and_pod
{
        JSR     calculate_attached_pod_vector

        LDA     gravity_INT
        BPL     L1D61

        JSR     draw_pod_and_collision_test

	.L1D61
        LDA     ship_sprite_plotted_flag
        BNE     ship_input_shield_tractor

        JMP     L1DB3

	.ship_input_shield_tractor
        LDA     #$00
        STA     shield_tractor_pressed
        STA     sheild_tractor_flag

        LDA     pod_destroying_player_timer
        BPL     no_sheild_tractor

        LDA     fuel_just_ran_out_flag
        BNE     no_sheild_tractor

        LDX     #INKEY_spacebar
        JSR     test_inkey

        STX     shield_tractor_pressed
        CPX     #$00
        BEQ     no_sheild_tractor

        LDA     vsync_count
        AND     #$02
        BEQ     no_sheild_tractor

        LDA     #$01
        STA     sheild_tractor_flag

        JSR     use_fuel
        JSR     run_engine_ext

	.no_sheild_tractor
        LDA     #$00
        STA     ship_sprite_plotted_flag
		
        LDX     #$02
		
	.overwrite_ship_pixel_AND_CODE
        LDA     ship_AND_pixel_mask_CODE,X
        STA     ship_pixel_mask_test,X						; **MODIFIES CODE**
        DEX
        BPL     overwrite_ship_pixel_AND_CODE

        LDA     old_plot_ship_at_ptr
        STA     plot_ship_at_ptr
        LDA     old_plot_ship_at_ptr+1
        STA     plot_ship_at_ptr+1
		
        LDA     old_plot_ship_sprite_number
        STA     plot_ship_sprite_number
        LDA     old_plot_ship_L0075
        STA     plot_ship_L0075
		
        JSR     plot_ship_or_sheild

	.L1DB3
        LDX     #$02
		
	.overwrite_ship_pixel_SKIP_CODE
        LDA     ship_SKIP_pixel_mask_CODE,X
        STA     ship_pixel_mask_test,X						; **MODIFIES CODE**
        DEX
        BPL     overwrite_ship_pixel_SKIP_CODE

        LDA     ship_angle
        STA     plot_ship_sprite_number
        STA     old_plot_ship_sprite_number
        LDA     sheild_tractor_flag
        BEQ     L1DCE

        LDA     #$FF
        STA     plot_ship_sprite_number
        STA     old_plot_ship_sprite_number
		
	.L1DCE
        CLC
        LDA     midpoint_ypos_FRAC
        ADC     midpoint_deltay_FRAC
        STA     ship_window_ypos_FRAC
        LDA     midpoint_window_ypos_INT
        ADC     midpoint_deltay_INT
        STA     ship_window_ypos_INT
        LDX     ship_angle
        LDA     plot_ship_sprite_number
        BPL     L1DFB

        LDA     angle_to_y_FRAC,X
        STA     calc_ship_delta_FRAC
        LDA     angle_to_y_INT,X
        STA     calc_ship_delta_INT
        ROL     A
        ROR     calc_ship_delta_INT
        LDA     calc_ship_delta_FRAC
        ROR     A
        ADC     ship_window_ypos_FRAC
        STA     ship_window_ypos_FRAC
        LDA     calc_ship_delta_INT
        ADC     ship_window_ypos_INT
        STA     ship_window_ypos_INT
		
	.L1DFB
        ROL     ship_window_ypos_FRAC
        ROL     ship_window_ypos_INT
        CLC
        LDA     midpoint_xpos_FRAC_LO
        ADC     midpoint_deltax_FRAC_LO
        LDA     midpoint_xpos_FRAC
        ADC     midpoint_deltax_FRAC
        PHA
        STA     ship_window_xpos_FRAC
        LDA     midpoint_window_xpos_INT
        ADC     midpoint_deltax_INT
        STA     calc_ship_window_xpos_INT
        STA     ship_window_xpos_INT
        LDA     plot_ship_sprite_number
        BPL     L1E30

        LDA     angle_to_x_FRAC,X
        STA     calc_ship_delta_FRAC
        LDA     angle_to_x_INT,X
        STA     calc_ship_delta_INT
        ROL     A
        ROR     calc_ship_delta_INT
        ROR     calc_ship_delta_FRAC
        PLA
        ADC     calc_ship_delta_FRAC
        PHA
        LDA     calc_ship_window_xpos_INT
        ADC     calc_ship_delta_INT
        STA     calc_ship_window_xpos_INT
		
	.L1E30
        PLA
        ROL     A
        ROL     A
        ROL     A
        AND     #$03
        STA     plot_ship_L0075
        STA     old_plot_ship_L0075
        LDA     #$00
        STA     plot_ship_at_ptr
        STA     plot_ship_L0070
        LDA     ship_window_ypos_INT
        CLC
        AND     #$F8
        ROR     A
        ROR     A
        STA     plot_ship_at_ptr+1
        ROR     A
        ROR     A
        ROR     plot_ship_at_ptr
        ROR     A
        ROR     plot_ship_at_ptr
        ADC     #$38
        ADC     plot_ship_at_ptr+1
        STA     plot_ship_at_ptr+1
        LDA     player_ship_destroyed_flag
        BMI     L1E61

        LDA     #$00
        STA     player_ship_destroyed_flag
        JMP     draw_pod_and_collision_test

	.L1E61
        LDA     plot_ship_collision_detected
        BNE     L1E88

        LDA     #$01
        STA     ship_sprite_plotted_flag
        LDY     calc_ship_window_xpos_INT
        LDA     mult_by_8_LO,Y
        ADC     plot_ship_at_ptr
        STA     plot_ship_at_ptr
        LDA     mult_by_8_HI,Y
        ADC     plot_ship_at_ptr+1
        STA     plot_ship_at_ptr+1
        STA     old_plot_ship_at_ptr+1
        LDA     ship_window_ypos_INT
        AND     #$07
        ADC     plot_ship_at_ptr
        STA     plot_ship_at_ptr
        STA     old_plot_ship_at_ptr
        JSR     plot_ship_or_sheild

	.L1E88
        LDA     gravity_INT
        BMI     return

        JSR     draw_pod_and_collision_test

	.return
        RTS
}

\ ******************************************************************************
\ * Function: plot_ship_or_sheild
\ * Params: plot_ship_at_ptr = screen address to plot sprite,
\ * plot_ship_L0075, plot_ship_sprite_number = ?
\ * Description: <>
\ ******************************************************************************

.plot_ship_or_sheild
{
        LDA     #LO(pixel_masks_3)
        STA     ship_pixel_mask_addr_LO					; **MODIFIES CODE**
        LDA     #HI(pixel_masks_3)
        STA     ship_pixel_mask_addr_HI					; **MODIFIES CODE**
        LDA     #$C9					; OPCODE CMP IMMEDIATE
        STA     plot_ship_write_opcode					; **MODIFIES CODE**
        LDA     #$FF					; OPCODE value
        STA     plot_ship_write_value					; **MODIFIES CODE**
        LDA     plot_ship_sprite_number
        BPL     L1EB7

        LDA     #LO(pixel_masks_1)
        STA     ship_pixel_mask_addr_LO					; **MODIFIES CODE**
        LDA     #HI(pixel_masks_1)
        STA     ship_pixel_mask_addr_HI					; **MODIFIES CODE**

		LDA     #$11					; sheild sprite?
        JMP     L1ECB

	.L1EB7
        CMP     #$11
        BCC     L1ECB

        LDA     #$49					; OPCODE EOR IMMEDIATE
        STA     plot_ship_write_opcode					; **MODIFIES CODE**
        LDA     #$1F					; OPCODE value
        STA     plot_ship_write_value					; **MODIFIES CODE**
        LDA     plot_ship_sprite_number
        EOR     #$1F
        ADC     #$00
		
	.L1ECB
        TAY
        LDA     ship_sprite_ptr_table_LO,Y
        STA     ship_sprite_addr_1_LO					; **MODIFIES CODE**
        STA     ship_sprite_addr_2_LO					; **MODIFIES CODE**
        STA     ship_sprite_addr_3_LO					; **MODIFIES CODE**
        LDA     ship_sprite_ptr_table_HI,Y
        STA     ship_sprite_addr_1_HI					; **MODIFIES CODE**
        STA     ship_sprite_addr_2_HI					; **MODIFIES CODE**
        STA     ship_sprite_addr_3_HI					; **MODIFIES CODE**
        LDA     plot_ship_at_ptr
        AND     #$07
        EOR     #$07
        STA     plot_ship_L0070
        LDX     #$00
        JMP     plot_ship_start
}

\ ******************************************************************************
\ * Function: plot_ship_loop
\ * Description: <>
\ ******************************************************************************

.plot_ship_loop
\\ {
        LDX     plot_ship_index
        INX
		
.plot_ship_start
        STX     plot_ship_index

	.L1EF6
        LDA     ship_sprite_0_data,X		; **SELF-MODIFIED CODE**
        ship_sprite_addr_1_LO   = L1EF6+1
        ship_sprite_addr_1_HI   = L1EF6+2
        BMI     L1F1F

	.plot_ship_inner_loop
        SEC
		
.plot_ship_write_opcode
        EOR     #$1F					; **SELF-MODIFIED CODE**
        plot_ship_write_value   = plot_ship_write_opcode+1

        ADC     plot_ship_L0075
        TAY
        AND     #$3C
        ROL     A
        STA     plot_ship_at_y_offset
        TYA
        AND     #$03
        TAX

.ship_load_pixel_mask
        LDA     pixel_masks_1,X			; **SELF-MODIFIED CODE**
        ship_pixel_mask_addr_LO   = ship_load_pixel_mask+1
        ship_pixel_mask_addr_HI   = ship_load_pixel_mask+2

        LDY     plot_ship_at_y_offset
        EOR     (plot_ship_at_ptr),Y
        STA     (plot_ship_at_ptr),Y

.ship_pixel_mask_test
        AND     pixel_masks_1,X			; **SELF-MODIFIED CODE**
        BEQ     plot_ship_loop

        LDA     #$FF
        STA     plot_ship_collision_detected
        JMP     plot_ship_loop

	.L1F1F
        CMP     #$FF
        BEQ     plot_ship_return

        LDX     plot_ship_index
        DEC     plot_ship_L0070
        BMI     L1F35

        INC     plot_ship_at_ptr
		
	.L1F2B
        LDA     ship_sprite_4_data,X				; **SELF-MODIFIED CODE**
        ship_sprite_addr_2_LO   = L1F2B+1
        ship_sprite_addr_2_HI   = L1F2B+2
        CMP     #$80
        BNE     plot_ship_inner_loop

        JMP     plot_ship_loop

	.L1F35
        LDA     #$07
        STA     plot_ship_L0070
        CLC
        LDA     plot_ship_at_ptr
        ADC     #$39
        STA     plot_ship_at_ptr
        LDA     plot_ship_at_ptr+1
        ADC     #$02
        STA     plot_ship_at_ptr+1						; $239 - character row bytes - 7
		
	.L1F46
        LDA     ship_sprite_4_data,X				; **SELF-MODIFIED CODE**
        ship_sprite_addr_3_LO   = L1F46+1
        ship_sprite_addr_3_HI   = L1F46+2
        CMP     #$80
        BNE     plot_ship_inner_loop

        JMP     plot_ship_loop

	.plot_ship_return
        RTS
\\ }

\ ******************************************************************************
\ * Function: calculate_attached_pod_vector
\ * Description: <>
\ ******************************************************************************

.calculate_attached_pod_vector
{
        LDA     angle_var_B_accumulate
        CLC
        ADC     #$08
        STA     pod_vector_L007A
        LDA     angle_ship_to_pod
        ADC     #$00
        AND     #$1F
        TAY
        LDA     angle_to_x_FRAC,Y
        STA     midpoint_deltax_FRAC
        LDA     angle_to_x_INT,Y
        STA     midpoint_deltax_INT
        LDA     angle_to_y_FRAC,Y
        STA     midpoint_deltay_FRAC
        LDA     angle_to_y_INT,Y
        STA     midpoint_deltay_INT
        LDX     top_nibble_index
		
	.L1F75
        LDA     pod_vector_L007A
        AND     #$F0
        CMP     lookup_top_nibble,X
        BNE     L1F83

        INY
        TYA
        AND     #$1F
        TAY
		
	.L1F83
        CLC
        LDA     angle_to_x_FRAC,Y
        ADC     midpoint_deltax_FRAC
        STA     midpoint_deltax_FRAC
        LDA     angle_to_x_INT,Y
        ADC     midpoint_deltax_INT
        STA     midpoint_deltax_INT
        CLC
        LDA     angle_to_y_FRAC,Y
        ADC     midpoint_deltay_FRAC
        STA     midpoint_deltay_FRAC
        LDA     angle_to_y_INT,Y
        ADC     midpoint_deltay_INT
        STA     midpoint_deltay_INT
        DEX
        BPL     L1F75

        LDA     midpoint_deltax_INT
        ROL     A
        ROR     midpoint_deltax_INT
        ROR     midpoint_deltax_FRAC
        ROR     midpoint_deltax_FRAC_LO
        LDA     midpoint_deltax_INT
        ROL     A
        ROR     midpoint_deltax_INT
        ROR     midpoint_deltax_FRAC
        ROR     midpoint_deltax_FRAC_LO
        LDA     midpoint_deltay_INT
        ROL     A
        ROR     midpoint_deltay_INT
        ROR     midpoint_deltay_FRAC
        LDA     midpoint_deltay_INT
        ROL     A
        ROR     midpoint_deltay_INT
        ROR     midpoint_deltay_FRAC
        RTS
}

\ ******************************************************************************
\ * Function: update_pod_tractor_beam
\ * Description: <>
\ ******************************************************************************

.update_pod_tractor_beam
{
        LDA     pod_sprite_plotted_flag
        BNE     L1FD3

        LDA     level_obj_flags				; what's special about first entry in table?
        AND     #$03
        CMP     #$03
        BEQ     L1FD3

        RTS

	.L1FD3
        LDA     pod_attached_flag_2
        BMI     tractor_beam_return

        LDA     shield_tractor_pressed
        BNE     do_pod_tractor_beam

        STA     tractor_beam_started_flag
        RTS
}

\ ******************************************************************************
\ * Function: do_pod_tractor_beam
\ * Description: <>
\ ******************************************************************************

.do_pod_tractor_beam
{
        LDA     pod_destroying_player_timer
        BPL     tractor_beam_return

        LDA     tractor_beam_started_flag
        STA     pod_line_exists_flag
		
        JSR     get_distance_ship_to_pod_tractor		; must return distance?

        CMP     #$75
        BCC     set_flag

        CMP     #$84									; must be distance of ship from pod stand
        BCS     attach_pod_to_ship

        RTS

	.set_flag
        LDA     #$01
        STA     tractor_beam_started_flag
        STA     pod_line_exists_flag
}
\\ Fall through!

.tractor_beam_return
{
        RTS
}

\ ******************************************************************************
\ * Function: attach_pod_to_ship
\ * Description: calculate mid-point between player position & nearest object
\ ******************************************************************************

.attach_pod_to_ship
{
        LDA     tractor_beam_started_flag
        BEQ     tractor_beam_return

        LDA     #$FF
        STA     pod_attached_flag_1
        STA     pod_attached_flag_2
        STA     level_reset_with_pod_flag

        CLC
        LDA     player_xpos_FRAC
        ADC     nearest_obj_xpos_FRAC
        STA     midpoint_xpos_FRAC
        LDA     player_xpos_INT
        ADC     nearest_obj_xpos_INT
        ROR     A
        STA     midpoint_xpos_INT
        ROR     midpoint_xpos_FRAC
        CLC
        LDA     player_ypos_FRAC
        ADC     #$80
        STA     midpoint_ypos_FRAC
        LDA     player_ypos_INT
        ADC     nearest_obj_ypos_INT
        STA     midpoint_ypos_INT
        LDA     player_ypos_INT_HI
        ADC     nearest_obj_ypos_INT_HI
        ROR     A
        STA     midpoint_ypos_INT_HI
        ROR     midpoint_ypos_INT
        ROR     midpoint_ypos_FRAC
        LDA     force_vectory_INT
        ROL     A
        ROR     force_vectory_INT
        ROR     force_vectory_FRAC
        LDA     force_vectorx_INT
        ROL     A
        ROR     force_vectorx_INT
        ROR     force_vectorx_FRAC
        ROR     force_vectorx_FRAC_LO
        LDA     player_xpos_FRAC
        SBC     midpoint_xpos_FRAC
        STA     attach_pod_L0074
        LDA     player_xpos_INT
        SBC     midpoint_xpos_INT
        STA     attach_pod_L0075
        ROL     attach_pod_L0074
        ROL     attach_pod_L0075
        ROL     attach_pod_L0074
        ROL     attach_pod_L0075
        LDA     attach_pod_L0075
        STA     attach_pod_L0072
        LDA     player_ypos_FRAC
        SBC     midpoint_ypos_FRAC
        STA     attach_pod_L0076
        LDA     player_ypos_INT
        SBC     midpoint_ypos_INT
        STA     attach_pod_L0077
        ROL     attach_pod_L0076
        ROL     attach_pod_L0077
        LDA     attach_pod_L0077
        STA     attach_pod_L0073
        LDA     #$0A
        STA     attach_pod_L007B
        LDA     #$AB
        STA     attach_pod_L007A
        LDA     #$07
        STA     attach_pod_L007C
        LDA     #$00
        STA     angle_var_B_accumulate
        STA     angle_ship_to_pod
		
	.L207E
        LDA     #$FF
        STA     attach_pod_L0071
        LDX     #$03
        STX     attach_pod_L0078
		
	.L2086
        JSR     calculate_attached_pod_vector

        ROL     midpoint_deltax_FRAC
        ROL     midpoint_deltax_INT
        ROL     midpoint_deltax_FRAC
        ROL     midpoint_deltax_INT
        ROL     midpoint_deltay_FRAC
        ROL     midpoint_deltay_INT
        SEC
        LDA     midpoint_deltax_INT
        SBC     attach_pod_L0075
        BPL     L20A0

        EOR     #$FF
        ADC     #$01
		
	.L20A0
        STA     attach_pod_L0088
        SEC
        LDA     midpoint_deltay_INT
        SBC     attach_pod_L0077
        BPL     L20AD

        EOR     #$FF
        ADC     #$01
		
	.L20AD
        STA     attach_pod_L0089
        JSR     get_distance_ship_to_pod_tractor_ext

        CMP     attach_pod_L0071
        BCS     L20C0

        STA     attach_pod_L0071
        LDA     angle_var_B_accumulate
        STA     prev_angle_var_A
        LDA     angle_ship_to_pod
        STA     temp_angle_ship_to_pod
		
	.L20C0
        CLC
        LDA     angle_var_B_accumulate
        ADC     attach_pod_L007A
        STA     angle_var_B_accumulate
        LDA     angle_ship_to_pod
        ADC     attach_pod_L007B
        AND     #$1F
        STA     angle_ship_to_pod
        DEC     attach_pod_L0078
        BNE     L2086

        LDA     prev_angle_var_A
        STA     angle_var_B_accumulate
        LDA     temp_angle_ship_to_pod
        STA     angle_ship_to_pod
        CLC
        ROR     attach_pod_L007B
        ROR     attach_pod_L007A
        DEC     attach_pod_L007C
        BEQ     L20F6

        SEC
        LDA     angle_var_B_accumulate
        SBC     attach_pod_L007A
        STA     angle_var_B_accumulate
        LDA     angle_ship_to_pod
        SBC     attach_pod_L007B
        AND     #$1F
        STA     angle_ship_to_pod
        JMP     L207E

	.L20F6
        LDA     force_vectorx_INT
        STA     attach_pod_L0088
        LDA     force_vectorx_FRAC
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        LDA     attach_pod_L0073
        JSR     attach_pod_calculate_UNKNOWN

        LDA     attach_pod_L0089
        STA     attach_pod_L008E
        LDA     attach_pod_L008A
        STA     attach_pod_L008F
        LDA     force_vectory_INT
        STA     attach_pod_L0088
        LDA     force_vectory_FRAC
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        ROL     A
        ROL     attach_pod_L0088
        LDA     attach_pod_L0072
        JSR     attach_pod_calculate_UNKNOWN

        SEC
        LDA     attach_pod_L0089
        SBC     attach_pod_L008E
        STA     angle_var_B
        LDA     attach_pod_L008A
        SBC     attach_pod_L008F
        PHA
        ROL     A
        PLA
        ROR     A
        ROR     angle_var_B
        PHA
        ROL     A
        PLA
        ROR     A
        ROR     angle_var_B
        STA     angle_var_C
		
        JSR     collect_pod_fuel_sound

        RTS
}

\ ******************************************************************************
\ * Function: generate_stars_to_start
\ * Description: <>
\ ******************************************************************************

.generate_stars_to_start
{
        LDA     #$08
        STA     plot_ship_sprite_number
        LDA     #$A0
        STA     plot_ship_at_ptr
        LDA     #$56
        STA     plot_ship_at_ptr+1
        LDA     #$00
        STA     window_xpos_INT
        STA     window_ypos_EXT
        STA     plot_ship_L0075
        JSR     plot_ship_or_sheild

	.loop
        JSR     particles_update_and_draw

        INC     level_tick_counter
        LDY     #$03
        JSR     wait_time_out_Y

        INC     window_xpos_INT
        BNE     loop

        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * This code is not called directly - these bytes are used to write over existing code
\ ******************************************************************************
\ ******************************************************************************

.ship_fn_SKIP_pixel_mask_CODE
        JMP     plot_pod_loop

\ ******************************************************************************
\ * Function: plot_pod_sprite
\ * Params: plot_pod_L0070 = ?,plot_pod_L0071 = ?,
\ * plot_pod_L0072 = ?
\ * Description: <>
\ ******************************************************************************

.plot_pod_sprite
\\ {
        JSR     set_plot_pod_sprite_mask_addr

        LDA     plot_pod_L0070
        ROL     A
        ROL     A
        ROL     A
        AND     #$03
        STA     plot_pod_L0076
        LDA     #$00
        STA     plot_pod_sprite_at_ptr
        STA     plot_pod_L007B
        LDA     plot_pod_L0072
        CLC
        AND     #$F8
        ROR     A
        ROR     A
        STA     plot_pod_sprite_at_ptr+1
        ROR     A
        ROR     A
        ROR     plot_pod_sprite_at_ptr
        ROR     A
        ROR     plot_pod_sprite_at_ptr
        ADC     #$38
        ADC     plot_pod_sprite_at_ptr+1
        STA     plot_pod_sprite_at_ptr+1
        LDY     plot_pod_L0071
        LDA     mult_by_8_LO,Y
        ADC     plot_pod_sprite_at_ptr
        STA     plot_pod_sprite_at_ptr
        LDA     mult_by_8_HI,Y
        ADC     plot_pod_sprite_at_ptr+1
        STA     plot_pod_sprite_at_ptr+1
        STA     plot_pod_L007A
        LDA     plot_pod_L0072
        AND     #$07
        ADC     plot_pod_sprite_at_ptr
        STA     plot_pod_sprite_at_ptr
        STA     plot_pod_L0079

	.L21B6
        JSR     set_plot_pod_sprite_mask_addr

        LDA     pod_sprite_ptr_LO
        STA     pod_sprite_load_addr_1_LO					; **MODIFIES CODE**
        STA     pod_sprite_load_addr_2_LO					; **MODIFIES CODE**
        STA     pod_sprite_load_addr_3_LO					; **MODIFIES CODE**
        LDA     pod_sprite_ptr_HI
        STA     pod_sprite_load_addr_1_HI					; **MODIFIES CODE**
        STA     pod_sprite_load_addr_2_HI					; **MODIFIES CODE**
        STA     pod_sprite_load_addr_3_HI					; **MODIFIES CODE**
        LDX     #$00
        JMP     L21D7

.plot_pod_loop
        LDX     plot_pod_sprite_L0073
        INX

	.L21D7
        STX     plot_pod_sprite_L0073

	.L21D9
        LDA     LFFFF,X					; **SELF-MODIFIED CODE**
        pod_sprite_load_addr_1_LO   = L21D9+1
        pod_sprite_load_addr_1_HI   = L21D9+2
        BMI     L2202

	.L21DE
        CLC
        ADC     plot_pod_L0076
        STA     plot_pod_L007B
        AND     #$3C
        ROL     A
        STA     plot_pod_sprite_y_offset
        LDA     plot_pod_L007B
        AND     #$03
        TAX

.plot_pod_sprite_load_pixel_mask
        LDA     pixel_masks_1,X			; **SELF-MODIFIED CODE**
        plot_pod_sprite_mask_addr_LO   = plot_pod_sprite_load_pixel_mask+1
        plot_pod_sprite_mask_addr_HI   = plot_pod_sprite_load_pixel_mask+2

        LDY     plot_pod_sprite_y_offset
        EOR     (plot_pod_sprite_at_ptr),Y
        STA     (plot_pod_sprite_at_ptr),Y

.plot_pod_sprite_test_pixel_mask
        AND     pixel_masks_1,X			; **SELF-MODIFIED CODE**
        BEQ     plot_pod_loop

        LDA     #$FF
		
	.L21FD
        STA     plot_pod_collision_detected			; **SELF-MODIFIED CODE**
        plot_pod_sprite_addr_zp   = L21FD+1
        JMP     plot_pod_loop

	.L2202
        CMP     #$FF
        BEQ     plot_pod_sprite_return

        LDA     plot_pod_sprite_at_ptr
        AND     #$07
        CMP     #$07
        BEQ     L221A

        INC     plot_pod_sprite_at_ptr

	.L2210
        LDA     LFFFF,X					; **SELF-MODIFIED CODE**
        pod_sprite_load_addr_2_LO   = L2210+1
        pod_sprite_load_addr_2_HI   = L2210+2
        CMP     #$80
        BNE     L21DE

        JMP     plot_pod_loop

	.L221A
        CLC
        LDA     plot_pod_sprite_at_ptr
        ADC     #$39
        STA     plot_pod_sprite_at_ptr
        LDA     plot_pod_sprite_at_ptr+1
        ADC     #$02							; character row = $240 bytes -> $239 = $240 - 7
        STA     plot_pod_sprite_at_ptr+1

	.L2227
        LDA     LFFFF,X							; **SELF-MODIFIED CODE**
        pod_sprite_load_addr_3_LO   = L2227+1
        pod_sprite_load_addr_3_HI   = L2227+2
        CMP     #$80
        BNE     L21DE

        JMP     plot_pod_loop

	.plot_pod_sprite_return
        RTS
\\ }

\ ******************************************************************************
\ * Function: set_plot_pod_sprite_mask_addr
\ * Description: <>
\ ******************************************************************************

.set_plot_pod_sprite_mask_addr
{
        LDA     pixel_mask_ptrs_LO-1,X	; presume X>0
        STA     plot_pod_sprite_mask_addr_LO					; **MODIFIES CODE**
        LDA     pixel_mask_ptrs_HI-1,X
        STA     plot_pod_sprite_mask_addr_HI					; **MODIFIES CODE**
        RTS
}

.pixel_mask_ptrs_LO
        EQUB    LO(pixel_masks_3)
		EQUB	LO(pixel_masks_2)
        EQUB    LO(pixel_masks_1)

.pixel_mask_ptrs_HI
		EQUB	HI(pixel_masks_3)
		EQUB	HI(pixel_masks_2)
		EQUB	HI(pixel_masks_1)

\ ******************************************************************************
\ * Function: draw_pod_and_collision_test
\ * Description: <>
\ ******************************************************************************

.draw_pod_and_collision_test
{
        LDA     #plot_pod_collision_detected								; yes, this is immediate!
        STA     plot_pod_sprite_addr_zp
        LDA     #$00
        STA     plot_pod_collision_detected
        LDX     #$02
		
	.copy_loop1
        LDA     ship_AND_pixel_mask_CODE,X
        STA     plot_pod_sprite_test_pixel_mask,X					; **MODIFIES CODE**
        DEX
        BPL     copy_loop1

        LDA     #LO(pod_sprite_data)
        STA     pod_sprite_ptr_LO
        LDA     #HI(pod_sprite_data)
        STA     pod_sprite_ptr_HI
        LDA     pod_sprite_plotted_flag
        BEQ     L227A

        LDA     #$00
        STA     pod_sprite_plotted_flag
        LDA     old_plot_pod_sprite_at_ptr
        STA     plot_pod_sprite_at_ptr
        LDA     old_plot_pod_sprite_at_ptr+1
        STA     plot_pod_sprite_at_ptr+1
        LDA     old_plot_pod_L0076
        STA     plot_pod_L0076
        LDX     #$03
        JSR     L21B6

	.L227A
        LDA     pod_attached_flag_2
        BNE     L2282

        JMP     return

	.L2282
        LDX     #$02
		
	.copy_loop2
        LDA     ship_fn_SKIP_pixel_mask_CODE,X
        STA     plot_pod_sprite_test_pixel_mask,X							; **MODIFIES CODE**
        DEX
        BPL     copy_loop2

        SEC
        LDA     midpoint_ypos_FRAC
        SBC     midpoint_deltay_FRAC
        STA     plot_pod_L007B
        LDA     midpoint_window_ypos_INT
        SBC     midpoint_deltay_INT
        ROL     plot_pod_L007B
        ROL     A
        STA     plot_pod_L0072
        STA     pod_window_ypos_INT
        SEC
        LDA     midpoint_xpos_FRAC_LO
        SBC     midpoint_deltax_FRAC_LO
        LDA     midpoint_xpos_FRAC
        SBC     midpoint_deltax_FRAC
        STA     plot_pod_L0070
        STA     pod_window_xpos_FRAC
        LDA     midpoint_window_xpos_INT
        SBC     midpoint_deltax_INT
        STA     plot_pod_L0071
        STA     pod_window_xpos_INT
        LDX     #$03
        LDA     pod_attached_flag_1
        BNE     L22BF

        LDA     #$00
        STA     plot_pod_collision_detected
        RTS

	.L22BF
        LDA     #$01
        STA     pod_sprite_plotted_flag
        JSR     plot_pod_sprite

        LDA     plot_pod_L0079
        STA     old_plot_pod_sprite_at_ptr
        LDA     plot_pod_L007A
        STA     old_plot_pod_sprite_at_ptr+1
        LDA     plot_pod_L0076
        STA     old_plot_pod_L0076

	.return
        RTS
}

\ ******************************************************************************
\ * Unreachable code?
\ ******************************************************************************

        RTS

\ ******************************************************************************
\ ******************************************************************************
\ * IRQ handler
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: irq1_handler
\ * Description: <>
\ ******************************************************************************

.irq1_handler
{
        PHP
        PHA
        LDA     #$02
        BIT     SHEILA_System_VIA_Interrupt_Flag
        BNE     irq1_vsync

        LDA     #$40
        BIT     SHEILA_User_VIA_Interrupt_Flag
        BNE     irq1_timer1

        PLA
        PLP
        JMP     (old_irq1v)

	.irq1_timer1
        LDA     SHEILA_User_VIA_Timer1_Low_Order
        LDA     #$01
        STA     irq1_timer1_signal
        PLA
        PLP
        LDA     IRQ1_RETURN_A
        RTI

	.irq1_vsync
        TXA
        PHA
        TYA
        PHA
        LDA     SHEILA_System_VIA_Register_A
        LDA     #$80
        STA     SHEILA_User_VIA_Aux_Ctrl_Reg
        LDA     #$C0
        STA     SHEILA_User_VIA_Interrupt_Enable
        LDA     #$00
        STA     SHEILA_User_VIA_Timer1_Low_Order
        LDA     #$38
        STA     SHEILA_User_VIA_Timer1_High_Order
        LDA     #$D8
        STA     SHEILA_Video_ULA
        LDA     #$00
        STA     irq1_timer1_signal
        INC     vsync_count
        LDX     planet_explode_anim
        BEQ     irq1_return

        LDA     background_colour_table,X
        LDY     #$00
        JSR     palette_set_colour_Y_to_A

        LDA     #$00
        LDY     #$02
        JSR     palette_set_colour_Y_to_A

        LDA     vsync_count
        AND     #$01
        BEQ     irq1_return

        DEC     planet_explode_anim

	.irq1_return
        PLA
        TAY
        PLA
        TAX
        PLA
        PLP
        LDA     IRQ1_RETURN_A
        RTI
}

\ ******************************************************************************
\ * Colour table used when planet explodes
\ ******************************************************************************

.background_colour_table
{
        EQUB    $00,$00,$04,$01,$05,$02,$06,$03
        EQUB    $07,$07,$03,$06,$02,$05,$01,$04
}

\ ******************************************************************************
\ ******************************************************************************
\ * Ship routines
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: ship_input_rotate
\ * Description: <>
\ ******************************************************************************

.ship_input_rotate
{
        LDA     level_tick_counter
        AND     #$03
        BEQ     return

        LDX     #INKEY_capslock
        JSR     test_inkey
        BNE     rotate_left_not_pressed

        DEC     ship_angle
		
	.rotate_left_not_pressed
        LDX     #INKEY_ctrl
        JSR     test_inkey
        BNE     rotate_right_not_pressed

        INC     ship_angle

	.rotate_right_not_pressed
        LDA     ship_angle
        AND     #$1F
        STA     ship_angle

	.return
        RTS
}

\ ******************************************************************************
\ * Function: midpoint_add_force_vector
\ * Description: <>
\ ******************************************************************************

.midpoint_add_force_vector
{
        CLC
        LDA     midpoint_xpos_FRAC_LO
        ADC     force_vectorx_FRAC_LO
        STA     midpoint_xpos_FRAC_LO
        LDA     midpoint_xpos_FRAC
        ADC     force_vectorx_FRAC
        STA     midpoint_xpos_FRAC
        LDA     midpoint_xpos_INT
        ADC     force_vectorx_INT
        STA     midpoint_xpos_INT

        CLC
        LDA     midpoint_ypos_FRAC
        ADC     force_vectory_FRAC
        STA     midpoint_ypos_FRAC
        LDA     force_vectory_INT
        BMI     ship_force_negative

        ADC     midpoint_ypos_INT
        STA     midpoint_ypos_INT
        BCC     ship_ypos_no_ext

        INC     midpoint_ypos_INT_HI
        JMP     ship_ypos_no_ext

	.ship_force_negative
        ADC     midpoint_ypos_INT
        STA     midpoint_ypos_INT
        BCS     ship_ypos_no_ext

        DEC     midpoint_ypos_INT_HI
		
	.ship_ypos_no_ext
        LDA     pod_destroying_player_timer
        BPL     L23A7

        LDA     pod_attached_flag_1
        BEQ     return

	.L23A7
        CLC
        LDA     angle_var_A
        ADC     angle_var_A_accumulate
        STA     angle_var_A_accumulate
        LDA     angle_var_B
        ADC     angle_var_B_accumulate
        STA     angle_var_B_accumulate
        LDA     angle_var_C
        ADC     angle_ship_to_pod
        AND     #$1F
        STA     angle_ship_to_pod

	.return
        RTS
}

\ ******************************************************************************
\ * Function: calculate_player_position_from_midpoint
\ * Description: <>
\ ******************************************************************************

.calculate_player_position_from_midpoint
{
        CLC
        LDA     midpoint_xpos_FRAC_LO
        STA     temp_midpoint_xpos_FRAC_LO

        LDA     midpoint_xpos_FRAC
        ADC     midpoint_deltax_FRAC
        STA     new_ship_xpos_FRAC
        LDA     midpoint_xpos_INT
        ADC     midpoint_deltax_INT
        STA     new_ship_xpos_INT

        CLC
        LDA     midpoint_ypos_FRAC
        ADC     midpoint_deltay_FRAC
        STA     new_ship_ypos_FRAC
        LDA     midpoint_ypos_INT
        ADC     midpoint_deltay_INT
        STA     new_ship_ypos_INT
        PHP
        LDA     midpoint_deltay_INT
        BMI     L23E5

        LDA     #$00
        JMP     L23E7

	.L23E5
        LDA     #$FF
		
	.L23E7
        PLP
        ADC     midpoint_ypos_INT_HI
        STA     calc_player_ypos_INT_HI

        SEC
        LDA     temp_midpoint_xpos_FRAC_LO
        SBC     old_midpoint_xpos_FRAC_LO
        STA     diff_midpoint_xpos_FRAC_LO
		
        LDA     new_ship_xpos_FRAC
        SBC     player_xpos_FRAC
        STA     player_velocityx_FRAC
        LDA     new_ship_xpos_INT
        SBC     player_xpos_INT
        STA     player_velocityx_INT

        SEC
        LDA     new_ship_ypos_FRAC
        SBC     player_ypos_FRAC
        STA     player_velocityy_FRAC
        LDA     new_ship_ypos_INT
        SBC     player_ypos_INT
        STA     player_velocityy_INT
        LDA     calc_player_ypos_INT_HI
        SBC     player_ypos_INT_HI
        STA     player_velocityy_INT_HI

        LDA     player_xpos_FRAC
        STA     old_player_xpos_FRAC
        LDA     player_xpos_INT
        STA     old_player_xpos_INT
        LDA     player_ypos_INT
        STA     old_player_ypos_INT
        LDA     player_ypos_INT_HI
        STA     old_player_ypos_INT_HI

        LDA     temp_midpoint_xpos_FRAC_LO
        STA     old_midpoint_xpos_FRAC_LO

        LDA     new_ship_xpos_FRAC
        STA     player_xpos_FRAC
        LDA     new_ship_xpos_INT
        STA     player_xpos_INT
        LDA     new_ship_ypos_FRAC
        STA     player_ypos_FRAC
        LDA     new_ship_ypos_INT
        STA     player_ypos_INT
        LDA     calc_player_ypos_INT_HI
        STA     player_ypos_INT_HI
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Particle system
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: create_explosion
\ * Description: <>
\ ******************************************************************************

.create_explosion
{
        JSR     explosion_sound

        LDX     #$08
        LDA     explosion_particle_type
        CMP     #$04						; random debris
        BNE     loop

        LDX     #$03
        LDA     level_tick_counter
        AND     #$01
        STA     explosion_particle_type
        INC     explosion_particle_type
        JSR     rnd

        AND     #$1F
        STA     explosion_angle
		
	.loop
        STX     explosion_particle_count
        JSR     particle_return_free_slot_in_Y

        LDA     explosion_xpos_FRAC
        STA     particles_xpos_FRAC,Y
        LDA     explosion_xpos_INT
        STA     particles_xpos_INT,Y
        LDA     explosion_ypos_INT
        STA     particles_ypos_INT,Y
        LDA     explosion_ypos_INT_HI
        STA     particles_ypos_INT_HI,Y
        LDX     explosion_particle_count
        JSR     rnd

        AND     #$03
        CLC
        ADC     explosion_angle
        AND     #$1F
        TAX
        LDA     angle_to_x_FRAC,X
        STA     explosion_dx_FRAC
        LDA     angle_to_x_INT,X
        STA     explosion_dx_INT
        LDA     angle_to_y_FRAC,X
        STA     explosion_dy_FRAC
        LDA     angle_to_y_INT,X
        STA     explosion_dy_INT
        LDA     explosion_dx_INT
        ROL     A
        PHP
        PHP
        PHP
        PHP
        LDX     #$04
		
	.L249A
        PLP
        ROR     explosion_dx_INT
        ROR     explosion_dx_FRAC
        DEX
        BNE     L249A

        LDA     explosion_dy_INT
        ROL     A
        PHP
        PHP
        PHP
        PHP
        LDX     #$04
		
	.L24AB
        PLP
        ROR     explosion_dy_INT
        ROR     explosion_dy_FRAC
        DEX
        BNE     L24AB

        LDA     #$00
        STA     particles_dx_FRAC,Y
        STA     particles_dx_INT,Y
        STA     particles_dy_FRAC,Y
        STA     particles_dy_INT,Y
        LDA     rnd_B
        AND     #$03
        TAX
        INX
        INX
        PHA
		
	.L24C9
        CLC
        LDA     explosion_dx_FRAC
        ADC     particles_dx_FRAC,Y
        STA     particles_dx_FRAC,Y
        LDA     explosion_dx_INT
        ADC     particles_dx_INT,Y
        STA     particles_dx_INT,Y
        CLC
        LDA     explosion_dy_FRAC
        ADC     particles_dy_FRAC,Y
        STA     particles_dy_FRAC,Y
        LDA     explosion_dy_INT
        ADC     particles_dy_INT,Y
        STA     particles_dy_INT,Y
        DEX
        BNE     L24C9

        PLA
        ROL     A
        ROL     A
        ROL     A
        EOR     #$1F
        STA     explosion_dx_FRAC
        LDA     particles_lifetime,Y
        ROL     A
        LDA     rnd_A
        AND     #$0F
        ROR     A
        ADC     explosion_dx_FRAC
        ADC     #$08
        STA     particles_lifetime,Y
        LDA     explosion_particle_type
        STA     particles_type,Y
        CLC
        LDA     explosion_angle
        ADC     #$04
        AND     #$1F
        STA     explosion_angle
        TYA
        TAX

        JSR     particle_move_index_X
        JSR     particle_move_index_X

        LDX     explosion_particle_count
        DEX
        BEQ     return

        JMP     loop

	.return
        RTS
}

\ ******************************************************************************
\ * Function: particle_return_free_slot_in_Y
\ * Params: none
\ * Returns: Y = next free slot in particle table
\ * Description: <>
\ ******************************************************************************

.particle_return_free_slot_in_Y
{
        LDY     #PARTICLE_table_max

	.L2527
        LDA     particles_lifetime,Y
        AND     #($FF EOR PARTICLE_flag)
        BEQ     return

        DEY
        BNE     L2527

        LDY     #PARTICLE_table_max
		
	.L2533
        LDA     particles_lifetime,Y
        AND     #($FF EOR PARTICLE_flag)
        CMP     #$0A
        BCC     return

        DEY
        BNE     L2533

	.L253F
        BEQ     return
        BNE     L253F

        JSR     rnd
        AND     #$0F
        ADC     #$04
        TAY

	.return
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Level data - landscape / terrain, objects
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Terrain data per level - sets A & B same length C & D same length
\ * Terrain pointers either set to A & B or C & D
\ ******************************************************************************

.terrain_data_level_0_A
        EQUB    $FF,$FF,$AB,$01,$0F,$01,$0C,$01,$FF				; count data?
.terrain_data_level_0_B
		EQUB	$00,$00,$00,$55,$01,$15,$01,$19,$00				; x increment data?
.terrain_data_level_0_C
		EQUB	$FF,$FF,$AB,$01,$09,$01,$FF
.terrain_data_level_0_D
		EQUB	$00,$00,$00,$B7,$FF,$F1,$00

.terrain_data_level_1_A
        EQUB    $FF,$FF,$AF,$01,$0B,$01,$17,$36,$17,$14,$0F,$01,$FF
.terrain_data_level_1_B
		EQUB	$00,$00,$00,$4A,$01,$19,$01,$00,$FF,$00,$01,$14,$00
.terrain_data_level_1_C
		EQUB	$FF,$FF,$AF,$01,$1B,$3A,$11,$15,$18,$FF
.terrain_data_level_1_D
		EQUB	$00,$00,$00,$B4,$FF,$00,$01,$00,$FF,$00

.terrain_data_level_2_A
		EQUB	$FF,$FF,$B9,$01,$50,$0A,$32,$01,$0A,$1E,$01,$0A,$55,$0A,$01,$FF
.terrain_data_level_2_B
		EQUB	$00,$00,$00,$87,$00,$FF,$00,$E2,$FF,$00,$F1,$FF,$00,$01,$15,$00
.terrain_data_level_2_C
		EQUB	$FF,$FF,$B9,$01,$13,$01,$3C,$01,$14,$0A,$01,$3C,$01,$32,$01,$09,$FF
.terrain_data_level_2_D
		EQUB	$00,$00,$00,$B4,$00,$E9,$00,$18,$00,$FF,$EC,$00,$E2,$00,$EC,$FF,$00
		
.terrain_data_level_3_A
        EQUB    $FF,$FF,$A0,$01,$13,$01,$15,$26,$14,$0A,$06,$14,$22,$01,$14,$01,$26,$1C,$24,$0A,$FF,$FF
.terrain_data_level_3_B
		EQUB	$00,$00,$00,$5A,$01,$11,$00,$FF,$00,$01,$00,$FF,$00,$19,$01,$21,$00,$FF,$00,$01,$00,$00
.terrain_data_level_3_C
		EQUB	$FF,$FF,$A0,$01,$67,$01,$12,$18,$01,$84,$18,$14,$01,$FF,$FF
.terrain_data_level_3_D
		EQUB	$00,$00,$00,$8D,$00,$E2,$00,$01,$28,$00,$FF,$00,$F4,$00,$00
		
.terrain_data_level_4_A
		EQUB	$FF,$FF,$A5,$01,$15,$16,$01,$38,$01,$0C,$1C,$01,$28,$14,$01,$56,$14,$0E,$01,$1C,$0C,$01,$1E,$0C,$01,$52,$08,$01,$FF
.terrain_data_level_4_B
		EQUB	$00,$00,$00,$58,$01,$00,$17,$00,$F6,$FF,$00,$0A,$00,$FF,$EC,$00,$01,$00,$F6,$00,$01,$12,$00,$01,$14,$00,$01,$0A,$00
.terrain_data_level_4_C
		EQUB	$FF,$FF,$A5,$01,$64,$01,$0A,$1E,$01,$28,$01,$28,$0A,$01,$22,$20,$2C,$01,$0A,$16,$01,$3E,$10,$1E,$0C,$FF
.terrain_data_level_4_D
		EQUB	$00,$00,$00,$93,$00,$0E,$01,$00,$DC,$00,$08,$00,$FF,$DE,$00,$01,$00,$0A,$01,$00,$10,$00,$01,$00,$FF,$00

.terrain_data_level_5_A
        EQUB    $FF,$FF,$7F,$01,$3E,$01,$50,$28,$01,$0A,$A2,$01,$36,$0D,$14,$36,$0E,$0D,$1F,$0A,$39,$01,$FF
.terrain_data_level_5_B
		EQUB	$00,$00,$00,$4D,$00,$17,$01,$00,$EC,$FF,$00,$EF,$00,$FF,$00,$01,$00,$FF,$00,$FF,$00,$0B,$00
.terrain_data_level_5_C
		EQUB	$FF,$FF,$7F,$01,$2B,$14,$37,$41,$14,$14,$01,$1C,$22,$12,$14,$0A,$32,$01,$27,$2C,$1E,$07,$07,$38,$1C,$23,$01,$16,$01,$FF
.terrain_data_level_5_D
		EQUB	$00,$00,$00,$B7,$FF,$00,$01,$00,$01,$00,$E7,$FF,$00,$01,$00,$FF,$00,$EB,$00,$01,$00,$01,$FF,$00,$FF,$00,$0D,$00,$F1,$00

\ ******************************************************************************
\ * Level object data
\ ******************************************************************************

.level_0_obj_pos_X
        EQUB    $8F,$A0,$6E,$7D
.level_0_obj_pos_Y
        EQUB    $BD,$AB,$B3,$BB
.level_0_obj_pos_Y_EXT
        EQUB    $01,$01,$01,$01
.level_0_obj_type
        EQUB    $05,$06,$04,$00,$FF
.level_0_gun_param
        EQUB    $00,$00,$00,$1E				; bottom 2 bits get looked up into table, next 3 bits are used for something else

.level_1_obj_pos_X
		EQUB	$7F,$64,$8B,$74,$9E
.level_1_obj_pos_Y
        EQUB    $38,$B1,$3B,$14,$0A
.level_1_obj_pos_Y_EXT
        EQUB    $02,$01,$02,$02,$02
.level_1_obj_type
		EQUB	$05,$06,$04,$01,$03,$FF
.level_1_gun_param
        EQUB    $00,$00,$00,$06,$0F

.level_2_obj_pos_X
		EQUB	$4E,$A4,$78,$97,$9D,$A3,$7D,$67,$5D,$3E,$58,$AB,$81
.level_2_obj_pos_Y
		EQUB    $CE,$C3,$B1,$21,$21,$21,$5E,$91,$97,$72,$48,$1E,$0A
.level_2_obj_pos_Y_EXT
        EQUB    $02,$01,$01,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
.level_2_obj_type
        EQUB    $05,$06,$04,$04,$04,$04,$04,$04,$02,$01,$01,$02,$01,$FF
.level_2_gun_param
		EQUB	$00,$00,$00,$00,$00,$00,$00,$00,$1B,$06,$0A,$16,$04

.level_3_obj_pos_X
        EQUB    $8E,$5B,$AC,$AC,$92,$72,$5A,$5A,$78,$6D,$8A,$A2
.level_3_obj_pos_Y
        EQUB    $D9,$40,$51,$87,$57,$D0,$01,$16,$24,$4C,$92,$BA
.level_3_obj_pos_Y_EXT
        EQUB    $02,$02,$02,$02,$02,$01,$02,$02,$02,$02,$02,$02
.level_3_obj_type
        EQUB    $05,$06,$08,$08,$04,$01,$00,$01,$03,$00,$01,$02,$FF
.level_3_gun_param
		EQUB	$00,$00,$00,$00,$00,$06,$06,$06,$12,$1F,$06,$1E

.level_4_obj_pos_X
        EQUB    $A2,$8F,$A4,$98,$7C,$9A,$A0,$68,$69,$6F,$89,$8F,$72,$A2,$86,$5D,$8E,$7B,$AC
.level_4_obj_pos_Y
        EQUB    $8D,$29,$25,$75,$C9,$2B,$2B,$87,$0A,$0A,$35,$35,$0D,$0C,$83,$04,$00,$2F,$63
.level_4_obj_pos_Y_EXT
        EQUB    $03,$02,$03,$03,$01,$02,$02,$02,$03,$03,$03,$03,$02,$02,$02,$03,$03,$03,$03
.level_4_obj_type
        EQUB    $05,$06,$08,$07,$04,$04,$04,$04,$04,$04,$04,$04,$01,$03,$02,$00,$03,$00,$03,$FF
.level_4_gun_param
		EQUB	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$14,$1A,$02,$12,$1E,$19

.level_5_obj_pos_X
		EQUB	$9A,$A9,$A1,$BE,$9A,$C1,$AF,$9B,$A2,$9B,$7B,$AC,$AC,$AC,$CA,$99,$99
.level_5_obj_pos_Y
		EQUB	$E4,$04,$98,$5D,$F8,$57,$BF,$AC,$86,$2E,$1F,$C1,$A8,$67,$3E,$39,$CC
.level_5_obj_pos_Y_EXT
		EQUB	$03,$04,$03,$03,$02,$02,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02,$01
.level_5_obj_type
        EQUB    $05,$06,$07,$08,$04,$04,$02,$01,$01,$03,$01,$02,$03,$02,$03,$01,$03,$FF
.level_5_gun_param
		EQUB	$00,$00,$00,$00,$00,$00,$1A,$06,$09,$12,$06,$16,$12,$1B,$12,$05,$0E

.level_obj_flags										; initialised to $02 at start of level
{
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00
}

.level_obj_plot_at_ptr_LO
{
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00
}

.level_obj_plot_at_ptr_HI
{
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $00,$00,$00,$00
}

\ ******************************************************************************
\ * Function: particles_update_and_draw
\ * Description: <>
\ ******************************************************************************

.particles_update_and_draw
{
        JSR     particles_generate_stars

        LDA     #$00
        STA     particles_L0077
        LDA     #$00
        STA     particles_L0079

        LDX     #$1F
		
	.particle_update_loop_X
        LDA     #$00
        STA     particles_flag1
        LDA     particles_lifetime,X
        BPL     L28D3

        AND     #($FF EOR PARTICLE_flag)
        STA     particles_lifetime,X
        LDA     particles_scraddr_LO,X
        STA     particle_write_ptr
        LDA     particles_scraddr_HI,X
        STA     particle_write_ptr+1
        LDY     #$00
        LDA     particles_pixels_byte,X
        PHA
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
        PLA
        INY
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
		
	.L28D3
        LDY     particles_lifetime,X
        BEQ     particle_update_next_X

        DEY
        TYA
        STA     particles_lifetime,X
        JSR     test_particle_X_close_to_player

        JSR     particle_move_index_X

        LDY     particles_type,X
        LDA     lookup_particle_type_to_pixel_byte,Y
        STA     particle_pixel_byte
        JMP     L28F5

	.particle_update_next_X
        DEX
        BMI     return

        JMP     particle_update_loop_X

	.return
        RTS

	.L28F5
        SEC
        LDA     particles_ypos_INT,X
        SBC     window_ypos_INT
        STA     particles_L0072
        LDA     particles_ypos_INT_HI,X
        SBC     window_ypos_EXT
        BNE     L2938

        LDA     particles_L0072
        CLC
        ADC     terrain_window_y_index
        TAY
        LDA     particles_xpos_INT,X
        CMP     terrain_left_wall,Y				; bullet vs terrain collision detection?
        BCC     L2938

        CMP     terrain_right_wall,Y				; bullet vs terrain collision detection?
        BCS     L2938

        LDA     particles_xpos_INT,X
        SEC
        SBC     window_xpos_INT
        BCC     next_X1

        CMP     #$48
        BCS     next_X1

        STA     particles_L0071
        SEC
        LDA     particles_L0072
        SBC     #$38
        STA     particles_L0072
        CMP     #$11
        BCC     next_X1

        CMP     #$7F
        BCC     L2940

	.next_X1
        JMP     particle_update_next_X

	.L2938
        LDA     #$00
        STA     particles_lifetime,X
        JMP     particle_update_next_X

	.L2940
        LDA     particles_lifetime,X
        ORA     #$80
        STA     particles_lifetime,X
        LDA     particles_L0072
        ROL     A
        STA     particles_L0072
        LDY     #$00
        STY     particle_write_ptr
        AND     #$F8
        ROR     A
        ROR     A
        STA     particle_write_ptr+1
        ROR     A
        ROR     A
        ROR     particle_write_ptr
        ROR     A
        ROR     particle_write_ptr
        ADC     #$38
        ADC     particle_write_ptr+1
        STA     particle_write_ptr+1
        LDY     particles_L0071
        LDA     mult_by_8_LO,Y
        ADC     particle_write_ptr
        STA     particle_write_ptr
        LDA     mult_by_8_HI,Y
        ADC     particle_write_ptr+1
        STA     particle_write_ptr+1
        STA     particles_scraddr_HI,X
        LDA     particles_L0072
        AND     #$07
        CMP     #$07
        BNE     L2981

        LDA     #$06
		
	.L2981
        CLC
        ADC     particle_write_ptr
        STA     particle_write_ptr
        STA     particles_scraddr_LO,X
        LDA     particles_xpos_FRAC,X
        ROL     A
        ROL     A
        ROL     A
        AND     #$03
        TAY
        LDA     particles_xpos_byte_mask,Y
        STA     particle_byte_mask
        AND     particle_pixel_byte
        STA     particle_masked_pixels
        PHA
        STA     particles_pixels_byte,X
        LDY     #$00
        STY     particles_flag1
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
        AND     particle_byte_mask
        CMP     particle_masked_pixels
        BEQ     L29B1

        LDA     #$FF
        STA     particles_flag1
		
	.L29B1
        INY
        PLA
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
        AND     particle_byte_mask
        CMP     particle_masked_pixels
        BEQ     L29C1

        LDA     #$FF
        STA     particles_flag1
		
	.L29C1
        LDA     particles_flag1
        BEQ     next_X2

        LDA     particles_type,X
        CMP     #PARTICLE_type_hostile_bullet
        BNE     L29D1

        LDA     #$81
        STA     particles_lifetime,X
		
	.L29D1
        LDA     particles_type,X
        CMP     #PARTICLE_type_debris
        BEQ     L29E0

        CMP     #$02
        BEQ     L29E0

        LDA     shield_tractor_pressed
        BEQ     next_X2

	.L29E0
        LDA     particles_pixels_byte,X
        PHA
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
        PLA
        DEY
        EOR     (particle_write_ptr),Y
        STA     (particle_write_ptr),Y
        LDA     particles_lifetime,X
        AND     #$7F
        STA     particles_lifetime,X
        LDA     particles_type,X
        CMP     #PARTICLE_type_hostile_bullet
        BCC     next_X2

        LDA     #$00
        STA     particles_lifetime,X

	.next_X2
        JMP     particle_update_next_X
}

\ ******************************************************************************
\ * Function: test_particle_X_close_to_player
\ * Params: X = index into particle table
\ * Returns: plot_ship_collision_detected
\ * Description: <>
\ ******************************************************************************

.test_particle_X_close_to_player
{
        LDA     particles_type,X
        CMP     #PARTICLE_type_hostile_bullet
        BNE     return

        LDA     particles_xpos_INT,X
        SBC     player_xpos_INT
        CMP     #$03
        BCC     return

        CMP     #$06
        BCS     return

        SEC
        LDA     particles_ypos_INT,X
        SBC     player_ypos_INT
        STA     player_to_particle_deltay_INT
        LDA     particles_ypos_INT_HI,X
        SBC     player_ypos_INT_HI
        BNE     return

        LDA     player_to_particle_deltay_INT
        CMP     #$02
        BCC     return

        CMP     #$07
        BCS     return

        LDA     ship_sprite_plotted_flag
        BEQ     return

        LDA     particles_lifetime,X
        AND     #$80
        STA     particles_lifetime,X
        LDA     shield_tractor_pressed
        BNE     return

        LDA     #$FF
        STA     plot_ship_collision_detected

	.return
        RTS
}

\ ******************************************************************************
\ * Particle look up tables
\ ******************************************************************************

.particles_xpos_byte_mask
        EQUB    $CC,$66,$66,$33

.lookup_particle_type_to_pixel_byte
        EQUB    $FF,$FF,$0F

.hostile_bullet_pixel_byte
		EQUB	$F0

\ ******************************************************************************
\ * Function: particle_move_index_X
\ * Params: X = index into particle table
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.particle_move_index_X
{
        CLC
        LDA     particles_xpos_FRAC,X
        ADC     particles_dx_FRAC,X
        STA     particles_xpos_FRAC,X
        LDA     particles_xpos_INT,X
        ADC     particles_dx_INT,X
        STA     particles_xpos_INT,X
        CLC
        LDA     particles_ypos_FRAC,X
        ADC     particles_dy_FRAC,X
        STA     particles_ypos_FRAC,X
        LDA     particles_ypos_INT,X
        ADC     particles_dy_INT,X
        STA     particles_ypos_INT,X
        PHP
        LDA     particles_dy_INT,X
        BMI     L2A80

        LDA     #$00
        JMP     L2A82

	.L2A80
        LDA     #$FF
		
	.L2A82
        PLP
        ADC     particles_ypos_INT_HI,X
        STA     particles_ypos_INT_HI,X
}
\\ Fall through!

.particles_return		; used by above & below functions
{
        RTS
}

\ ******************************************************************************
\ * Function: particles_generate_stars
\ * Description: <>
\ ******************************************************************************

.particles_generate_stars
{
        LDA     window_ypos_EXT
        CMP     #$02
        BCS     particles_return

        LDA     level_tick_counter
        AND     #$01
        BNE     particles_return

        JSR     particle_return_free_slot_in_Y

        JSR     rnd

        ADC     #$64
        STA     particles_ypos_INT,Y
        LDA     #$00
        ADC     #$00
        STA     particles_ypos_INT_HI,Y
        LDA     #$00
        STA     particles_dx_FRAC,Y
        STA     particles_dx_INT,Y
        STA     particles_dy_FRAC,Y
        STA     particles_dy_INT,Y
        LDA     rnd_B
        AND     #$3F
        ADC     window_xpos_INT
        ADC     #$05
        STA     particles_xpos_INT,Y

        LDA     particles_lifetime,Y
        AND     #PARTICLE_flag
        ORA     #PARTICLE_lifetime_star
        STA     particles_lifetime,Y
        LDA     rnd_B
        AND     #$01
        CLC
        ADC     #$01
        STA     particles_type,Y		; stars / debris
        RTS
}

\ ******************************************************************************
\ * Function: level_reset
\ * Description: this happens at level retry
\ ******************************************************************************

.level_reset
{
        JSR     clear_screen_and_init

        LDY     #$1B
        JSR     wait_time_out_Y

\\ Store important ZP vars termporarily

        LDA     midpoint_ypos_INT_HI
        PHA
        LDA     midpoint_ypos_INT
        PHA
        LDA     rnd_B
        PHA
        LDA     rnd_A
        PHA
        LDY     demo_mode_flag

\\ Blank all ZP variables from $9A to $01

        LDX     #$9A
	.clear_zp_game_vars
        LDA     #$00
        STA     L0000,X						; 
        DEX
        BNE     clear_zp_game_vars

\\ Restore important ZP vars

        STY     demo_mode_flag
        PLA
        STA     rnd_A
        PLA
        STA     rnd_B
        PLA
        STA     midpoint_ypos_INT
        PLA
        STA     midpoint_ypos_INT_HI
		
\\ Set various flags & state variables to initialise:

        LDA     #$FF
        STA     level_tick_state
		
        LDX     #$FF
        STX     player_ship_destroyed_flag
        STX     pod_destroying_player_timer
        STX     player_pressed_fire
        STX     planet_countdown_timer
        INX
        STX     pod_attached_flag_2
        LDX     #$0F
        STX     generator_recharge_counter

\\ Lookup correct pointers to reset tables for level:
		
        LDX     level_number
        LDA     level_reset_ptr_table_LO,X
        STA     level_reset_ptr
        LDA     level_reset_ptr_table_HI,X
        STA     level_reset_ptr+1
        LDA     level_reset_ptr2_table_LO,X
        STA     level_reset_ptr2
        LDA     level_reset_ptr2_table_HI,X
        STA     level_reset_ptr2+1
        LDA     level_reset_data_sizes,X
        STA     level_reset_size

\\ Think this code is matching current ship (x,y) position against respawn positions & screen offset:
		
        LDY     #$00
		
	.level_reset_loop
        LDA     (level_reset_ptr2),Y
        SBC     midpoint_ypos_INT
        LDA     (level_reset_ptr),Y
        SBC     midpoint_ypos_INT_HI
        BCS     L2B4B

        INY
        CPY     level_reset_size
        BNE     level_reset_loop

        LDA     #$00
        STA     level_reset_with_pod_flag
		
	.L2B4B
        CPY     #$00
        BEQ     L2B55

        LDA     level_reset_with_pod_flag
        BNE     L2B55

        DEY
		
	.L2B55
        INY
        CPY     level_reset_size
        BNE     L2B5F

        LDA     #$00
        STA     level_reset_with_pod_flag
		
	.L2B5F
        DEY
        CLC

\\ Matched nearest respawn position so set new ship (x,y) coordinates
		
        LDA     (level_reset_ptr),Y
        STA     midpoint_ypos_INT_HI
        TYA
        ADC     level_reset_size
        TAY
        LDA     (level_reset_ptr),Y
        STA     midpoint_ypos_INT
        TYA
        ADC     level_reset_size
        TAY
        LDA     (level_reset_ptr),Y
        STA     window_xpos_INT
        TYA
        ADC     level_reset_size
        TAY
        LDA     (level_reset_ptr),Y
        STA     window_ypos_EXT
        TYA
        ADC     level_reset_size
        TAY
        LDA     (level_reset_ptr),Y
        STA     window_ypos_INT
        TYA
        ADC     level_reset_size
        TAY
        LDA     (level_reset_ptr),Y
        STA     midpoint_xpos_INT

        LDA     #$0E
        STA     top_nibble_index

        LDA     level_reset_with_pod_flag
        BEQ     dont_set_angle_to_pod

        LDX     #$FF
        STX     pod_attached_flag_2
        STX     pod_attached_flag_1

        LDX     #$01						; angle $01 - straight up (+1)
        LDA     gravity_INT
        BPL     L2BA5						; normal gravity

        LDX     #$11						; angle $11 - straight down (+1)

	.L2BA5
        STX     angle_ship_to_pod
		
	.dont_set_angle_to_pod
        LDA     gravity_INT
        BPL     L2BAF

        LDA     #$10						; angle $10 - straight down for reverse gravity
        STA     ship_angle

	.L2BAF
        LDX     level_number
        LDA     level_landscape_colour,X
        LDY     #$02
        JSR     palette_set_colour_Y_to_A	; set default landscape colour

        LDA     level_object_colour,X
        LDY     #$03
        JSR     palette_set_colour_Y_to_A	; set default object colour

        RTS
}

\ ******************************************************************************
\ * Misc level variables / flags
\ ******************************************************************************

.level_number						; level 0 - 5, distinct from mission_number
        EQUB    $00

.reverse_gravity_flag				; inverted every 6 levels
        EQUB    $00

.level_reset_with_pod_flag
        EQUB    $00

\ ******************************************************************************
\ * Function: initialise_level_pointers
\ * Description: <>
\ ******************************************************************************

.initialise_level_pointers
{
        LDA     #$00
        STA     level_reset_with_pod_flag
        LDA     #$32
        STA     generator_recharge_increase
		
        LDX     level_number
        LDA     level_gravity_FRAC_table,X
        STA     gravity_FRAC

        LDA     terrain_left_wall_counter_ptrs_LO,X
        STA     terrain_left_wall_counter_LO
        LDA     terrain_left_wall_increment_ptrs_LO,X
        STA     terrain_left_wall_increment_LO
        LDA     terrain_left_wall_counter_ptrs_HI,X
        STA     terrain_left_wall_counter_HI
        LDA     terrain_left_wall_increment_ptrs_HI,X
        STA     terrain_left_wall_increment_HI
        LDA     terrain_right_wall_counter_ptrs_LO,X
        STA     terrain_right_wall_counter_LO
        LDA     terrain_right_wall_increment_ptrs_LO,X
        STA     terrain_right_wall_increment_LO
        LDA     terrain_right_wall_counter_ptrs_HI,X
        STA     terrain_right_wall_counter_HI
        LDA     terrain_right_wall_increment_ptrs_HI,X
        STA     terrain_right_wall_increment_HI

        LDY     #$00
        LDA     reverse_gravity_flag
        BEQ     normal_gravity

        LDA     gravity_FRAC
        EOR     #$FF
        STA     gravity_FRAC

        LDY     #$FF
		
	.normal_gravity
        STY     gravity_INT
        LDA     #$F0
        ORA     invisible_landscape_flag
        STA     level_line_pixels_byte
        STA     hostile_bullet_pixel_byte

        CLC
        TXA
        ROL     A
        TAX										; level_number *= 2

\\ Modify code to read from address containing current level object data
		
        LDA     level_obj_pos_X_lookup_LO,X
        STA     level_obj_pos_X_addr_LO					; **MODIFIES CODE**
        LDA     level_obj_pos_X_lookup_HI,X
        STA     level_obj_pos_X_addr_HI					; **MODIFIES CODE**

        LDA     level_obj_pos_Y_lookup_LO,X
        STA     level_obj_pos_Y_addr_LO					; **MODIFIES CODE**
        LDA     level_obj_pos_Y_lookup_HI,X
        STA     level_obj_pos_Y_addr_HI					; **MODIFIES CODE**

        LDA     level_obj_pos_Y_EXT_lookup_LO,X
        STA     level_obj_pos_Y_EXT_addr_LO				; **MODIFIES CODE**
        LDA     level_obj_pos_Y_EXT_lookup_HI,X
        STA     level_obj_pos_Y_EXT_addr_HI				; **MODIFIES CODE**

        LDA     level_obj_type_lookup_LO,X
        STA     level_obj_type_addr_LO					; **MODIFIES CODE**
        LDA     level_obj_type_lookup_HI,X
        STA     level_obj_type_addr_HI					; **MODIFIES CODE**

        LDA     level_gun_param_lookup_LO,X
        STA     level_gun_param_addr_LO					; **MODIFIES CODE**
        LDA     level_gun_param_lookup_HI,X
        STA     level_gun_param_addr_HI					; **MODIFIES CODE**

        TXA
        ROR     A										; level_number /= 2
        TAX

        LDX     #$1F									; max objects per level
		
	.initialise_sprite_table_A
        LDA     #$02
        STA     level_obj_flags,X
        DEX
        BPL     initialise_sprite_table_A

        LDX     #$0B
		
	.initialise_obj_tractor_counter
        LDA     #$00
        STA     obj_tractor_counter,X
        DEX
        BPL     initialise_obj_tractor_counter

        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Level reset data - start position of window & player (I think)
\ ******************************************************************************
\ ******************************************************************************

.level_reset_data_sizes
        EQUB    $01,$01,$03,$03,$04,$05			; this is size of tables below (6 bytes per entry)
		
.level_0_reset_data
		EQUB	$01,$91,$56,$01,$24,$6C

.level_1_reset_data
		EQUB	$01,$91,$56,$01,$24,$6C

.level_2_reset_data
		EQUB	$01,$02,$02
		EQUB	$91,$2D,$96
		EQUB    $56,$6F,$32
		EQUB	$01,$01,$02
		EQUB	$24,$AA,$23
		EQUB	$6C,$86,$48

.level_3_reset_data
		EQUB	$01,$01,$02
		EQUB	$91,$E6,$4A
		EQUB	$56,$57,$76
		EQUB	$01,$01,$01
		EQUB	$24,$60,$D8
		EQUB	$6C,$7B,$A1

.level_4_reset_data
		EQUB	$01,$02,$02,$03
		EQUB	$91,$68,$DC,$15
		EQUB	$56,$58,$43,$64
		EQUB	$01,$01,$02,$02
		EQUB	$24,$EE,$66,$9F
		EQUB	$6C,$7B,$6B,$81

.level_5_reset_data
		EQUB	$01,$02,$02,$03,$03
		EQUB	$91,$4B,$D4,$2A,$98
		EQUB	$56,$8C,$82,$6E,$87
		EQUB	$01,$01,$02,$02,$03
		EQUB	$24,$D8,$5A,$B4,$1B
		EQUB	$6C,$A2,$9A,$87,$AE

\ ******************************************************************************
\ * Pointers to level reset data
\ ******************************************************************************

.level_reset_ptr_table_LO											
		EQUB	LO(level_0_reset_data)
		EQUB	LO(level_1_reset_data)
		EQUB	LO(level_2_reset_data)
		EQUB	LO(level_3_reset_data)
		EQUB	LO(level_4_reset_data)
		EQUB	LO(level_5_reset_data)
.level_reset_ptr_table_HI											
		EQUB	HI(level_0_reset_data)
		EQUB	HI(level_1_reset_data)
		EQUB	HI(level_2_reset_data)
		EQUB	HI(level_3_reset_data)
		EQUB	HI(level_4_reset_data)
		EQUB	HI(level_5_reset_data)

.level_reset_ptr2_table_LO											
		EQUB	LO(level_0_reset_data + 1)
		EQUB	LO(level_1_reset_data + 1)
		EQUB	LO(level_2_reset_data + 3)
		EQUB	LO(level_3_reset_data + 3)
		EQUB	LO(level_4_reset_data + 4)
		EQUB	LO(level_5_reset_data + 5)
.level_reset_ptr2_table_HI											
		EQUB	HI(level_0_reset_data + 1)
		EQUB	HI(level_1_reset_data + 1)
		EQUB	HI(level_2_reset_data + 3)
		EQUB	HI(level_3_reset_data + 3)
		EQUB	HI(level_4_reset_data + 4)
		EQUB	HI(level_5_reset_data + 5)

\ ******************************************************************************
\ ******************************************************************************
\ * Gravity values per level
\ ******************************************************************************
\ ******************************************************************************

.level_gravity_FRAC_table
		EQUB	$05,$07,$09,$0B,$0C,$0D			; initialises gravity_FRAC per level

\ ******************************************************************************
\ ******************************************************************************
\ * Pointers to level terrain data tables
\ ******************************************************************************
\ ******************************************************************************

.terrain_left_wall_counter_ptrs_LO							; initialises terrain_left_wall_counter_LO per level
		EQUB	LO(terrain_data_level_0_A)
		EQUB	LO(terrain_data_level_1_A)
		EQUB	LO(terrain_data_level_2_A)
		EQUB	LO(terrain_data_level_3_A)
		EQUB	LO(terrain_data_level_4_A)
		EQUB	LO(terrain_data_level_5_A)
.terrain_left_wall_counter_ptrs_HI							; initialises terrain_left_wall_counter_HI per level
		EQUB	HI(terrain_data_level_0_A)
		EQUB	HI(terrain_data_level_1_A)
		EQUB	HI(terrain_data_level_2_A)
		EQUB	HI(terrain_data_level_3_A)
		EQUB	HI(terrain_data_level_4_A)
		EQUB	HI(terrain_data_level_5_A)

.terrain_left_wall_increment_ptrs_LO						; initialises terrain_left_wall_increment_LO per level
		EQUB	LO(terrain_data_level_0_B)
		EQUB	LO(terrain_data_level_1_B)
		EQUB	LO(terrain_data_level_2_B)
		EQUB	LO(terrain_data_level_3_B)
		EQUB	LO(terrain_data_level_4_B)
		EQUB	LO(terrain_data_level_5_B)
.terrain_left_wall_increment_ptrs_HI						; initialises terrain_left_wall_increment_HI per level
		EQUB	HI(terrain_data_level_0_B)
		EQUB	HI(terrain_data_level_1_B)
		EQUB	HI(terrain_data_level_2_B)
		EQUB	HI(terrain_data_level_3_B)
		EQUB	HI(terrain_data_level_4_B)
		EQUB	HI(terrain_data_level_5_B)

.terrain_right_wall_counter_ptrs_LO							; initialises terrain_right_wall_counter_LO per level
		EQUB	LO(terrain_data_level_0_C)
		EQUB	LO(terrain_data_level_1_C)
		EQUB	LO(terrain_data_level_2_C)
		EQUB	LO(terrain_data_level_3_C)
		EQUB	LO(terrain_data_level_4_C)
		EQUB	LO(terrain_data_level_5_C)
.terrain_right_wall_counter_ptrs_HI							; initialises terrain_right_wall_counter_HI per level
		EQUB	HI(terrain_data_level_0_C)
		EQUB	HI(terrain_data_level_1_C)
		EQUB	HI(terrain_data_level_2_C)
		EQUB	HI(terrain_data_level_3_C)
		EQUB	HI(terrain_data_level_4_C)
		EQUB	HI(terrain_data_level_5_C)

.terrain_right_wall_increment_ptrs_LO						; initialises terrain_right_wall_increment_LO per level
		EQUB	LO(terrain_data_level_0_D)
		EQUB	LO(terrain_data_level_1_D)
		EQUB	LO(terrain_data_level_2_D)
		EQUB	LO(terrain_data_level_3_D)
		EQUB	LO(terrain_data_level_4_D)
		EQUB	LO(terrain_data_level_5_D)
.terrain_right_wall_increment_ptrs_HI						; initialises terrain_right_wall_increment_HI per level
		EQUB	HI(terrain_data_level_0_D)
		EQUB	HI(terrain_data_level_1_D)
		EQUB	HI(terrain_data_level_2_D)
		EQUB	HI(terrain_data_level_3_D)
		EQUB	HI(terrain_data_level_4_D)
		EQUB	HI(terrain_data_level_5_D)

\ ******************************************************************************
\ ******************************************************************************
\ * Palette data for each level
\ *
\ * Colour 0 is always black
\ * Colour 1 is always yellow (ship)
\ * Colour 2 is landscape
\ * Colour 3 is objects (guns, pod, bullets etc.)	
\ ******************************************************************************
\ ******************************************************************************

.level_landscape_colour							; colour 2
        EQUB    $01,$02,$06,$02,$01,$05

.level_object_colour							; colour 3
        EQUB    $02,$01,$02,$05,$05,$06

\ ******************************************************************************
\ * Function: palette_set_colour_Y_to_A
\ * Params: Y = actual colour, A = logical colour
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.palette_set_colour_Y_to_A
{
        ORA     palette_base_mask,Y
        EOR     #$07
        STA     SHEILA_PaletteReg
        ORA     #$10
        STA     SHEILA_PaletteReg
        ORA     #$40
        STA     SHEILA_PaletteReg
        EOR     #$10
        STA     SHEILA_PaletteReg
        RTS
}

.palette_base_mask
        EQUB    $00,$20,$80,$A0

\ ******************************************************************************
\ ******************************************************************************
\ * Level data pointers
\ ******************************************************************************
\ ******************************************************************************

.level_obj_pos_X_lookup_LO
		EQUB	LO(level_0_obj_pos_X)
.level_obj_pos_X_lookup_HI
		EQUB	HI(level_0_obj_pos_X)
		EQUB	LO(level_1_obj_pos_X), HI(level_1_obj_pos_X)
		EQUB	LO(level_2_obj_pos_X), HI(level_2_obj_pos_X)
		EQUB	LO(level_3_obj_pos_X), HI(level_3_obj_pos_X)
		EQUB	LO(level_4_obj_pos_X), HI(level_4_obj_pos_X)
		EQUB	LO(level_5_obj_pos_X), HI(level_5_obj_pos_X)

.level_obj_pos_Y_lookup_LO
		EQUB	LO(level_0_obj_pos_Y)
.level_obj_pos_Y_lookup_HI
		EQUB	HI(level_0_obj_pos_Y)
		EQUB	LO(level_1_obj_pos_Y), HI(level_1_obj_pos_Y)
		EQUB	LO(level_2_obj_pos_Y), HI(level_2_obj_pos_Y)
		EQUB	LO(level_3_obj_pos_Y), HI(level_3_obj_pos_Y)
		EQUB	LO(level_4_obj_pos_Y), HI(level_4_obj_pos_Y)
		EQUB	LO(level_5_obj_pos_Y), HI(level_5_obj_pos_Y)

.level_obj_pos_Y_EXT_lookup_LO
		EQUB	LO(level_0_obj_pos_Y_EXT)
.level_obj_pos_Y_EXT_lookup_HI
		EQUB	HI(level_0_obj_pos_Y_EXT)
		EQUB	LO(level_1_obj_pos_Y_EXT), HI(level_1_obj_pos_Y_EXT)
		EQUB	LO(level_2_obj_pos_Y_EXT), HI(level_2_obj_pos_Y_EXT)
		EQUB	LO(level_3_obj_pos_Y_EXT), HI(level_3_obj_pos_Y_EXT)
		EQUB	LO(level_4_obj_pos_Y_EXT), HI(level_4_obj_pos_Y_EXT)
		EQUB	LO(level_5_obj_pos_Y_EXT), HI(level_5_obj_pos_Y_EXT)

.level_obj_type_lookup_LO
		EQUB	LO(level_0_obj_type)
.level_obj_type_lookup_HI
		EQUB	HI(level_0_obj_type)
		EQUB	LO(level_1_obj_type), HI(level_1_obj_type)
		EQUB	LO(level_2_obj_type), HI(level_2_obj_type)
		EQUB	LO(level_3_obj_type), HI(level_3_obj_type)
		EQUB	LO(level_4_obj_type), HI(level_4_obj_type)
		EQUB	LO(level_5_obj_type), HI(level_5_obj_type)

.level_gun_param_lookup_LO
		EQUB	LO(level_0_gun_param)
.level_gun_param_lookup_HI
		EQUB	HI(level_0_gun_param)
		EQUB	LO(level_1_gun_param), HI(level_1_gun_param)
		EQUB	LO(level_2_gun_param), HI(level_2_gun_param)
		EQUB	LO(level_3_gun_param), HI(level_3_gun_param)
		EQUB	LO(level_4_gun_param), HI(level_4_gun_param)
		EQUB	LO(level_5_gun_param), HI(level_5_gun_param)

\ ******************************************************************************
\ ******************************************************************************
\ * Ship shooting & bullet routines
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: ship_input_fire
\ * Description: <>
\ ******************************************************************************

.ship_input_fire
{
        LDA     pod_destroying_player_timer
        BPL     return

        LDA     shield_tractor_pressed
        BEQ     test_fire_key

        LDA     #$FF
        STA     player_pressed_fire

	.return
        RTS
}

\ ******************************************************************************
\ * Function: test_fire_key
\ * Description: <>
\ ******************************************************************************

.test_fire_key
{
        LDX     #INKEY_return
        JSR     test_inkey

        CPX     #$FF
        BEQ     fire_pressed

        LDA     #$00
        STA     player_pressed_fire
        RTS

	.fire_pressed
        LDA     player_pressed_fire
        BEQ     player_shoot_bullet				
        RTS

	.player_shoot_bullet
        LDX     bullet_index					
        LDA     particles_type,X				
        CMP     #$00
        BNE     create_new_player_bullet		

        LDA     particles_lifetime,X			
        BEQ     create_new_player_bullet		

        RTS
}

\ ******************************************************************************
\ * Function: angle_to_bullet_dx_dy
\ * Description: <>
\ ******************************************************************************

.angle_to_bullet_dx_dy
{
        LDA     angle_to_x_FRAC,Y
        STA     particles_dx_FRAC,X
        LDA     angle_to_x_INT,Y
        STA     particles_dx_INT,X
        LDA     angle_to_y_FRAC,Y
        STA     particles_dy_FRAC,X
        LDA     angle_to_y_INT,Y
        STA     particles_dy_INT,X
        RTS
}

\ ******************************************************************************
\ * Function: create_new_player_bullet
\ * Description: <>
\ ******************************************************************************

.create_new_player_bullet
{
        LDA     #$FF
        STA     player_pressed_fire

        LDA     player_xpos_FRAC
        STA     particles_xpos_FRAC,X
        LDA     player_xpos_INT
        CLC
        ADC     #$04					; player x position offset by $4 - start bullet in centre?
        STA     particles_xpos_INT,X
        LDA     player_ypos_FRAC
        STA     particles_ypos_FRAC,X
        CLC
        LDA     player_ypos_INT
        ADC     #$05					; player y position offset by $5 - start bullet in centre?
        STA     particles_ypos_INT,X
        LDA     player_ypos_INT_HI
        ADC     #$00
        STA     particles_ypos_INT_HI,X
		
        LDY     ship_angle
        JSR     angle_to_bullet_dx_dy

        LDY     #$02
		
	.move_bullet_initial
        CLC
        LDA     particles_xpos_FRAC,X
        ADC     particles_dx_FRAC,X
        STA     particles_xpos_FRAC,X
        LDA     particles_xpos_INT,X
        ADC     particles_dx_INT,X
        STA     particles_xpos_INT,X
        CLC
        LDA     particles_ypos_FRAC,X
        ADC     particles_dy_FRAC,X
        STA     particles_ypos_FRAC,X
        LDA     particles_ypos_INT,X
        ADC     particles_dy_INT,X
        STA     particles_ypos_INT,X
        PHP
        LDA     particles_dy_INT,X
        BMI     bullet_dy_negative

        LDA     #$00
        JMP     bullet_dy_positive

	.bullet_dy_negative
        LDA     #$FF
		
	.bullet_dy_positive
        PLP
        ADC     particles_ypos_INT_HI,X
        STA     particles_ypos_INT_HI,X
        DEY
        BNE     move_bullet_initial

        CLC
        LDA     particles_dx_FRAC,X
        ADC     player_velocityx_FRAC
        STA     particles_dx_FRAC,X
        LDA     particles_dx_INT,X
        ADC     player_velocityx_INT
        STA     particles_dx_INT,X
        CLC
        LDA     particles_dy_FRAC,X
        ADC     player_velocityy_FRAC
        STA     particles_dy_FRAC,X
        LDA     particles_dy_INT,X
        ADC     player_velocityy_INT
        STA     particles_dy_INT,X

        LDA     particles_lifetime,X
        AND     #PARTICLE_flag
        ORA     #PARTICLE_lifetime_bullet
        STA     particles_lifetime,X

        LDA     #PARTICLE_type_player_bullet
        STA     particles_type,X

        INX
        TXA
        AND     #$03					; can only have 4 active bullets
        TAX
        STX     bullet_index
        JSR     own_gun_sound

        RTS
}

\ ******************************************************************************
\ * Appears to be unreachable code? - Maybe particle test code?
\ ******************************************************************************
{		
        LDA     #$28
        STA     particles_xpos_FRAC,X
        STA     particles_xpos_INT,X
        LDA     #$02
        STA     particles_ypos_FRAC,X
        STA     particles_ypos_INT,X
        STA     particles_ypos_INT_HI,X
        LDA     #$01
        STA     particles_dx_FRAC,X
        STA     particles_dx_INT,X
        STA     particles_dy_FRAC,X
        STA     particles_dy_INT,X
        LDA     #$28
        STA     particles_lifetime,X
        LDA     #$00
        STA     particles_type,X
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Random number generator - returns a random byte in A with workspace $3A, 3B
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: rnd
\ * Params: none
\ * Returns: A = random number 0 - 255
\ * Description: <>
\ ******************************************************************************

.rnd
{
        PHP
        LDA     rnd_A
        PHA
        LDA     rnd_B
        PHA
        LDA     rnd_A
        PHA
        CLC
        ROL     A
        ROL     rnd_B
        ROL     A
        ROL     rnd_B
        ORA     #$01
        STA     rnd_A
        CLC
        PLA
        ADC     rnd_A
        STA     rnd_A
        PLA
        ADC     rnd_B
        STA     rnd_B
        PLA
        CLC
        ADC     rnd_B
        STA     rnd_B
        EOR     rnd_A
        PLP
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Tractor beam / pod code?
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: get_distance_ship_to_pod_tractor, get_distance_ship_to_pod_tractor_ext
\ * Returns: A = distance from ship to pod during tractor beam
\ * Description: <>
\ ******************************************************************************

.get_distance_ship_to_pod_tractor
\\ {
        SEC
        LDA     ship_window_ypos_INT
        SBC     pod_window_ypos_INT
        BCS     L2EE7

        EOR     #$FF
        CLC
        ADC     #$01
		
	.L2EE7
        STA     attach_pod_L0089
        LDA     ship_window_xpos_FRAC
        SEC
        SBC     pod_window_xpos_FRAC
        STA     tractor_beam_L0072
        LDA     ship_window_xpos_INT
        SBC     pod_window_xpos_INT
        BVS     return_max_distance

        TAY
        AND     #$E0
        BEQ     L2EFF

        CMP     #$E0
        BNE     return_max_distance

	.L2EFF
        TYA
        ROL     tractor_beam_L0072
        ROL     A
        ROL     tractor_beam_L0072
        ROL     A
        BPL     L2F0D

        EOR     #$FF
        CLC
        ADC     #$01
		
	.L2F0D
        STA     attach_pod_L0088

.get_distance_ship_to_pod_tractor_ext
        LDA     attach_pod_L0088
        CMP     attach_pod_L0089
        BCS     L2F1B

        LDY     attach_pod_L0089
        STA     attach_pod_L0089
        STY     attach_pod_L0088
	.L2F1B
        LDA     attach_pod_L0089
        CLC
        ADC     attach_pod_L0088
        BCS     return_max_distance

        ADC     attach_pod_L0088
        BCS     return_max_distance

        ADC     attach_pod_L0088
        BCS     return_max_distance

        BCC     return_distance

	.return_max_distance
        LDA     #$FF
		
	.return_distance
        RTS
\\ }

\ ******************************************************************************
\ * Storage for previous address of jump routine
\ ******************************************************************************

.old_jmp_fn_LO
        EQUB    $00
.old_jmp_fn_HI
        EQUB    $00

\ ******************************************************************************
\ * Function: draw_line
\ * Params: L008A, L008B, L0088, L0089
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.draw_line
{
        SEC
        LDA     draw_line_end_x
        SBC     draw_line_start_x
        BCS     L2F52

		\\ This swaps L0088 & L008A and L0089 & L008B
		\\ to ensure they are the right way around
		
        EOR     #$FF
        ADC     #$01
        PHA
        LDA     draw_line_start_x
        PHA
        LDA     draw_line_end_x
        STA     draw_line_start_x
        PLA
        STA     draw_line_end_x
        LDA     draw_line_start_y
        PHA
        LDA     draw_line_end_y
        STA     draw_line_start_y
        PLA
        STA     draw_line_end_y
        PLA
		
	.L2F52
        STA     pixels_ptr_pixel_byte
        STA     draw_line_L0075
        LDA     #LO(pixels_ptr_increment)
        STA     old_jmp_fn_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_increment)
        STA     old_jmp_fn_HI						; **MODIFIES CODE**
        LDA     draw_line_end_y
        CMP     draw_line_start_y
        BCS     L2F70

        LDA     #LO(pixels_ptr_decrement)
        STA     old_jmp_fn_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_decrement)
        STA     old_jmp_fn_HI						; **MODIFIES CODE**
		
	.L2F70
        JSR     calculate_pixels_ptr

        LDA     #LO(pixels_ptr_add_7)
        STA     plot_line_bresenham_1_addr_LO			; **MODIFIES CODE**
        STA     plot_line_bresenham_2_addr_LO			; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_add_7)
        STA     plot_line_bresenham_1_addr_HI			; **MODIFIES CODE**
        STA     plot_line_bresenham_2_addr_HI			; **MODIFIES CODE**
        SEC
        LDA     draw_line_end_y
        SBC     draw_line_start_y
        BCS     L2F8E

        EOR     #$FF
        ADC     #$01
		
	.L2F8E
        STA     draw_line_L0071
        STA     draw_line_L0076
        CMP     draw_line_L0075
        BCC     L2FAD

        PHA
        LDA     draw_line_L0075
        STA     draw_line_L0076
        PLA
        STA     draw_line_L0075
        LDA     old_jmp_fn_LO
        STA     plot_line_bresenham_1_addr_LO			; **MODIFIES CODE**
        LDA     old_jmp_fn_HI
        STA     plot_line_bresenham_1_addr_HI			; **MODIFIES CODE**
        JMP     L2FB9

	.L2FAD
        LDA     old_jmp_fn_LO
        STA     plot_line_bresenham_2_addr_LO			; **MODIFIES CODE**
        LDA     old_jmp_fn_HI
        STA     plot_line_bresenham_2_addr_HI			; **MODIFIES CODE**
	
	.L2FB9
        LDA     draw_line_L0075
        CLC
        ROR     A
        STA     draw_line_L0078
        LDX     draw_line_L0075
        INX
		
        JMP     plot_line_pixels
}

\ ******************************************************************************
\ * Functions: plot_line_bresenham_1, plot_line_pixels
\ * Description: X = ?
\ ******************************************************************************

.plot_line_bresenham_1
\\ {
        JSR     pixels_ptr_add_7						; **SELF-MODIFIED CODE**
        plot_line_bresenham_1_addr_LO   = plot_line_bresenham_1+1
        plot_line_bresenham_1_addr_HI   = plot_line_bresenham_1+2

        LDA     draw_line_L0078
        CLC
        ADC     draw_line_L0076
        BCS     plot_line_bresenham_2

        CMP     draw_line_L0075
        BCS     plot_line_bresenham_2

        STA     draw_line_L0078
\\ }
\\ Fall through!

.plot_line_pixels
{
        LDY     pixels_ptr_mask_index
        LDA     pixel_masks_1,Y
        AND     plot_line_pixels_byte
        LDY     #$00
        EOR     (plot_pixels_ptr),Y
        STA     (plot_pixels_ptr),Y
        DEX
        BNE     plot_line_bresenham_1

        RTS
}

\ ******************************************************************************
\ * Functions: plot_line_bresenham_2
\ * Description: <>
\ ******************************************************************************

.plot_line_bresenham_2
{
        SBC     draw_line_L0075
        STA     draw_line_L0078
}
\\ Fall through!!
		
.plot_line_bresenham_2_JSR_label
\\ {
        JSR     landscape_increment_draw_addr			; **SELF-MODIFIED CODE**
        plot_line_bresenham_2_addr_LO   = plot_line_bresenham_2_JSR_label+1
        plot_line_bresenham_2_addr_HI   = plot_line_bresenham_2_JSR_label+2
        JMP     plot_line_pixels
\\ }

\ ******************************************************************************
\ * Function: calculate_pixels_ptr
\ * Inputs: draw_line_start_x, draw_line_start_x
\ * Description: <>
\ ******************************************************************************

.calculate_pixels_ptr
{
        LDA     #$00
        STA     plot_pixels_ptr
        STA     pixels_ptr_temp_L0079
        LDA     draw_line_start_y
        CLC
        AND     #$F8
        ROR     A
        ROR     A
        STA     plot_pixels_ptr+1
        ROR     A
        ROR     A
        ROR     plot_pixels_ptr
        ROR     A
        ROR     plot_pixels_ptr
        ADC     #$38
        ADC     plot_pixels_ptr+1
        STA     plot_pixels_ptr+1
        LDA     draw_line_start_x
        AND     #$FC
        ROL     A
        ROL     pixels_ptr_temp_L0079
        ADC     plot_pixels_ptr
        STA     plot_pixels_ptr
        LDA     pixels_ptr_temp_L0079
        ADC     plot_pixels_ptr+1
        STA     plot_pixels_ptr+1
        LDA     draw_line_start_y
        AND     #$07
        ADC     plot_pixels_ptr
        STA     plot_pixels_ptr
        LDA     draw_line_start_x
        AND     #$03
        STA     pixels_ptr_mask_index
        RTS
}

\ ******************************************************************************
\ * Function: plot_teleport_effect_step_horizontal
\ * Description: <>
\ ******************************************************************************

.plot_teleport_effect_step_horizontal
        JMP     pixels_ptr_add_7							; **SELF-MODIFIED CODE**
        jump_fn_1_addr_LO   = plot_teleport_effect_step_horizontal+1
        jump_fn_1_addr_HI   = plot_teleport_effect_step_horizontal+2

\ ******************************************************************************
\ * Function: plot_teleport_effect_step_vertical
\ * Description: <>
\ ******************************************************************************

.plot_teleport_effect_step_vertical
        JMP     pixels_ptr_increment						; **SELF-MODIFIED CODE**
        jump_fn_2_addr_LO   = plot_teleport_effect_step_vertical+1
        jump_fn_2_addr_HI   = plot_teleport_effect_step_vertical+2

\ ******************************************************************************
\ * Function: plot_teleport_effect_3
\ * Description: <>
\ ******************************************************************************

.plot_teleport_effect_3
{
        LDA     plot_pixels_ptr
        PHA
        LDA     plot_pixels_ptr+1
        PHA
        LDA     pixels_ptr_mask_index
        PHA
        LDX     teleport_L0086
		
	.L303D
        JSR     plot_teleport_effect_step_horizontal

        DEX
        BNE     L303D

        LDA     teleport_L0086
        STA     teleport_L007B
		
	.L3047
        LDA     plot_pixels_ptr
        PHA
        LDA     plot_pixels_ptr+1
        PHA
        LDX     #$08
		
	.L304F
        JSR     plot_teleport_pixels

        JSR     plot_teleport_effect_step_vertical

        DEX
        BNE     L304F

        PLA
        STA     plot_pixels_ptr+1
        PLA
        STA     plot_pixels_ptr
        LDX     #$08
		
	.L3060
        JSR     plot_teleport_effect_step_horizontal

        DEX
        BNE     L3060

        DEC     teleport_L007B
        BNE     L3047

        PLA
        STA     pixels_ptr_mask_index
        PLA
        STA     plot_pixels_ptr+1
        PLA
        STA     plot_pixels_ptr
        RTS
}

\ ******************************************************************************
\ * Function: plot_teleport_pixels
\ * Description: <>
\ ******************************************************************************

.plot_teleport_pixels
{
        LDY     pixels_ptr_mask_index
        LDA     pixel_masks_1,Y
        AND     pixels_ptr_pixel_byte
        LDY     #$00
        EOR     (plot_pixels_ptr),Y
        STA     (plot_pixels_ptr),Y
        RTS
}

\ ******************************************************************************
\ * Function: plot_teleport_effect_1
\ * Description: <>
\ ******************************************************************************

.plot_teleport_effect_1
{
        LDA     #$0F
        STA     pixels_ptr_pixel_byte
        LDA     old_plot_pixels_ptr
        STA     plot_pixels_ptr
        LDA     old_plot_pixels_ptr+1
        STA     plot_pixels_ptr+1
        LDA     old_pixels_ptr_mask_index
        STA     pixels_ptr_mask_index
        JSR     plot_teleport_effect_2

        LDA     #$FF
        STA     pixels_ptr_pixel_byte
        LDA     teleport_effect_L0082
        STA     plot_pixels_ptr
        LDA     teleport_effect_L0083
        STA     plot_pixels_ptr+1
        BEQ     return

        LDA     current_obj_visible_flag
        STA     pixels_ptr_mask_index
        JSR     plot_teleport_effect_2

	.return
        RTS
}

\ ******************************************************************************
\ * Function: plot_teleport_effect_2
\ * Description: <>
\ ******************************************************************************

.plot_teleport_effect_2
{
        LDA     #LO(pixels_ptr_add_7)
        STA     jump_fn_1_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_add_7)
        STA     jump_fn_1_addr_HI						; **MODIFIES CODE**
        LDA     #LO(pixels_ptr_increment)
        STA     jump_fn_2_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_increment)
        STA     jump_fn_2_addr_HI						; **MODIFIES CODE**
        JSR     plot_teleport_effect_3

        LDA     #LO(pixels_ptr_sbc_8)
        STA     jump_fn_1_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_sbc_8)
        STA     jump_fn_1_addr_HI						; **MODIFIES CODE**
        LDX     #$09
		
	.loop_1
        JSR     pixels_ptr_sbc_8

        DEX
        BNE     loop_1

        JSR     plot_teleport_effect_3

        LDA     #LO(pixels_ptr_decrement)
        STA     jump_fn_1_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_decrement)
        STA     jump_fn_1_addr_HI						; **MODIFIES CODE**
        LDA     #LO(pixels_ptr_add_7)
        STA     jump_fn_2_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_add_7)
        STA     jump_fn_2_addr_HI						; **MODIFIES CODE**
        JSR     pixels_ptr_add_7

        JSR     pixels_ptr_decrement

        JSR     plot_teleport_effect_3

        LDA     #LO(pixels_ptr_increment)
        STA     jump_fn_1_addr_LO						; **MODIFIES CODE**
        LDA     #HI(pixels_ptr_increment)
        STA     jump_fn_1_addr_HI						; **MODIFIES CODE**
        LDX     #$09
		
	.loop_2
        JSR     pixels_ptr_increment

        DEX
        BNE     loop_2

        JSR     plot_teleport_effect_3
        RTS
}

\ ******************************************************************************
\ * Function: pixels_ptr_add_7
\ * Description: <>
\ ******************************************************************************

.pixels_ptr_add_7
{
        LDY     pixels_ptr_mask_index
        INY
        CPY     #$04
        BNE     return

        LDY     #$00
        LDA     plot_pixels_ptr
        ADC     #$07
        STA     plot_pixels_ptr
        BCC     return

        INC     plot_pixels_ptr+1

	.return
        STY     pixels_ptr_mask_index
        RTS
}

\ ******************************************************************************
\ * Function: pixels_ptr_sbc_8
\ * Description: <>
\ ******************************************************************************

.pixels_ptr_sbc_8
{
        DEC     pixels_ptr_mask_index
        BMI     L3125
        RTS

	.L3125
        LDY     #$03
        STY     pixels_ptr_mask_index
        SEC
        LDA     plot_pixels_ptr
        SBC     #$08
        STA     plot_pixels_ptr
        BCS     return

        DEC     plot_pixels_ptr+1
		
	.return
        RTS
}

\ ******************************************************************************
\ * Function: pixels_ptr_increment
\ * Description: <>
\ ******************************************************************************

.pixels_ptr_increment
{
        INC     plot_pixels_ptr
        LDA     plot_pixels_ptr
        AND     #$07
        BEQ     L313E
        RTS

	.L313E
        DEC     plot_pixels_ptr
        CLC
        LDA     plot_pixels_ptr
        ADC     #$39
        STA     plot_pixels_ptr
        LDA     plot_pixels_ptr+1
        ADC     #$02
        STA     plot_pixels_ptr+1
        RTS
}

\ ******************************************************************************
\ * Function: pixels_ptr_decrement
\ * Description: <>
\ ******************************************************************************

.pixels_ptr_decrement
{
        DEC     plot_pixels_ptr
        LDA     plot_pixels_ptr
        AND     #$07
        CMP     #$07
        BEQ     L3159
        RTS

	.L3159
        INC     plot_pixels_ptr
        LDA     plot_pixels_ptr
        SBC     #$39
        STA     plot_pixels_ptr
        LDA     plot_pixels_ptr+1
        SBC     #$02
        STA     plot_pixels_ptr+1
        RTS
}

\ ******************************************************************************
\ * Function: draw_new_line
\ * Description: <>
\ ******************************************************************************

.draw_new_line
{
        LDA     pod_destroying_player_timer
        BPL     L3170

        LDA     pod_attached_flag_1
        BNE     L3175

	.L3170
        LDA     pod_line_exists_flag
        BNE     L3175
        RTS

	.L3175
        LDA     #$FF
        STA     line_drawn_flag
        JSR     calculate_line_coordinates

        LDA     level_line_pixels_byte
        STA     plot_line_pixels_byte
        JMP     draw_line
}

\ ******************************************************************************
\ * Function: calculate_line_coordinates
\ * Description: <>
\ ******************************************************************************

.calculate_line_coordinates
{
        CLC
        LDA     ship_window_ypos_INT
        ADC     #$0A
        STA     draw_line_start_y
        STA     old_draw_line_start_y
        LDA     pod_window_ypos_INT
        ADC     #$0A
        STA     draw_line_end_y
        STA     old_draw_line_end_y
        LDA     ship_window_xpos_INT
        ADC     #$04
        ROL     ship_window_xpos_FRAC
        ROL     A
        ROL     ship_window_xpos_FRAC
        ROL     A
        STA     draw_line_start_x
        STA     old_draw_line_start_x
        LDA     pod_window_xpos_INT
        ADC     #$04
        ROL     pod_window_xpos_FRAC
        ROL     A
        ROL     pod_window_xpos_FRAC
        ROL     A
        STA     draw_line_end_x
        STA     old_draw_line_end_x
        RTS
}

\ ******************************************************************************
\ * Function: erase_old_line
\ * Params: none
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.erase_old_line
{
        LDA     line_drawn_flag
        BNE     draw_old_line

        RTS

	.draw_old_line
        LDA     #$00
        STA     line_drawn_flag

        LDA     old_draw_line_start_x
        STA     draw_line_start_x
        LDA     old_draw_line_end_x
        STA     draw_line_end_x
        LDA     old_draw_line_start_y
        STA     draw_line_start_y
        LDA     old_draw_line_end_y
        STA     draw_line_end_y
        LDA     level_line_pixels_byte
        STA     plot_line_pixels_byte
        JSR     draw_line

        RTS
}

.level_line_pixels_byte
        EQUB    $FF

\ ******************************************************************************
\ * Function: tick_fuel_pickup_draw_beams
\ * Description: <>
\ ******************************************************************************

.tick_fuel_pickup_draw_beams
{
        LDA     fuel_beam_position_flag
        BEQ     L31E6

        LDX     fuel_beam_start_x
        LDY     fuel_beam_start_y
        JSR     draw_beams

        LDA     #$00
        STA     fuel_beam_position_flag
		
	.L31E6
        LDA     collecting_fuel_flag
        BNE     L31EB

	.return
        RTS

	.L31EB
        JSR     add_fuel

        LDA     level_tick_counter
        ROR     A
        BCC     return

        LDA     ship_window_ypos_INT
        CLC
        ADC     #$14
        STA     fuel_beam_start_y
        TAY
        LDA     ship_window_xpos_INT
        ROL     ship_window_xpos_FRAC
        ROL     A
        ROL     ship_window_xpos_FRAC
        ROL     A
        STA     fuel_beam_start_x
        TAX
        LDA     #$01
        STA     fuel_beam_position_flag
        JMP     draw_beams

	.draw_beams
        TXA
        STA     draw_line_start_x
        CLC
        ADC     #$0A
        STA     draw_line_end_x
        TYA
        STA     draw_line_end_y
        ADC     #$1E
        STA     draw_line_start_y
        LDA     #$0F
        STA     plot_line_pixels_byte
        JSR     draw_line

        CLC
        LDA     draw_line_end_x
        ADC     #$0C
        STA     draw_line_end_x
        ADC     #$08
        STA     draw_line_start_x
        JMP     draw_line
}

.fuel_beam_start_x
        EQUB    $00
.fuel_beam_start_y
        EQUB    $00

\ ******************************************************************************
\ * Function: do_teleport_animation
\ * Description: <>
\ ******************************************************************************

.do_teleport_animation
{
        LDA     #$00
        STA     teleport_L0086
		
	.L3239
        INC     teleport_L0086
        JSR     plot_teleport_effect_1

        JSR     L325B

        LDA     teleport_L0086
        CMP     #$06
        BNE     L3239

	.L3247
        JSR     L3255
        JSR     L3255

        JSR     plot_teleport_effect_1

        DEC     teleport_L0086
        BNE     L3247
        RTS

	.L3255
        LDA     teleport_appear_or_disappear
        BEQ     L3261
        BNE     go_to_draw

	.L325B
        LDA     teleport_appear_or_disappear
        BNE     L3261
        BEQ     go_to_draw

	.L3261
        LDA     teleport_L0086
        CMP     #$03
        BCS     go_to_draw

        LDX     #$00
        STX     plot_ship_collision_detected
        STX     pod_line_exists_flag
        STX     pod_attached_flag_1

	.go_to_draw
        JMP     draw_player_timed_to_vsync
}

\ ******************************************************************************
\ * Functions: player_teleport_appear, player_entered_orbit, player_teleport
\ * Description: <>
\ ******************************************************************************

.player_teleport_appear
{
        LDA     #$00
        STA     teleport_appear_or_disappear
        BEQ     player_teleport
}
\\ Unreachable!
		
.player_entered_orbit
{
        JSR     enter_orbit_sound

        LDA     #$FF
        STA     teleport_appear_or_disappear
}
\\ Fall through!

.player_teleport
{
        LDA     pod_line_exists_flag
        PHA
        LDA     plot_ship_collision_detected
        PHA
        LDA     pod_attached_flag_1
        PHA
        LDX     #$FF
        STX     plot_ship_collision_detected
        INX
        STX     pod_line_exists_flag
        STX     pod_attached_flag_1
        JSR     draw_player_timed_to_vsync

        JSR     calculate_line_coordinates
        JSR     calculate_pixels_ptr
        JSR     pixels_ptr_offset_diagonal_by_4

        LDA     plot_pixels_ptr
        STA     old_plot_pixels_ptr
        LDA     plot_pixels_ptr+1
        STA     old_plot_pixels_ptr+1
        LDA     pixels_ptr_mask_index
        STA     old_pixels_ptr_mask_index
        LDA     draw_line_end_x
        STA     draw_line_start_x
        LDA     draw_line_end_y
        STA     draw_line_start_y
        JSR     calculate_pixels_ptr

        JSR     pixels_ptr_offset_diagonal_by_4

        LDA     plot_pixels_ptr
        STA     teleport_effect_L0082
        LDA     plot_pixels_ptr+1
        STA     teleport_effect_L0083
        LDA     pixels_ptr_mask_index
        STA     current_obj_visible_flag
        PLA
        PHA
        BNE     L32CB

        LDA     #$00
        STA     teleport_effect_L0083
		
	.L32CB
        JSR     do_teleport_animation

        PLA
        STA     pod_attached_flag_1
        PLA
        STA     plot_ship_collision_detected
        PLA
        STA     pod_line_exists_flag
        RTS
}

\ ******************************************************************************
\ * Function: pixels_ptr_offset_diagonal_by_4
\ * Description: <>
\ ******************************************************************************

.pixels_ptr_offset_diagonal_by_4
{
        LDX     #$04
		
	.loop
        JSR     pixels_ptr_add_7
        JSR     pixels_ptr_decrement

        DEX
        BNE     loop

        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Sound routines
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: explosion_sound
\ * Description: <>
\ ******************************************************************************

.explosion_sound
{
        LDA     #$1F
        STA     sound_timer

        LDX     #LO(sound_params_explosion_1)
        JSR     make_sound

        LDX     #LO(sound_params_explosion_2)
        JMP     make_sound
}

\ ******************************************************************************
\ * Function: run_engine
\ * Description: <>
\ ******************************************************************************

.run_engine
\\ {
        LDA     shield_tractor_pressed
        BNE     run_engine_return

        LDA     #$05
        STA     sound_param_engine_pitch

.run_engine_ext
        LDA     sound_timer
        BNE     run_engine_return

        LDX     #LO(sound_params_engine)
        JSR     make_sound

	.run_engine_return
        LDA     #$02
        STA     sound_param_engine_pitch
        RTS
\\ }

\ ******************************************************************************
\ * Function: own_gun_sound
\ * Description: <>
\ ******************************************************************************

.own_gun_sound
{
        LDX     #LO(sound_params_own_gun)
        JMP     make_sound
}

\ ******************************************************************************
\ * Function: hostile_gun_sound
\ * Description: <>
\ ******************************************************************************

.hostile_gun_sound
{
        LDX     #LO(sound_params_hostile_gun)
        JMP     make_sound
}

\ ******************************************************************************
\ * Function: collect_pod_fuel_sound
\ * Description: <>
\ ******************************************************************************

.collect_pod_fuel_sound
{
        LDX     #LO(sound_params_collect_1)
        JSR     make_sound

        LDX     #LO(sound_params_collect_2)
        JSR     make_sound

        LDX     #LO(sound_params_collect_1)
        JMP     make_sound
}

\ ******************************************************************************
\ * Functions: make_sound, make_sound_ext
\ * Params: X = address of sound params LO byte, Y = address of sound params HI byte
\ * Returns: none
\ * Description: <>
\ ******************************************************************************

.make_sound
\\ {
        LDY     #HI(sound_params_page)

.make_sound_ext
        LDA     mute_sound_flag
        BNE     sound_return

        LDA     demo_mode_flag
        BNE     sound_return

        LDA     #$07
        JMP     OSWORD
\\ }

\ ******************************************************************************
\ * Function: countdown_sound
\ * Description: <>
\ ******************************************************************************

.countdown_sound
{
        LDX     #LO(sound_params_collect_2)
        JSR     make_sound

        LDX     #LO(sound_params_countdown)
        JMP     make_sound
}

\ ******************************************************************************
\ * Function: enter_orbit_sound
\ * Description: <>
\ ******************************************************************************

.enter_orbit_sound
{
        LDX     #LO(sound_params_enter_orbit)
        LDY     #HI(sound_params_enter_orbit)
        JMP     make_sound_ext
}

\ ******************************************************************************
\ * Function: update_sound_timer
\ * Description: <>
\ ******************************************************************************

.update_sound_timer
{
        LDA     sound_timer
        BEQ     sound_return
        DEC     sound_timer
}
\\ Fall through!
		
.sound_return
{
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Sprite data
\ ******************************************************************************
\ ******************************************************************************
		
.obj_sprite_data_A_gun_up_right				; gun up right
        EQUB    $88,$10,$18,$80,$08,$10,$18,$80
        EQUB    $10,$18,$80,$10,$18,$20,$80,$08
        EQUB    $18,$20,$90,$18,$20,$90,$18,$20
        EQUB    $98,$20,$98,$20,$A0,$A0,$A0,$A0
        EQUB    $A0,$FF
.obj_sprite_data_B_gun_up_right
		EQUB	$66,$77,$88,$11,$99,$88
        EQUB    $66,$66,$66,$11,$88,$11,$88,$88
        EQUB    $FF,$FF,$66,$88,$EE,$11,$88,$11
        EQUB    $88,$66,$66,$11,$11,$11,$99,$99
        EQUB    $55,$55,$33,$FF

.obj_sprite_data_A_gun_down_right			; gun down right
		EQUB	$20,$A0,$A0,$A0
        EQUB    $A0,$98,$20,$98,$20,$90,$18,$20
        EQUB    $90,$18,$20,$80,$08,$18,$20,$80
        EQUB    $10,$18,$20,$80,$10,$18,$80,$08
        EQUB    $10,$18,$88,$10,$18,$FF
.obj_sprite_data_B_gun_down_right
		EQUB	$33,$55
        EQUB    $55,$99,$99,$11,$11,$66,$11,$11
        EQUB    $88,$66,$EE,$11,$88,$FF,$FF,$66
        EQUB    $88,$88,$11,$88,$88,$66,$66,$11
        EQUB    $11,$99,$88,$66,$66,$77,$88,$FF

.obj_sprite_data_A_gun_up_left				; gun up left
        EQUB    $88,$10,$18,$88,$10,$18,$20,$88
        EQUB    $10,$20,$80,$08,$10,$20,$80,$08
        EQUB    $18,$20,$80,$08,$10,$80,$08,$10
        EQUB    $80,$08,$80,$08,$80,$80,$80,$80
        EQUB    $80,$FF
.obj_sprite_data_B_gun_up_left
		EQUB	$11,$EE,$66,$66,$11,$99
        EQUB    $88,$88,$66,$66,$11,$11,$88,$11
        EQUB    $11,$66,$FF,$FF,$11,$88,$77,$66
        EQUB    $11,$88,$88,$66,$88,$88,$99,$99
        EQUB    $AA,$AA,$CC,$FF

.obj_sprite_data_A_gun_down_left			; gun down left
        EQUB    $00,$80,$80,$80,$80,$80,$08,$80
        EQUB    $08,$80,$08,$10,$80,$08,$10,$80
        EQUB    $08,$18,$20,$80,$08,$10,$20,$88
        EQUB    $10,$20,$88,$10,$18,$20,$88,$10
        EQUB    $18,$FF
.obj_sprite_data_B_gun_down_left
        EQUB    $CC,$AA,$AA,$99,$99,$88,$88,$88
        EQUB    $66,$66,$11,$88,$11,$88,$77,$11
        EQUB    $66,$FF,$FF,$11,$11,$88,$11,$88
        EQUB    $66,$66,$66,$11,$99,$88,$11,$EE
        EQUB    $66,$FF
		
.obj_sprite_data_A_fuel						; fuel
		EQUB	$00,$08,$10,$18,$80,$18
        EQUB    $80,$18,$80,$08,$10,$18,$80,$08
        EQUB    $10,$18,$80,$08,$10,$18,$80,$08
        EQUB    $10,$18,$80,$08,$10,$18,$80,$18
        EQUB    $80,$18,$80,$08,$10,$18,$88,$10
        EQUB    $80,$08,$10,$18,$80,$18,$FF
.obj_sprite_data_B_fuel
		EQUB	$01
        EQUB    $0F,$0F,$08,$06,$06,$08,$01,$38
        EQUB    $50,$60,$81,$28,$50,$40,$81,$38
        EQUB    $50,$60,$81,$28,$50,$40,$81,$28
        EQUB    $70,$60,$C1,$08,$01,$06,$06,$01
        EQUB    $0F,$0F,$08,$88,$11,$11,$88,$11
        EQUB    $88,$11,$88,$FF

.obj_sprite_data_A_pod_stand				; pod & stand
		EQUB	$90,$88,$10,$18
        EQUB    $88,$18,$88,$18,$88,$18,$88,$18
        EQUB    $88,$18,$88,$18,$88,$18,$88,$10
        EQUB    $18,$90,$88,$18,$88,$10,$18,$88
        EQUB    $18,$88,$10,$18,$90,$90,$90,$88
        EQUB    $10,$FF
.obj_sprite_data_B_pod_stand
		EQUB	$EE,$33,$11,$88,$44,$44
        EQUB    $44,$44,$88,$22,$88,$22,$88,$22
        EQUB    $44,$44,$44,$44,$33,$11,$88,$EE
        EQUB    $02,$08,$05,$0F,$04,$04,$04,$03
        EQUB    $01,$08,$0A,$0A,$0A,$01,$01,$FF

.obj_sprite_data_A_generator				; generator
        EQUB    $08,$10,$18,$88,$18,$20,$80,$08
        EQUB    $18,$20,$80,$20,$80,$20,$80,$20
        EQUB    $80,$20,$80,$20,$80,$20,$80,$20
        EQUB    $80,$20,$80,$20,$80,$20,$80,$08
        EQUB    $10,$18,$20,$80,$20,$80,$20,$80
        EQUB    $20,$80,$20,$FF
.obj_sprite_data_B_generator
		EQUB	$01,$0F,$08,$06
        EQUB    $06,$EE,$01,$08,$01,$AA,$02,$AA
        EQUB    $04,$AA,$04,$AA,$08,$AB,$08,$AB
        EQUB    $08,$AB,$08,$AB,$04,$AA,$04,$AA
        EQUB    $02,$AA,$FF,$FF,$FF,$FF,$BB,$88
        EQUB    $11,$B8,$11,$B8,$11,$B8,$11,$FF

.obj_sprite_data_A_door_switch_right		; door switch right
        EQUB    $80,$80,$08,$88,$88,$88,$88,$88
        EQUB    $88,$88,$88,$88,$88,$80,$08,$80
        EQUB    $FF
.obj_sprite_data_B_door_switch_right
		EQUB	$0E,$01,$08,$04,$02,$02,$01
        EQUB    $01,$01,$01,$02,$02,$04,$01,$08
        EQUB    $0E

.obj_sprite_data_A_door_switch_left			; door switch left
		EQUB	$88,$80,$08,$80,$80,$80,$80
        EQUB    $80,$80,$80,$80,$80,$80,$80,$08
        EQUB    $88,$FF
.obj_sprite_data_B_door_switch_left
		EQUB	$07,$01,$08,$02,$04,$04
        EQUB    $08,$08,$08,$08,$04,$04,$02,$01
        EQUB    $08,$07

\ ******************************************************************************
\ ******************************************************************************
\ * Data pointers to data & offset blocks for static sprites per object above
\ ******************************************************************************
\ ******************************************************************************

.obj_sprite_data_A_table_LO
        EQUB    LO(obj_sprite_data_A_gun_up_right)
        EQUB    LO(obj_sprite_data_A_gun_down_right)
        EQUB    LO(obj_sprite_data_A_gun_up_left)
        EQUB    LO(obj_sprite_data_A_gun_down_left)
        EQUB    LO(obj_sprite_data_A_fuel)
        EQUB    LO(obj_sprite_data_A_pod_stand)
        EQUB    LO(obj_sprite_data_A_generator)
        EQUB    LO(obj_sprite_data_A_door_switch_right)
        EQUB    LO(obj_sprite_data_A_door_switch_left)

.obj_sprite_data_A_table_HI
        EQUB    HI(obj_sprite_data_A_gun_up_right)
        EQUB    HI(obj_sprite_data_A_gun_down_right)
        EQUB    HI(obj_sprite_data_A_gun_up_left)
        EQUB    HI(obj_sprite_data_A_gun_down_left)
        EQUB    HI(obj_sprite_data_A_fuel)
        EQUB    HI(obj_sprite_data_A_pod_stand)
        EQUB    HI(obj_sprite_data_A_generator)
        EQUB    HI(obj_sprite_data_A_door_switch_right)
        EQUB    HI(obj_sprite_data_A_door_switch_left)

.obj_sprite_data_B_table_LO
        EQUB    LO(obj_sprite_data_B_gun_up_right)
        EQUB    LO(obj_sprite_data_B_gun_down_right)
        EQUB    LO(obj_sprite_data_B_gun_up_left)
        EQUB    LO(obj_sprite_data_B_gun_down_left)
        EQUB    LO(obj_sprite_data_B_fuel)
        EQUB    LO(obj_sprite_data_B_pod_stand)
        EQUB    LO(obj_sprite_data_B_generator)
        EQUB    LO(obj_sprite_data_B_door_switch_right)
        EQUB    LO(obj_sprite_data_B_door_switch_left)

.obj_sprite_data_B_table_HI
        EQUB    HI(obj_sprite_data_B_gun_up_right)
        EQUB    HI(obj_sprite_data_B_gun_down_right)
        EQUB    HI(obj_sprite_data_B_gun_up_left)
        EQUB    HI(obj_sprite_data_B_gun_down_left)
        EQUB    HI(obj_sprite_data_B_fuel)
        EQUB    HI(obj_sprite_data_B_pod_stand)
        EQUB    HI(obj_sprite_data_B_generator)
        EQUB    HI(obj_sprite_data_B_door_switch_right)
        EQUB    HI(obj_sprite_data_B_door_switch_left)

\ ******************************************************************************
\ ******************************************************************************
\ * Function: game_start
\ * Description: <>
\ ******************************************************************************
\ ******************************************************************************

.game_start
{
		JMP		start_new_game
}

\ ******************************************************************************
\ * Generic game variables
\ ******************************************************************************

.level_hostile_gun_probability
        EQUB    $00						; init to 1, incremented at start of levels 3-6 (not 1&2), capped at $23 (35)

.planet_destroyed_hostile_gun_modifier
        EQUB    $00						; init to 0, set to 8 when planet destroyed

.reverse_gravity_msg_shown
        EQUB    $00

.invisible_landscape_msg_shown
        EQUB    $00

.high_score_time_out
        EQUB    $00

.extra_string_ptrs
        EQUB    LO(string_i_love_space), LO(string_physics_is_fun),LO(string_support_hotol)

\ ******************************************************************************
\ ******************************************************************************
\ * Main game loop
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: player_new_high_score
\ * Description: <>
\ ******************************************************************************

.player_new_high_score
{
		LDA		#$7E
		JSR		OSBYTE					; clear escape + effects
		JSR		enter_new_high_score_name
}
\\ Fall through!

\ ******************************************************************************
\ * Function: high_score_start
\ * Description: <>
\ ******************************************************************************

.high_score_start
{
        LDA     #$7E
        JSR     OSBYTE					; clear escape + effects

        LDA     #$00
        STA     UNUSED_game_flag
        STA     invisible_landscape_flag
        STA     level_number
        STA     reverse_gravity_flag
        LDA     #$8C
        STA     high_score_time_out
        LDA     #$02
        STA     hostile_gun_shoot_probability

        JSR     initialise_level_pointers
        JSR     level_reset
        JSR     initialise_landscape
        JSR     update_window_and_terrain_tables
        JSR     landscape_draw
        JSR     draw_pod_and_collision_test
        JSR     update_and_draw_all_objects
        JSR     plot_high_score_table
        JSR     write_top_8_thrusters
        JSR     write_press_spacebar

        LDX     #$00
        STX     demo_keypress_bit_mask
        STX     demo_keypress_timer
        STX     demo_keypress_index

	.high_score_tick_loop
        INC     level_tick_counter
        JSR     update_and_draw_all_objects
        JSR     particles_update_and_draw

        LDA     #$0F
        LDX     #$00
        JSR     OSBYTE						; *FX 15,0 - flush all buffers

        LDA     #$81
        LDX     #$03
        LDY     #$00
        JSR     OSBYTE						; *FX $81 - read key with time limit

        LDA     #$00
        STA     demo_mode_flag
		
        LDX     #INKEY_spacebar
        JSR     test_inkey

        BEQ     start_new_game

        LDA     #$FF
        STA     demo_mode_flag
		
        LDA     level_tick_counter
        AND     #$01
        BEQ     high_score_tick_loop

        DEC     high_score_time_out
        BNE     high_score_tick_loop

        JSR     clear_screen_and_init

        LDY     #$0A
        JSR     wait_time_out_Y

        JMP     level_start_demo_entry
}

\ ******************************************************************************
\ * Function: start_new_game
\ * Description: <>
\ ******************************************************************************

.start_new_game
{
        LDX     #$01
        STX     level_hostile_gun_probability			; set level_hostile_gun_probability to 1
        DEX
        STX     planet_destroyed_hostile_gun_modifier	; set planet_destroyed_hostile_gun_modifier to 0
        STX     reverse_gravity_msg_shown				; set reverse_gravity_msg_shown to 0
        STX     invisible_landscape_msg_shown			; set invisible_landscape_msg_shown to 0
        STX     extra_string_index						; set extra_string_index to 0
        STX     extra_string_counter					; set extra_string_counter to 0

        LDX     #$03
		
	.zero_fuel_and_score
        LDA     #$00
        STA     fuel_A,X								; set fuel_A to zero
        STA     score_A,X								; set score_A to zero
        DEX
        BPL     zero_fuel_and_score

        LDX     #$0D
		
	.store_32_loop
        LDA     #$20
        STA     score_C,X								; store $20 (32) at L0183 for 13 bytes
        DEX
        BNE     store_32_loop

        LDA     #$00									; set initial score_A
        JSR     add_A_to_score

        LDA     #$04									; set initial number of lives
        STA     lives
        JSR     lose_a_life

        LDA     #$10
        STA     fuel_B									; set initial fuel value (1000)
		
        LDA     #$FF
        STA     UNUSED_game_flag						; set UNUSED_game_flag to 255 (-1)
		
        LDA     #$FF
        STA     level_number							; set level_number to 255 (-1)

        LDA     #$00
        STA     mission_number							; zero mission number
        STA     level_modifier_flag						; zero level modifier flag (reverse gravity etc.)
        STA     invisible_landscape_flag				; set invisible_landscape_flag to 0
        STA     reverse_gravity_flag					; set reverse_gravity_flag to 0
        STA     fuel_empty_flag							; zero fuel flag
        JSR     plot_fuel_value
}
\\ Fall through!

\ ******************************************************************************
\ * Function: start_new_level
\ * Description: <>
\ ******************************************************************************

.start_new_level
{
        LDA     #$00
        STA     midpoint_ypos_INT
        STA     midpoint_ypos_INT_HI
        INC     UNUSED_game_flag
        INC     level_number
        LDA     level_number
        CMP     #$06									; number of levels
        BNE     setup_next_mission

        LDA     #$00
        STA     level_number							; reset level number to 0

        LDA     reverse_gravity_flag
        EOR     #$FF
        STA     reverse_gravity_flag					; invert flag
        BNE     setup_reverse_gravity

        LDA     invisible_landscape_flag
        EOR     #$0F
        STA     invisible_landscape_flag				; invert lower 4 bits of flag

	.setup_reverse_gravity
        LDA     reverse_gravity_flag
        BEQ     setup_invisible_landscape

        LDA     reverse_gravity_msg_shown
        BNE     setup_invisible_landscape

        JSR     clear_screen_and_init
        JSR     write_reverse_gravity

        LDY     #$96									
        STY     reverse_gravity_msg_shown
        JSR     wait_time_out_Y

        JMP     setup_clear_screen

	.setup_invisible_landscape
        LDA     invisible_landscape_flag
        BEQ     setup_clear_screen

        LDA     invisible_landscape_msg_shown
        BNE     setup_clear_screen

        JSR     clear_screen_and_init
        JSR     write_invisible_landscape

        LDY     #$96									; why $96?  Just timeout value recycled as flag!
        STY     invisible_landscape_msg_shown
        JSR     wait_time_out_Y

	.setup_clear_screen
        INC     extra_string_counter
        LDA     extra_string_counter					; number of attempts at level?
        AND     #$03
        BNE     setup_next_mission

        JSR     clear_screen_and_init

        LDX     extra_string_index
        CPX     #$02
        BEQ     skip_inc_extra_string_index

        INC     extra_string_index
		
	.skip_inc_extra_string_index
        LDA     #HI(end_of_level_messages)
        STA     plot_string_ptr+1
        LDA     extra_string_ptrs,X
        TAX
        JSR     write_message

        JSR     generate_stars_to_start					; generate star field and scroll window

        LDY     #$50
        JSR     wait_time_out_Y

	.setup_next_mission
        SED												; set decimal mode
        CLC
        LDA     mission_number
        ADC     #$01
        STA     mission_number							; increment mission_number by 1
        CLD												; clear decimal mode

        LDA     #$01
        LDX     mission_number
        CPX     #$03			
        BCC     setup_level								; mission_number less than 3

        INC     level_hostile_gun_probability			; increment level_hostile_gun_probability
        LDA     level_hostile_gun_probability
        CMP     #$23
        BCC     setup_level

        LDA     #$23
        STA     level_hostile_gun_probability			; cap level_hostile_gun_probability to $23 (35)
		
	.setup_level
        CLC
        ADC     planet_destroyed_hostile_gun_modifier	; level_hostile_gun_probability + planet_destroyed_hostile_gun_modifier
        STA     hostile_gun_shoot_probability			; store at hostile_gun_shoot_probability

        LDA     #$00
        STA     planet_destroyed_hostile_gun_modifier	; reset planet_destroyed_hostile_gun_modifier to zero

        JSR     initialise_level_pointers
}
\\ Fall through!

\ ******************************************************************************
\ * Function: level_retry
\ * Description: <>
\ ******************************************************************************

.level_retry
{
        JSR     level_reset
}
\\ Fall through!

\ ******************************************************************************
\ * Function: level_start_demo_entry
\ * Description: <>
\ ******************************************************************************

.level_start_demo_entry
{
        JSR     rnd
        AND     #$03
        ADC     #$08
        STA     demo_keypress_timer_rnd_A		; tweak keypress timers for demo mode

        JSR     rnd
        AND     #$03
        ADC     #$04
        STA     demo_keypress_timer_rnd_B		; tweak keypress timers for demo mode
		
        LDA     #$7F
        STA     demo_keypress_timer_rnd_C		; tweak keypress timers for demo mode

        JSR     rnd
        AND     #$03
        BNE     demo_no_big_spin
        LDA     #$23
        STA     demo_keypress_timer_rnd_C		; is either $7F (75%) or $23 (25%) - big spin 1 in 4 times? :)

	.demo_no_big_spin
        LDA     #$0F
        LDX     #$00
        JSR     OSBYTE							; *FX 15,0 - flush all buffers

        LDA     #$00
        STA     level_tick_counter				; set level_tick_counter to 0

        JSR     initialise_landscape
        JSR     update_window_and_terrain_tables
        JSR     calculate_player_position_from_midpoint
        JSR     landscape_draw
        JSR     update_and_draw_all_objects

        LDY     #$08
        JSR     wait_time_out_Y

        JSR     player_teleport_appear

        LDA     #$00
        STA     level_tick_state

        JSR     reset_system_clock
}
\\ Fall through!

\ ******************************************************************************
\ * Function: tick_loop
\ * Description: <>
\ ******************************************************************************

.tick_loop
{
\\ This is the main tick loop that performs all game logic and rendering:

        JSR     demo_mode_tick
        JSR     hide_landscape
        JSR     ship_input_rotate
        JSR     midpoint_add_force_vector
        JSR     update_window_and_terrain_tables
        JSR     draw_player_timed_to_vsync
        JSR     update_player_and_pod_states
        JSR     update_and_draw_all_objects
        JSR     landscape_draw
        JSR     tick_fuel_pickup_draw_beams
        JSR     ship_input_fire
        JSR     particles_update_and_draw
        JSR     test_for_pause
        JSR     calculate_player_position_from_midpoint
        JSR     plot_fuel_value
        JSR     update_sound_timer
        JSR     ship_input_thrust_calculate_force
		
        JSR     test_player_escaped_to_orbit
        BCS     test_level_ended_else_tick_loop

        LDA     pod_destroying_player_timer
        BPL     test_level_ended_else_tick_loop

\\ At this point the level has ended in some way!
		
        LDY     #$03
        JSR     wait_time_out_Y

        JSR     player_entered_orbit

        LDY     #$14
        JSR     wait_time_out_Y

        JSR     show_landscape

        LDA     demo_mode_flag
        BNE     go_to_high_score

        LDA     fuel_empty_flag
        BNE     player_out_of_fuel

        LDA     pod_attached_flag_1
        BNE     player_completed_mission

        LDA     planet_countdown_timer
        BMI     player_died_collision

	.player_died_countdown
        JSR     clear_screen_and_init
        JSR     show_landscape

        LDA     #$08
        STA     planet_destroyed_hostile_gun_modifier

        JSR     write_planet_destroyed
        JSR     write_mission

        LDA     #$20
        JSR     plot_char_A

        LDA     mission_number
        JSR     write_decimal_A

        LDA     #$20
        JSR     plot_char_A
        JSR     plot_char_A

        JSR     write_failed
        JSR     write_no_bonus

        LDY     #$78
        JSR     wait_time_out_Y
        JMP     start_new_level

	.player_out_of_fuel
        JMP     game_over

	.go_to_high_score
        JMP     high_score_start

	.player_died_collision
        JSR     clear_screen_and_init

        JSR     write_mission
        JSR     write_in
        JSR     write_complete

        LDY     #$3C
        JSR     wait_time_out_Y

        JMP     level_retry

	.player_completed_mission
        JSR     mission_complete
        JMP     start_new_level

	.jump_tick_loop
        JMP     tick_loop

	.test_level_ended_else_tick_loop
        LDX     #INKEY_escape
        JSR     test_inkey

        BEQ     key_was_pressed

        LDA     demo_mode_flag
        BEQ     skip_test_for_keypress

        LDA     #$81
        LDX     #$00
        LDY     #$00
        JSR     OSBYTE					; *FX $81 - read key with time limit

        CPY     #$FF
        BNE     key_was_pressed			; key was pressed

	.skip_test_for_keypress
        INC     level_tick_counter

        LDA     level_ended_flag
        BEQ     jump_tick_loop

        LDA     demo_mode_flag
        BNE     go_to_high_score

        LDA     fuel_empty_flag
        BNE     game_over

        JSR     lose_a_life

        CPX     #$FF
        BEQ     game_over

        LDA     planet_countdown_timer
        BMI     jump_to_retry_level

        JMP     player_died_countdown

	.jump_to_retry_level
        JMP     level_retry

	.game_over
        JSR     clear_screen_and_init
        JSR     show_landscape

        LDA     fuel_empty_flag
        BEQ     show_game_over_message

        JSR     write_out_of_fuel

	.show_game_over_message
        JSR     write_game_over

        LDY     #$5A
        JSR     wait_time_out_Y

        JMP     player_new_high_score
}
\\ Fall through!

.key_was_pressed
{
        JMP     high_score_start
}

\ ******************************************************************************
\ * Function: update_player_and_pod_states
\ * Description: <>
\ ******************************************************************************

.update_player_and_pod_states
{
        LDA     #$00
        STA     level_ended_flag

        LDA     pod_attached_flag_1
        BNE     L38BE

        LDA     ship_sprite_plotted_flag
        BNE     L38BE

        STA     pod_line_exists_flag
		
	.L38BE
        LDA     pod_destroying_player_timer
        BMI     L38F0

        LDA     planet_countdown_timer
        BEQ     planet_countdown_at_zero

\\ Set standard colour for landscape

        LDY     level_number
        LDA     level_landscape_colour,Y
        LDY     #$02
        JSR     palette_set_colour_Y_to_A

	.planet_countdown_at_zero
        DEC     pod_destroying_player_timer
        BEQ     set_level_ended

        LDA     pod_destroying_player_timer
        CMP     #$28
        BNE     L38E2

        LDA     #$00
        LDY     #$00
        JSR     palette_set_colour_Y_to_A

	.L38E2
        DEC     top_nibble_index
        DEC     top_nibble_index
        BPL     L38F0

        LDA     player_ship_destroyed_flag
        BMI     destroy_player_ship

        LDA     pod_attached_flag_1
        BNE     destroy_attached_pod

	.L38F0
        LDA     player_ship_destroyed_flag
        BPL     L38FF

        LDA     pod_attached_flag_1
        BEQ     L38FF

        LDA     #$01
        STA     pod_line_exists_flag
        JMP     L3907

	.L38FF
        LDA     pod_destroying_player_timer
        BPL     L3907

        LDA     #$00
        STA     pod_line_exists_flag
		
	.L3907
        LDA     plot_pod_collision_detected
        BNE     destroy_attached_pod

        LDA     plot_ship_collision_detected
        BNE     destroy_player_ship

        JSR     calculate_pod_pos

        RTS
}

\ ******************************************************************************
\ * Function: set_level_ended
\ * Description: <>
\ ******************************************************************************

.set_level_ended
{
        LDA     #$FF
        STA     level_ended_flag
        RTS
}

\ ******************************************************************************
\ * Function: destroy_player_ship
\ * Description: <>
\ ******************************************************************************

.destroy_player_ship
{
        LDX     #$01
        STX     level_tick_state
        LDA     player_ship_destroyed_flag
        BPL     return

        LDA     #$3C
        STA     pod_destroying_player_timer
        LDA     #$00
        STA     plot_ship_collision_detected
        LDA     #$01
        STA     player_ship_destroyed_flag
        LDA     old_player_xpos_FRAC
        STA     explosion_xpos_FRAC
        CLC
        LDA     old_player_xpos_INT
        ADC     #$04			; to centre of player object?
        STA     explosion_xpos_INT
        CLC
        LDA     old_player_ypos_INT
        ADC     #$05			; to centre of player object?
        STA     explosion_ypos_INT
        LDA     old_player_ypos_INT_HI
        ADC     #$00
        STA     explosion_ypos_INT_HI
        LDA     #PARTICLE_type_debris
        STA     explosion_angle
        STA     explosion_particle_type
        JSR     create_explosion

	.return
        RTS
}

\ ******************************************************************************
\ * Function: destroy_attached_pod
\ * Description: <>
\ ******************************************************************************

.destroy_attached_pod
{
        LDX     #$01
        STX     level_tick_state
        DEX
        STX     pod_attached_flag_1
        STX     plot_pod_collision_detected
        LDA     #$3C
        STA     pod_destroying_player_timer
        LDA     pod_xpos_FRAC
        STA     explosion_xpos_FRAC
        LDA     pod_xpos_INT
        STA     explosion_xpos_INT
        LDA     pod_ypos_FRAC
        STA     explosion_ypos_INT
        LDA     pod_ypos_INT_HI
        STA     explosion_ypos_INT_HI
        LDA     #PARTICLE_type_debris
        STA     explosion_angle
        STA     explosion_particle_type
        JSR     create_explosion

        RTS
}

\ ******************************************************************************
\ * Function: calculate_pod_pos
\ * Description: <>
\ ******************************************************************************

.calculate_pod_pos
{
        SEC
        LDA     midpoint_xpos_FRAC
        SBC     midpoint_deltax_FRAC
        STA     pod_xpos_FRAC
        LDA     midpoint_xpos_INT
        SBC     midpoint_deltax_INT
        CLC
        ADC     #$04
        STA     pod_xpos_INT
        SEC
        LDA     midpoint_ypos_INT
        SBC     midpoint_deltay_INT
        STA     pod_ypos_FRAC
        LDA     midpoint_ypos_INT_HI
        SBC     #$00
        STA     pod_ypos_INT_HI
        LDA     midpoint_deltay_INT
        BPL     L3998

        INC     pod_ypos_INT_HI
		
	.L3998
        CLC
        LDA     pod_ypos_FRAC
        ADC     #$05
        STA     pod_ypos_FRAC
        LDA     pod_ypos_INT_HI
        ADC     #$00
        STA     pod_ypos_INT_HI
        RTS
}

\ ******************************************************************************
\ * Function: hide_landscape
\ * Description: <>
\ ******************************************************************************

.hide_landscape
{
        LDA     planet_countdown_timer
        BEQ     set_landscape_colour_to_black

        LDA     pod_destroying_player_timer
        BPL     return

        LDA     invisible_landscape_flag
        BEQ     return

        LDA     shield_tractor_pressed
        BEQ     set_landscape_colour_to_black

        JMP     show_landscape

	.set_landscape_colour_to_black
        LDA     #$00
        LDY     #$02
        JMP     palette_set_colour_Y_to_A

	.return
        RTS
}

\ ******************************************************************************
\ * Function: show_landscape
\ * Description: <>
\ ******************************************************************************

.show_landscape
{
        LDY     level_number
        LDA     level_landscape_colour,Y
        LDY     #$02
        JMP     palette_set_colour_Y_to_A
}

\ ******************************************************************************
\ * Function: test_player_escaped_to_orbit
\ * Returns: carry clear if player high enough to escape to orbit else carry set
\ * Description: <>
\ ******************************************************************************

.test_player_escaped_to_orbit
{
        LDA     midpoint_ypos_INT_HI
        CMP     #$01
        BNE     L39D8

        LDA     midpoint_ypos_INT
        CMP     #$20
        BCC     L39DA

	.L39D8
        SEC
        RTS

	.L39DA
        CLC
        RTS
}

\ ******************************************************************************
\ * Function: escape_pressed
\ * Description: <>
\ ******************************************************************************

.escape_pressed
{
        JMP     key_was_pressed
}

\ ******************************************************************************
\ * Function: wait_time_out_Y
\ * Params: Y = length of timeout in centiseconds
\ * Description: <>
\ ******************************************************************************

.wait_time_out_Y
{
        STY     time_out_vsync_count
		
	.wait_loop
        CMP     vsync_count
        BEQ     wait_loop

        LDA     #$81
        LDX     #$00
        LDY     #$00
        JSR     OSBYTE					; *FX $81,0 - read key with time limit

        CPY     #ASCII_escape
        BEQ     escape_pressed			; escape pressed

        LDA     vsync_count
        DEC     time_out_vsync_count
        BNE     wait_loop

        JMP     reset_system_clock
}

\ ******************************************************************************
\ * Function: clear_screen_and_init
\ * Description: <>
\ ******************************************************************************

.clear_screen_and_init
{
        LDA     #$00
        LDY     #$00
        JSR     palette_set_colour_Y_to_A

        LDA     #$20
        JSR     write_countdown_timer

        LDX     #$11
		
	.L3A09
        LDA     #$00
        STA     terrain_draw_table_1,X
        LDA     #$48					; $48 = 72 = num chars
        STA     terrain_draw_table_3,X
        INX
        BPL     L3A09

        LDX     #$1F					; max number of objects
		
	.L3A18
        LDA     level_obj_flags,X
        AND     #$FE
        STA     level_obj_flags,X
        DEX
        BPL     L3A18

        LDX     #$20
		
	.L3A25
        LDA     #$00
        STA     particles_lifetime,X
        DEX
        BPL     L3A25

        LDA     #LO(SCREEN_START_ADDR)
        STA     clear_screen_ptr
        LDA     #HI(SCREEN_START_ADDR)
        STA     clear_screen_ptr+1
        LDY     #$00
        LDA     #$00
		
	.clear_screen_loop
        STA     (clear_screen_ptr),Y
        INY
        BNE     clear_screen_loop

        INC     clear_screen_ptr+1
        BPL     clear_screen_loop

        RTS
}

\ ******************************************************************************
\ * Function: draw_player_timed_to_vsync
\ * Description: <>
\ ******************************************************************************

.draw_player_timed_to_vsync
{
        LDA     #$00
        STA     system_clock_MSB

	.loop
        LDA     irq1_timer1_signal
        BEQ     skip_set_system_clock_MSB

        LDA     system_clock_MSB
        BNE     skip_set_system_clock_MSB

        JSR     draw_ship_line_and_pod

        LDA     #$FF
        STA     system_clock_MSB
		
	.skip_set_system_clock_MSB
        LDY     #HI(system_clock_value)
        LDX     #LO(system_clock_value)
        LDA     #$01
        JSR     OSWORD					; read system clock

        LDA     system_clock_value
        CMP     #$03
        BCC     loop

        LDA     #$00
		STA     system_clock_value
		
        LDY     #HI(system_clock_value)
        LDX     #LO(system_clock_value)
        LDA     #$02
        JSR     OSWORD					; write system clock

        LDA     system_clock_MSB
        BNE     return

        JSR     draw_ship_line_and_pod

	.return
        RTS
}

\ ******************************************************************************
\ * Function: reset_system_clock
\ * Description: <>
\ ******************************************************************************

.reset_system_clock
{
        LDA     #$00
        STA     system_clock_value
		
        LDY     #HI(system_clock_value)
        LDX     #LO(system_clock_value)
        LDA     #$02
        JMP     OSWORD					; write system clock
}

\ ******************************************************************************
\ * Function: draw_ship_line_and_pod
\ * Description: <>
\ ******************************************************************************

.draw_ship_line_and_pod
{
        JSR     erase_old_line
        JSR     update_shield_tractor_draw_ship_and_pod
        JMP     draw_new_line
}

\ ******************************************************************************
\ * System clock variables
\ ******************************************************************************

.system_clock_value
        EQUB    $00,$00,$00,$00,$00		; LSB to MSB (5 bytes)

.system_clock_MSB
        EQUB    $00
		EQUB	$00						; unused?

\ ******************************************************************************
\ ******************************************************************************
\ * Keyboard handler
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: test_inkey
\ * Params: X = INKEY value of key to test
\ * Returns: A = 0 if pressed, <> 0 if not pressed
\ * Description: <>
\ ******************************************************************************

.test_inkey
{
        PHP
        CPX     #$8F
        BEQ     L3AA7

        LDA     demo_mode_flag
        BNE     demo_fake_keypress

	.L3AA7
        TXA
        EOR     #$FF
        LDX     #$03
        LDY     #$0B
        SEI
        STX     SHEILA_System_VIA_Register_B
        LDX     #$7F
        STX     SHEILA_System_VIA_Data_Dir
        STA     SHEILA_System_VIA_Register_A_NH
        LDA     SHEILA_System_VIA_Register_A_NH
        STY     SHEILA_System_VIA_Register_B
        PLP
        LDX     #$00
        ROL     A
        BCC     L3AC8

        LDX     #$FF
		
	.L3AC8
        CPX     #$FF
        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * Demo / attract mode routines
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: demo_fake_keypress
\ * Params: X = <>
\ * Returns: A = 0 if pressed, <> 0 if not pressed
\ * Description: <>
\ ******************************************************************************

.demo_fake_keypress
{
        PLP
        TXA
        LDX     #$04
		
	.L3ACF
        CMP     demo_inkey_table,X
        BEQ     L3ADA

        DEX
        BPL     L3ACF

        INX
        BEQ     demo_return_keypress_match

	.L3ADA
        LDA     lookup_index_to_bit,X
        LDX     #$00
        AND     demo_keypress_bit_mask
        BEQ     demo_return_keypress_match

        DEX
		
	.demo_return_keypress_match
        CPX     #$FF
        RTS
}

\ ******************************************************************************
\ * Demo lookup tables & variables
\ ******************************************************************************

.demo_inkey_table									; 5x possible keypresses
        EQUB    INKEY_capslock
		EQUB	INKEY_ctrl
		EQUB	INKEY_return
		EQUB	INKEY_shift
		EQUB	INKEY_spacebar

.lookup_index_to_bit
		EQUB	$01,$02,$04,$08,$10					; 5x possible keypresses - make enums

.demo_keypress_bit_mask
        EQUB    $00

.demo_keypress_timer
        EQUB    $00

.demo_keypress_index
        EQUB    $00

\ ******************************************************************************
\ * Function: demo_mode_tick
\ * Description: <>
\ ******************************************************************************

.demo_mode_tick
{
        LDA     demo_mode_flag
        BEQ     return

        DEC     demo_keypress_timer
        BMI     demo_mode_next_keypress

	.return
        RTS
}

\ ******************************************************************************
\ * Function: demo_mode_next_keypress
\ * Description: <>
\ ******************************************************************************

.demo_mode_next_keypress
{
        LDX     demo_keypress_index
        LDA     demo_keypress_bit_mask_table,X
        STA     demo_keypress_bit_mask
        LDA     demo_keypress_timer_table,X
        STA     demo_keypress_timer
        INC     demo_keypress_index
        RTS
}

\ ******************************************************************************
\ * Demo data for fake keypresses etc.
\ ******************************************************************************

.demo_keypress_bit_mask_table						; these correspond to 5x bits above $01 to $10
        EQUB    $00,$02,$00,$04,$01,$10,$18,$00		; those in turn match the 5x keypress INKEY values
        EQUB    $01,$00,$18,$08,$0A,$08,$0A,$08		; can make these enums eventually when cleaning up
        EQUB    $0A,$08

.demo_keypress_timer_table
        EQUB    $18,$0F,$05,$05,$08,$14,$17,$0F

.demo_keypress_timer_rnd_A							; add some randomness to the demo mode
        EQUB    $08,$0D,$26,$0D

.demo_keypress_timer_rnd_B							; by tweaking length of keypress slightly
        EQUB    $06

.demo_keypress_timer_rnd_C							; only for specific keys so level always completes
        EQUB    $7F,$14,$0A,$0F,$7F

\ ******************************************************************************
\ * Misc flag, maybe for tractor beam routine?
\ ******************************************************************************

.pod_attached_flag_2
		EQUB	$00

\ ******************************************************************************
\ ******************************************************************************
\ * High score routine
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: enter_new_high_score_name
\ * Description: <>
\ ******************************************************************************

.enter_new_high_score_name
{
        LDA     #$09
        STA     high_score_counter
        LDA     #$01
        STA     high_score_ptr_A+1
        STA     high_score_ptr_B+1
        LDA     #$80
        STA     high_score_ptr_A
        LDA     #$70
        STA     high_score_ptr_B
		
	.L3B49
        LDY     #$02
		
	.L3B4B
        LDA     (high_score_ptr_A),Y
        CMP     (high_score_ptr_B),Y
        BCC     L3B56

        BNE     L3B5D

        DEY
        BPL     L3B4B

	.L3B56
        LDA     high_score_ptr_A
        CMP     #$80
        BNE     L3B7A

        RTS

	.L3B5D
        DEC     high_score_counter
        LDY     #$00
		
	.L3B61
        LDA     (high_score_ptr_A),Y
        PHA
        LDA     (high_score_ptr_B),Y
        STA     (high_score_ptr_A),Y
        PLA
        STA     (high_score_ptr_B),Y
        INY
        CPY     #$10
        BNE     L3B61

        LDA     high_score_ptr_B
        STA     high_score_ptr_A
        SBC     #$10
        STA     high_score_ptr_B
        BCS     L3B49

	.L3B7A
        CLC
        LDA     high_score_ptr_A
        ADC     #$06
        STA     read_line_parameter_block
        STA     high_score_ptr_C
        LDA     high_score_ptr_A+1
        STA     read_line_parameter_block+1
        STA     high_score_ptr_C+1

        JSR     clear_screen_and_init
        JSR     plot_high_score_table
        JSR     write_congratulations
        JSR     write_enter_name

        LDX     #$30
        LDY     #$4B
        JSR     plot_char_set_scr_addr_XY

        LDY     high_score_counter
		
	.L3BA0
        LDX     #$48
		
	.L3BA2
        JSR     char_write_ptr_next_column

        DEX
        BNE     L3BA2

        DEY
        BNE     L3BA0

        LDA     #$FF
        STA     char_flag_cursor
        LDA     #$00
        JSR     plot_char_A

        LDA     #$0F
        LDX     #$00
        LDY     #$00
        JSR     OSBYTE					; *FX 15 - flush all buffers

        LDA     #$F0
        STA     font_byte_mask

        LDA     #$00
        LDX     #LO(read_line_parameter_block)
        LDY     #HI(read_line_parameter_block)
        JSR     OSWORD					; read line from input stream

        BCC     L3BD5

        LDA     #$7E
        JSR     OSBYTE

        LDY     #$00
		
	.L3BD5
        LDA     #$20
        STA     (high_score_ptr_C),Y
        INY
        CPY     #$0A
        BNE     L3BD5

        LDA     #$0F
        STA     font_byte_mask
        LDA     #$00
        STA     char_flag_cursor
        RTS
}

\ ******************************************************************************
\ * Parameters for OSWORD 0
\ ******************************************************************************

.read_line_parameter_block				; for OSWORD 0
        EQUB    $00						; buffer address for input LSB
		EQUB	$00						; buffer address for input MSB
		EQUB	$09						; maximum line length
		EQUB	$20						; min acceptable character value
        EQUB    $FF						; max acceptable character value

\ ******************************************************************************
\ * Functions: main_wrchv, jmp_wrchv
\ * Description: <>
\ ******************************************************************************

.main_wrchv
{
		JMP		plot_char_A
		RTS
}
		
.jmp_wrchv
        JMP     LFFFF					; address gets written into code in main_entry
        old_wrchv   = jmp_wrchv+1

\ ******************************************************************************
\ * Functions: write_decimal_A
\ * Params: A = BCD value to plot to screen
\ * Description: <>
\ ******************************************************************************

.write_decimal_A
{
        PHA
        ROR     A
        ROR     A
        ROR     A
        ROR     A
        AND     #$0F
        BEQ     L3C04

        CLC
        ADC     #$30
        JSR     plot_char_A

	.L3C04
        PLA
        AND     #$0F
        CLC
        ADC     #$30
        JMP     plot_char_A
}

\ ******************************************************************************
\ * Function: mission_complete
\ * Description: <>
\ ******************************************************************************

.mission_complete
{
        LDA     #$00
        STA     level_modifier_flag
        JSR     clear_screen_and_init

        JSR     write_mission

        LDX     #$50
        LDY     #$56
        JSR     plot_char_set_scr_addr_XY

        LDA     mission_number
        JSR     write_decimal_A

        LDA     #$20
        JSR     plot_char_A

        JSR     write_complete

        SED
        CLC
        CLD
        LDA     #$00
        STA     bonus_score
        LDA     level_number
        CLC
        ADC     #$05
        LDY     planet_countdown_timer
        BMI     L3C47

        PHA
        JSR     write_planet_destroyed

        PLA
        CLC
        ADC     #$05
		
	.L3C47
        TAY
		
	.L3C48
        TYA
        PHA
        LDA     #$40
        JSR     add_A_to_score

        LDA     bonus_score
        SED
        ADC     #$04
        STA     bonus_score
        CLD
        PLA
        TAY
        DEY
        BNE     L3C48

        JSR     write_bonus

        LDA     bonus_score
        JSR     write_decimal_A

        LDA     #$30
        JSR     plot_char_A

        JSR     plot_char_A

        LDY     #$64
        JMP     wait_time_out_Y
}

\ ******************************************************************************
\ * Misc mission / level variables
\ ******************************************************************************

.bonus_score
        EQUB    $00

.mission_number
        EQUB    $00						; BCD starting at 1

.level_modifier_flag
        EQUB    $00

\ ******************************************************************************
\ ******************************************************************************
\ * Appears to be unreachable?
\ ******************************************************************************
\ ******************************************************************************

.L3C77
        EQUB    $1E,$A5,$7E,$C9,$02,$90,$18,$C9,$07

\ ******************************************************************************
\ ******************************************************************************
\ *
\ * This code cannot be higher than $3C80 (SCREEN_BASE_ADDR)
\ *
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: main_entry
\ * Description: <>
\ ******************************************************************************

.main_entry
{
        LDX     #$FF
        TXS								; reset stack
        LDX     #$A7
		
	.zp_loop
        LDA     #$00
        STA     L0000,X
        DEX
        BNE     zp_loop					; reset first $A7 entries of zero page to 0

        LDY     #$4F					; size of multiplication table array (80)
        LDX     #$00
        LDA     #$00					; index into multiplication table arrays
        STA     value_LO
        STA     value_HI
		
	.mult_by_8_loop							; create multiplication table N * 8 for 0 <= N <= $4F (79)
        LDA     value_LO
        STA     mult_by_8_LO,X	; store low byte at $9C0
        LDA     value_HI
        STA     mult_by_8_HI,X	; store high byte at $A10
        CLC
        LDA     value_LO
        ADC     #$08
        STA     value_LO
        LDA     value_HI
        ADC     #$00
        STA     value_HI				; add 8 to 16-bit number stored at $70
        INX
        DEY
        BPL     mult_by_8_loop			; loop 80 times

        LDA     WRCHV
        STA     old_wrchv
        LDA     WRCHV+1
        STA     old_wrchv+1				; store old WRCHV directly in code at jmp_wrchv
        LDA     #LO(main_wrchv)
        STA     WRCHV
        LDA     #HI(main_wrchv)
        STA     WRCHV+1					; redirect WRCHV to main_wrchv
		
\\ Copy OSWORD 7 (sound) parameters to $0700 (language space)
		
        LDX     #$00
		
	.store_8_bytes_loop
        LDA     sound_data_own_gun,X		
        STA     sound_params_own_gun,X
        LDA     sound_data_explosion_1,X
        STA     sound_params_explosion_1,X
        LDA     sound_data_explosion_2,X
        STA     sound_params_explosion_2,X
        LDA     sound_data_hostile_gun,X
        STA     sound_params_hostile_gun,X
        LDA     sound_data_collect_1,X
        STA     sound_params_collect_1,X
        LDA     sound_data_collect_2,X
        STA     sound_params_collect_2,X
        LDA     sound_data_engine,X
        STA     sound_params_engine,X	
        LDA     sound_data_countdown,X
        STA     sound_params_countdown,X
        LDA     sound_data_enter_orbit,X
        STA     sound_params_enter_orbit,X
        INX
        CPX     #$08
        BNE     store_8_bytes_loop		; loop 8 times

\\ Store angle lookup tables lower down in memory
		
        LDX     #$1F
		
	.store_32_bytes_loop
        LDA     lookup_angle_to_y_FRAC,X
        STA     angle_to_y_FRAC,X
        LDA     lookup_angle_to_y_INT,X
        STA     angle_to_y_INT,X
        LDA     lookup_angle_to_x_FRAC,X
        STA     angle_to_x_FRAC,X
        LDA     lookup_angle_to_x_INT,X
        STA     angle_to_x_INT,X
        DEX
        BPL     store_32_bytes_loop		; loop 32 times

\\ Relocate game entry code to $0400
		
        LDA     #LO(game_entry_relocated)
        STA     relocate_src_ptr
        LDA     #HI(game_entry_relocated)
        STA     relocate_src_ptr+1				; relocate_src_ptr = $3DB3
        LDA     #LO(game_entry)
        STA     relocate_dest_ptr
        LDA     #HI(game_entry)
        STA     relocate_dest_ptr+1				; relocate_dest_ptr = $0400
        LDY     #$00
        LDX     #$03							; copy 3 pages
		
	.relocate_0400_loop
        LDA     (relocate_src_ptr),Y
        STA     (relocate_dest_ptr),Y
        INY
        BNE     relocate_0400_loop

        INC     relocate_src_ptr+1
        INC     relocate_dest_ptr+1
        DEX
        BNE     relocate_0400_loop			; copy 3 pages from $3DB3 to $0400

        LDA     #$08
        LDX     #$62
        LDY     #$3E
        JSR     OSWORD						; ENVELOPE at $3E62

        LDA     #$08
        LDX     #$70
        LDY     #$3E
        JSR     OSWORD						; ENVELOPE at $3E70

        LDA     #$08
        LDX     #$7D
        LDY     #$3E
        JSR     OSWORD						; ENVELOPE at $3E7D

        LDA     #$08
        LDX     #$8B
        LDY     #$3E
        JSR     OSWORD						; ENVELOPE at $3E8B

        LDX     #$00
		
	.store_at_0100_loop
        LDA     high_score_table_relocated,X
        STA     high_score_table,X
        INX
        BPL     store_at_0100_loop			; store 128 bytes at $0100

        LDX     #$7D						; 126 bytes
		
	.store_at_0900_loop
        LDA     in_game_messages_relocated,X
        STA     in_game_messages,X
        DEX
        BPL     store_at_0900_loop

        LDA     #$04
        STA     level_hostile_gun_probability

\\ Write MODE 7 instructions
		
        LDA     #LO(mode_7_instructions)
        STA     relocate_src_ptr
        LDA     #HI(mode_7_instructions)
        STA     relocate_src_ptr+1			; set relocate_src_ptr to mode_7_instructions

        LDA     #$13
        JSR     OSBYTE						; *FX 19 - wait for vsync

        LDY     #$00
		
	.write_chars_loop
        LDA     (relocate_src_ptr),Y
        CMP     #$FF						; stop when hitting $FF
        BEQ     wait_for_spacebar

        JSR     jmp_wrchv					; write char

        INY
        BNE     write_chars_loop

        INC     relocate_src_ptr+1
        JMP     write_chars_loop			; write chars until reach $FF

	.wait_for_spacebar
        LDA     #$0F
        LDX     #$00
        JSR     OSBYTE						; *FX 15,0 - flush all buffers

        JSR     OSRDCH						; wait for keypress

        CMP     #ASCII_space				; 32 = space bar
        BNE     wait_for_spacebar			; wait until spacebar is pressed

        JMP     game_entry					; jump to game start at $0400
}

\ ******************************************************************************
\ * Function: game_entry_relocated
\ * Description: Actually executes at $0400 after relocation
\ ******************************************************************************

.game_entry_relocated					; 
{
        LDA     #LO(status_bar_bytes)
        STA     relocate_src_ptr
        LDA     #HI(status_bar_bytes)
        STA     relocate_src_ptr+1
        LDA     #LO(SCREEN_BASE_ADDR)
        STA     relocate_dest_ptr	
        LDA     #HI(SCREEN_BASE_ADDR)
        STA     relocate_dest_ptr+1

\\ No longer need main_entry code so can overwrite it
\\ This is copying 2 character rows of MODE 1 (status bar at top of screen)
\\ Can't see it because we're not in right mode yet
		
        LDY     #$00
        LDX     #$05					; copy 5 pages (1280 bytes) from $4212 over $3C80 (main_entry)
		
	.copy_5_pages_loop
        LDA     (relocate_src_ptr),Y
        STA     (relocate_dest_ptr),Y
        INY
        BNE     copy_5_pages_loop

        INC     relocate_src_ptr+1
        INC     relocate_dest_ptr+1
        DEX
        BNE     copy_5_pages_loop

        JSR     clear_screen_and_init

        LDA     #$13
        JSR     OSBYTE					; *FX 19 - wait vsync

        LDA     #$90
        JSR     OSBYTE					; *FX $90 - *TV - obtain interlace status

        TYA
        EOR     #$01					; invert interlace status
        AND     #$01					; keep only that bit
        STA     interlace_status_bit	; store at $04A8
        LDA     #$90
        JSR     OSBYTE					; *FX $90 - *TV

        LDA     #$13
        JSR     OSBYTE					; *FX 19 - wait for vsync

        LDX     #$0D					; write R13-R0 to 6845
		
	.set_crtc_reg_loop
        STX     SHEILA_6845_Register	; store register number
        LDA     crtc_regs,X				; load crtc registers
        STA     SHEILA_6845_Value		; store register value
        DEX
        BPL     set_crtc_reg_loop					;

        LDA     #$9A
        LDX     #$D8
        LDY     #$00
        JSR     OSBYTE					; *FX 154,216

        LDA     #$D8
        STA     SHEILA_Video_ULA		; set ULA to MODE 1

        LDA     IRQ1V
        STA     old_irq1v
        LDA     IRQ1V+1
        STA     old_irq1v+1				; store IRQ1V

        SEI								; disable interrupts
        LDA     #LO(irq1_handler)
        STA     IRQ1V
        LDA     #HI(irq1_handler)
        STA     IRQ1V+1					; set IRQ1V to irq1_handler
        CLI								; enable interrupts

        LDA     #$18
        STA     SHEILA_System_VIA_Interrupt_Enable		; disable CB1, CB2 interrupts
		
        LDX     #$00
		
	.set_palette_loop
        LDA     palette_table,X			; load palette entry
        CMP     #$FF
        BEQ     done_set_palette_loop	; finish when reaching $FF

        STA     SHEILA_PaletteReg		; store palette register
        INX
        BNE     set_palette_loop		; loop

	.done_set_palette_loop
        JSR     clear_screen_and_init
        JMP     game_start
}

\ ******************************************************************************
\ ******************************************************************************
\ * Data to be relocated lower down in memory after load before game start
\ ******************************************************************************
\ ******************************************************************************

.palette_table_relocated
{
        EQUB    $07,$17,$47,$57,$24,$34,$64,$74
        EQUB    $86,$96,$C6,$D6,$A5,$B5,$E5,$F5
        EQUB    $FF
}

.crtc_regs_relocated
{
		EQUB	$7F
		EQUB	SCREEN_WIDTH_CHARS
		EQUB	$5E
		EQUB	$28
		EQUB	$26
		EQUB	$00
		EQUB	$1E
        EQUB    $21
		EQUB	$01
		EQUB	$07
		EQUB	$67
		EQUB	$08
		EQUB	HI(SCREEN_BASE_ADDR/8)
		EQUB	LO(SCREEN_BASE_ADDR/8)
		EQUB	$FF
}

\ ******************************************************************************
\ * Sound envelopes
\ ******************************************************************************

.envelope_1
        EQUB    $01,$02,$FB,$FD,$FB,$02,$03,$32
        EQUB    $7E,$F9,$F9,$F4,$7E,$00
		
.envelope_2
		EQUB	$02,$02
        EQUB    $FF,$00,$01,$09,$09,$09,$00,$00
        EQUB    $00,$01,$01
		
.envelope_3
		EQUB	$03,$04,$00,$00,$00
        EQUB    $01,$01,$01,$7E,$FC,$FE,$FC,$7E
        EQUB    $6E
		
.envelope_4
		EQUB	$04,$01,$FF,$FF,$FF,$12,$12
        EQUB    $12,$32,$F4,$F4,$F4,$6E,$46

\ ******************************************************************************
\ * Sound parameter blocks
\ ******************************************************************************

.sound_data_own_gun
        EQUB    $12,$00,$01,$00,$50,$00,$02,$00

.sound_data_explosion_1
        EQUB    $11,$00,$02,$00,$96,$00,$64,$00

.sound_data_explosion_2
        EQUB    $10,$00,$03,$00,$07,$00,$64,$00

.sound_data_hostile_gun
        EQUB    $13,$00,$04,$00,$1E,$00,$14,$00

.sound_data_collect_1
        EQUB    $02,$00,$F1,$FF,$BE,$00,$01,$00

.sound_data_collect_2
        EQUB    $02,$00,$00,$00,$BE,$00,$02,$00

.sound_data_engine
        EQUB    $10,$00,$F6,$FF,$05,$00,$03,$00

.sound_data_countdown
        EQUB    $02,$00,$F1,$FF,$96,$00,$01,$00

.sound_data_enter_orbit
        EQUB    $12,$00,$03,$00,$B9,$00,$01,$00

\ ******************************************************************************
\ * High score table
\ ******************************************************************************

.high_score_table_relocated
{
        EQUB    $00,$00,$02					; three-byte BCD number
		EQUS	"   SPACELORD "
		
        EQUB    $00,$50,$01
		EQUS	"   ADMIRAL   "
		
        EQUB    $00,$00,$01
		EQUS	"   COMMODORE "
		
        EQUB    $00,$50,$00
		EQUS	"   CAPTAIN   "
		
        EQUB    $00,$20,$00
		EQUS	"   PILOT     "
		
        EQUB    $00,$15,$00
		EQUS	"   CADET     "
		
        EQUB    $00,$10,$00
		EQUS	"   NOVICE    "
		
        EQUB    $00,$05,$00
		EQUS	"   MENACE    "
}

\ ******************************************************************************
\ * Look up table - converts angle to 16-bit X & Y values in Q2.8 format
\ ******************************************************************************

.lookup_angle_to_y_FRAC
        EQUB    $80,$8D,$B1,$EC,$3C,$9D,$0C,$84
        EQUB    $00,$7C,$F4,$63,$C4,$14,$4F,$73
        EQUB    $80,$73,$4F,$14,$C4,$63,$F4,$7C
        EQUB    $00,$84,$0C,$9D,$3C,$EC,$B1,$8D

.lookup_angle_to_y_INT
        EQUB    $FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF
        EQUB    $00,$00,$00,$01,$01,$02,$02,$02
        EQUB    $02,$02,$02,$02,$01,$01,$00,$00
        EQUB    $00,$FF,$FF,$FE,$FE,$FD,$FD,$FD

.lookup_angle_to_x_FRAC
        EQUB    $00,$3E,$7A,$B1,$E2,$0A,$27,$39
        EQUB    $40,$39,$27,$0A,$E2,$B1,$7A,$3E
        EQUB    $00,$C2,$86,$4F,$1E,$F6,$D9,$C7
        EQUB    $C0,$C7,$D9,$F6,$1E,$4F,$86,$C2

.lookup_angle_to_x_INT
        EQUB    $00,$00,$00,$00,$00,$01,$01,$01
        EQUB    $01,$01,$01,$01,$00,$00,$00,$00
        EQUB    $00,$FF,$FF,$FF,$FF,$FE,$FE,$FE
        EQUB    $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

\ ******************************************************************************
\ * More message strings
\ ******************************************************************************

.in_game_messages_relocated			; if you change these you will need to update the string_ labels as these are relocated to page $0900
{
	.message_game_over
        EQUB    $50,$58,$F0
		EQUS	"Game Over"
		EQUB	$FF
		
	.message_top_8_thrusters
		EQUB	$40,$48,$FF
		EQUS	"Top Eight Thrusters"
        EQUB	$FF

	.message_congratulations
		EQUB	$60,$48,$FF
		EQUS	"Congratulations"
		EQUB	$FF

	.message_enter_name
		EQUB	$30,$63,$F0
		EQUS	"Please enter your name"
        EQUB    $FF

	.message_press_spacebar
		EQUB	$D0,$60,$F0
		EQUS	"Press SPACE BAR to start"
		EQUB	$FF

	.message_out_of_fuel
		EQUB	$C0,$53,$0F
		EQUS	"Out of fuel"
		EQUB	$FF
}

\ ******************************************************************************
\ ******************************************************************************
\ * MODE 7 instruction screen
\ ******************************************************************************
\ ******************************************************************************
		
.mode_7_instructions		
		EQUB	$16,$07			; VDU 22,7 = MODE 7

		EQUB	$17,$01
        EQUB    $00,$00,$00,$00,$00,$00,$00,$00
        EQUB    $84,$9D,$83,$8D,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$20,$20,$20,$20
        EQUB    $54,$68,$72,$75,$73,$74,$0A,$0D
        EQUB    $84,$9D,$83,$8D,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$20,$20,$20,$20
        EQUB    $54,$68,$72,$75,$73,$74,$0D,$0A
        EQUB    $0A,$0A,$83,$54,$68,$65,$20,$6B
        EQUB    $65,$79,$73,$20,$61,$72,$65,$3A
        EQUB    $0D,$0A,$0A,$0A,$85,$20,$20,$20
        EQUB    $20,$20,$20
		
		EQUB	$20,$43,$41,$50,$53
        EQUB    $20,$4C,$4F,$43,$4B,$20,$20,$5F
        EQUB    $20,$20,$52,$6F,$74,$61,$74,$65
        EQUB    $20,$4C,$65,$66,$74,$0D,$0A,$85
        EQUB    $20,$20,$20,$20,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$43,$54,$52,$4C
        EQUB    $20,$20,$5F,$20,$20,$52,$6F,$74
        EQUB    $61,$74,$65,$20,$52,$69,$67,$68
        EQUB    $74,$0D,$0A,$0A,$82,$20,$20,$20
        EQUB    $20,$20,$20,$20,$20,$20,$20,$52
        EQUB    $45,$54,$55,$52,$4E,$20,$20,$5F
        EQUB    $20,$20,$46,$69,$72,$65,$0D,$0A
        EQUB    $20,$20,$20,$82,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$53,$48,$49,$46
        EQUB    $54,$20,$20,$5F,$20,$20,$54,$68
        EQUB    $72,$75,$73,$74,$0D,$0A,$0A,$83
        EQUB    $20,$20,$20,$20,$20,$20,$20,$20
        EQUB    $20,$20,$20,$53,$50,$41,$43,$45
        EQUB    $20,$20,$5F,$20,$20,$53,$68,$69
        EQUB    $65,$6C,$64,$2F,$54,$72,$61,$63
        EQUB    $74,$6F,$72,$0D,$0A,$0A,$0A,$81
        EQUB    $20,$20,$20,$20,$43,$4F,$50,$59
        EQUB    $2C,$20,$44,$45,$4C,$45,$54,$45
        EQUB    $20,$20,$5F,$20,$20,$46,$72,$65
        EQUB    $65,$7A,$65,$2C,$20,$55,$6E,$66
        EQUB    $72,$65,$65,$7A,$65,$0D,$0A,$81
        EQUB    $20,$20,$20,$20,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$51,$2C,$20,$53
        EQUB    $20,$20,$5F,$20,$20,$51,$75,$69
        EQUB    $65,$74,$2C,$20,$53,$6F,$75,$6E
        EQUB    $64,$0D,$0A,$81,$20,$20,$20,$20
        EQUB    $20,$20,$20,$20,$20,$20,$45,$53
        EQUB    $43,$41,$50,$45,$20,$20,$5F,$20
        EQUB    $20,$51,$75,$69,$74,$20,$67,$61
        EQUB    $6D,$65,$0D,$0A,$0A,$0A,$86,$20
        EQUB    $43,$6F,$70,$79,$72,$69,$67,$68
        EQUB    $74,$20,$28,$43,$29,$20,$4A,$65
        EQUB    $72,$65,$6D,$79,$20,$43,$2E,$20
        EQUB    $53,$6D,$69,$74,$68,$20,$31,$39
        EQUB    $38,$36,$0D,$0A,$0A,$0A,$84,$9D
        EQUB    $87,$88,$20,$20,$50,$52,$45,$53
        EQUB    $53,$20,$54,$48,$45,$20,$53,$50
        EQUB    $41,$43,$45,$20,$42,$41,$52,$20
        EQUB    $54,$4F,$20,$53,$54,$41,$52,$54
        EQUB    $FF

\ ******************************************************************************
\ ******************************************************************************
\ * Status bar graphics displayed in first two lines of MODE 1 screen
\ ******************************************************************************
\ ******************************************************************************

.status_bar_bytes
		EQUB	$0F,$0C,$0C,$0C,$0C,$0C,$0C
        EQUB    $0C,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$80,$00,$80,$00
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$CC,$CC
        EQUB    $00,$0F,$00,$EE,$00,$CC,$00,$00
        EQUB    $00,$0F,$00,$CC,$CC,$CC,$CC,$FF
        EQUB    $00,$0F,$00,$66,$66,$66,$66,$EE
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$CC,$FF
        EQUB    $00,$0F,$00,$EE,$00,$CC,$00,$EE
        EQUB    $00,$0F,$00,$CC,$CC,$CC,$CC,$FF
        EQUB    $00,$0F,$00,$00,$00,$00,$00,$EE
        EQUB    $00,$0F,$00,$00,$10,$00,$10,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$80,$00,$80,$00
        EQUB    $00,$0F,$00,$CC,$CC,$CC,$CC,$FF
        EQUB    $00,$0F,$00,$00,$00,$00,$00,$EE
        EQUB    $00,$0F,$00,$77,$11,$11,$11,$77
        EQUB    $00,$0F,$00,$EE,$88,$88,$88,$EE
        EQUB    $00,$0F,$00,$CC,$CC,$CC,$DD,$FF
        EQUB    $00,$0F,$00,$66,$66,$CC,$88,$00
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$CC,$FF
        EQUB    $00,$0F,$00,$EE,$00,$CC,$00,$EE
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$00,$FF
        EQUB    $00,$0F,$00,$CC,$00,$EE,$66,$EE
        EQUB    $00,$0F,$00,$00,$10,$00,$10,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$80,$00,$80,$00
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$00,$FF
        EQUB    $00,$0F,$00,$CC,$00,$EE,$66,$EE
        EQUB    $00,$0F,$00,$FF,$CC,$CC,$CC,$FF
        EQUB    $00,$0F,$00,$EE,$66,$00,$00,$EE
        EQUB    $00,$0F,$00,$FF,$CC,$CC,$CC,$FF
        EQUB    $00,$0F,$00,$EE,$66,$66,$66,$EE
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$CC,$CC
        EQUB    $00,$0F,$00,$EE,$66,$EE,$CC,$66
        EQUB    $00,$0F,$00,$FF,$CC,$FF,$CC,$FF
        EQUB    $00,$0F,$00,$EE,$00,$CC,$00,$EE
        EQUB    $00,$0F,$00,$00,$10,$00,$10,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$00,$00,$F0,$00,$F0,$00
        EQUB    $00,$0F,$03,$03,$03,$03,$03,$03
        EQUB    $03,$0C,$06,$03,$01,$00,$00,$00
        EQUB    $00,$00,$00,$00,$08,$0C,$06,$03
        EQUB    $01,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$0F,$0C,$0C,$0D,$0F,$00
        EQUB    $0F,$00,$0E,$06,$06,$0E,$0E,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$00,$00,$00,$00
        EQUB    $0F,$00,$00,$00,$01,$03,$06,$0C
        EQUB    $08,$03,$06,$0C,$08,$00,$00,$00
		EQUB	$00

\ ******************************************************************************
\ ******************************************************************************
\ * Executable entry point
\ ******************************************************************************
\ ******************************************************************************

\ ******************************************************************************
\ * Function: RELOC_START
\ * Description: Slightly modified from original code during decryption
\ ******************************************************************************

.RELOC_START
{
        LDA     BRKV
        STA     old_brkv
        LDA     BRKV+1
        STA     old_brkv+1				; store current BRKV
        LDA     #LO(restore_brkv)
        STA     BRKV
        LDA     #HI(restore_brkv)
        STA     BRKV+1					; set BRKV to point at restore_brkv
        LDA     BYTEV+1
        BPL     eor_everything			; check OSBYTE vectored through OS otherwise bail out

        LDA     #$00
        LDX     #$FF
        LDY     #$FF
        JSR     OSBYTE					; *FX 0,255,255 - identify OS

        CPX     #$00
        BEQ     restore_brkv			; check for OS 1.00 / Electron

        SEI								; disable interrupts
        LDA     DEFVEC+1
        STA     boot_read_ptr
        LDA     DEFVEC+2
        STA     boot_read_ptr+1			; load default vector table
        LDY     DEFVEC					; presume size of vector table?
		
	.userv_loop
        LDA     (boot_read_ptr),Y
        STA     USERV,Y					; restore all default vectors
        DEY
        BNE     userv_loop

        CLI								; enable interrupts
        LDA     #$EA
        LDX     #$00
        LDY     #$00
        JSR     OSBYTE					; *FX &EA,0,0 - disable Tube

        LDA     #$8C
        LDX     #$0C
        LDY     #$00
        JSR     OSBYTE					; *FX &8C,0,0 - *TAPE 1200

        LDA     #$C8
        LDX     #$03
        LDY     #$00
        JSR     OSBYTE					; *FX &C8,3,0 - disable ESCAPE, memory cleared on BREAK

        LDA     #$04
        LDX     #$01
        JSR     OSBYTE					; *FX 4,1,0 - disable cursor editing, edit keys give ASCII codes

        LDA     #$E1
        LDX     #$00
        LDY     #$00
        JSR     OSBYTE					; *FX &E1,0,0 - ignore FN keys

	.restore_brkv
        LDA     old_brkv
        STA     BRKV
        LDA     old_brkv+1
        STA     BRKV+1					; restore old BRKV
        LDA     #$00					; is $01 in original source as relocates from $1A01
        STA     boot_read_ptr
        LDA     #$1A
        STA     boot_read_ptr+1			; set boot_read_ptr to &1A01
        LDA     #$60
        STA     boot_write_ptr
        LDA     #$0A
        STA     boot_write_ptr+1		; set boot_write_ptr to &0A60
        LDX     #$3D
		
	.relocate
        LDY     #$00
		
	.relocate_loop
        LDA     (boot_read_ptr),Y
        STA     (boot_write_ptr),Y
        DEY
        BNE     relocate_loop

        INC     boot_read_ptr+1
        INC     boot_write_ptr+1
        DEX
        BNE     relocate				; relocate &3D pages (~16k) from &1A01 to &0A60

        JMP     main_entry				; jump to entry
}

\ ******************************************************************************
\ * Function: eor_everything
\ * Description: <>
\ ******************************************************************************

.eor_everything
{
        LDA     #$01
        STA     boot_read_ptr
        LDA     #$1A
        STA     boot_read_ptr+1
        LDX     #$3D
		
	.eor_loop
        LDA     (boot_read_ptr),Y
        EOR     (boot_read_ptr+1),Y
        STA     (boot_read_ptr),Y
        DEY
        BNE     eor_loop

        INC     boot_read_ptr+1
        DEX
        BNE     eor_loop

        RTS
}

\ ******************************************************************************
\ ******************************************************************************
\ * End of all code
\ ******************************************************************************
\ ******************************************************************************

.RELOC_END

\ ******************************************************************************
\ ******************************************************************************
\ * Save code to disk image with correct execution address to relocate function
\ ******************************************************************************
\ ******************************************************************************

SAVE "Thrust", START, RELOC_END, RELOC_START+OFFSET, RELOAD_ADDR

\ ******************************************************************************
\ ******************************************************************************
\ * EOF
\ ******************************************************************************
\ ******************************************************************************
